using MatrizTributaria.Models;
using MatrizTributaria.Areas.Cliente.Models;
using PagedList;
using System;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Linq;
using System.Web.Mvc;
using Newtonsoft.Json;
using MatrizTributaria.Models.ViewModels;
using System.Security.Cryptography;


namespace MatrizTributaria.Areas.Cliente.Controllers
{
    public class TributacaoEmpresaController : Controller
    {
        readonly private MatrizDbContext db = new MatrizDbContext();
        List<Usuario> listUser = new List<Usuario>();
        List<Empresa> listempresa = new List<Empresa>(); //listar a empresa
       

        Empresa emp;
        //listas para analise
        IQueryable<AnaliseTributaria> lstAnalise;
        List<AnaliseTributaria>     analise = new List<AnaliseTributaria>();
        List<AnaliseTributariaSn> analiseSn = new List<AnaliseTributariaSn>();

        List<AnaliseTributariaNCM> analise_NCM = new List<AnaliseTributariaNCM>(); //por ncm

        List<AnaliseProd> analiseProd = new List<AnaliseProd>();

       
        List<AnaliseTributaria>  trib = new List<AnaliseTributaria>();
        List<AnaliseTributaria2> trib2 = new List<AnaliseTributaria2>(); //itens sem correspondecia, tanto produto quanto tributacao
        List<AnaliseTributaria3> trib3 = new List<AnaliseTributaria3>(); //itens sem correspondencia: tem cadastro do produto mas nao tem tributacao
        List<TributacaoEmpresa>  tribEmpProd = new List<TributacaoEmpresa>(); //Lista para tributacao empresas

        //origem e destino
        string ufOrigem = "";
        string ufDestino = "";

        Usuario usuario;
        Empresa empresa;

        int IdEmp = 0; 

        private void Write(string texto)
        {
            Debug.Write(texto + "\n");
        }

        [HttpGet]
        public ActionResult AnaliseTributaria(string ufOrigem, string ufDestino, string tributacao)
        {
            string usuarioSessao = ""; //variavel auxiliar
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            else
            {
                usuarioSessao = Session["usuario"].ToString(); //pega o usuário da sessão
            }

            //Verifica se a variavel de sessão USUARIOS está nula, se estiver carrega as informações trazidas da sessão
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == usuarioSessao select a).FirstOrDefault(); //pega o usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else
            {
                //será usada para carregar a lista pelo cnpj
                this.empresa = (Empresa)Session["empresas"]; //se nao for nula basta carregar a empresa em outra variavel de sessão

            }
           

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();

            //VerificaTributacao(tributacao); //verificar se a tributação escolhida está ativa
            //se for simples nacional direciona para essa action
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["tributacao"] = "SIMPLES";
                TempData.Keep("tributacao");
            }
            else
            {
                TempData["tributacao"] = "OUTROS";
                TempData.Keep("tributacao");
            }

            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 

            ViewBag.Tributacao = TempData["tributacao"].ToString();

            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            //se for simples nacional direciona para essa action
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["UfOrigem"] = null;
                TempData["UfDestino"] = null;

                    
                TempData.Keep("UfDestino");
                TempData.Keep("UfOrigem");
                return RedirectToAction("AnaliseTributariaSN");
            }
                      

            

            //VerificaTempData();

            //pega a verificação pelo ncm
            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao

           

            ViewBag.TotalRegistros = this.analise_NCM.Count(a => a.TE_ID > 0 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));


            /*     ANALISE USANDO O NCM    */

            /*FIGURA: VENDA NO VAREJO PARA CONSUMIDOR FINAL*/
            ViewBag.AlqICMSVarejoCFMaior        =  this.analise_NCM.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL >  a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSVarejoCFMenor        =  this.analise_NCM.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL <  a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSVarejoCFIgual        =  this.analise_NCM.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null); //NÃO PODE SER NULA
            ViewBag.AlqICMSVarejoCFNullaInterno =  this.analise_NCM.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)); //onde nao for nulo no cliente mas no mtx sim
            ViewBag.AlqICMSVarejoCFNullaExterno =  this.analise_NCM.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSVarejoCFNullaAmbos   =  this.analise_NCM.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSVarejoCFUsoConsumo   =  this.analise_NCM.Count(a => a.PRODUTO_CATEGORIA == 21 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
           
            ViewBag.AlqICMSVarejoCFNullaExternoIsenta  = this.analise_NCM.Count(a =>  a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 40 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSVarejoCFNullaExternoNaoTrib = this.analise_NCM.Count(a =>  a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 41 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSVarejoCFSubsTributaria      = this.analise_NCM.Count(a =>  a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));



            /*FIGURA: VENDA NO VAREJO PARA CONSUMIDOR FINAL EM ST: CST 60 TEM QUE SER IGUAL - ok*/
            ViewBag.AlqICMSSTVarejoCFMaior       =  this.analise_NCM.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL > a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSSTVarejoCFMenor       =  this.analise_NCM.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL < a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSSTVarejoCFIgual       =  this.analise_NCM.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSSTVarejoCFNulaInterno =  this.analise_NCM.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSSTVarejoCFNulaExterno =  this.analise_NCM.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSSTVarejoCFNulaAmbos   =  this.analise_NCM.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqICMS_ST_VarejoCFUsoConsumo = this.analise_NCM.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.PRODUTO_CATEGORIA == 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqICMS_ST_VarejoCFNullaExternoIsenta = this.analise_NCM.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE  == null  && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 40 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqICMS_ST_VarejoCFNullaExternoNaoTrib = this.analise_NCM.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));




            /*FIGURA: VENDA NO VAREJO PARA CONTRIBUINTE*/
            ViewBag.AlqICMSVendaVContMaior          =  this.analise_NCM.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT > a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE &&  a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSVendaVContMenor          =  this.analise_NCM.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT < a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSVendaVContIguais         =  this.analise_NCM.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE && a.ALIQ_ICMS_VENDA_VAREJO_CONT != null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSVendaVContNulasInternos  =  this.analise_NCM.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT != null && a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSVendaVContNulasExternos  =  this.analise_NCM.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == null && a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE != null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSVendaVContNulasNulaAmbos =  this.analise_NCM.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == null && a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
           
            ViewBag.AlqICMSVendaVContUsoConsumo = this.analise_NCM.Count(a =>  a.PRODUTO_CATEGORIA == 21 &&(a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSVendaVContIsenta     = this.analise_NCM.Count(a =>a.CST_VENDA_VAREJO_CONT_BASE == 40 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSVendaVContNaoTrib    = this.analise_NCM.Count(a => a.CST_VENDA_VAREJO_CONT_BASE == 41 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSVendaVContSubsTributaria = this.analise_NCM.Count(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));





            /*FIGURA: VENDA NO VAREJO EMM ST PARA CONTRIBUINTE - ok*/
            ViewBag.AlqICMSSTVendaVContMaior =          this.analise_NCM.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT > a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 60  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSSTVendaVContMenor =          this.analise_NCM.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT < a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 60  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSSTVendaVContIguais =         this.analise_NCM.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT == a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 60  && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSSTVendaVContNulasInternos =  this.analise_NCM.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT != null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE == 60  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSSTVendaVContNulasExternos =  this.analise_NCM.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT == null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE != null && a.CST_VENDA_VAREJO_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSSTVendaVContNulasNulaAmbos = this.analise_NCM.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT == null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqICMSSTVendaVContUsoConsumo = this.analise_NCM.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT == null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT != null && a.PRODUTO_CATEGORIA == 21  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqICMSSTVendaVContIsenta = this.analise_NCM.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT == null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT != null && a.CST_VENDA_VAREJO_CONT_BASE == 40 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqICMSSTVendaVContNaoTrib = this.analise_NCM.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT == null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT != null && a.CST_VENDA_VAREJO_CONT_BASE == 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));







            /*FIGURA: VENDA NO ATACADO PARA CONTRIBUINTE*/
            ViewBag.AlqICMSVataMaior       =  this.analise_NCM.Count(a => a.ALIQ_ICMS_VENDA_ATA > a.ALIQ_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSVataMenor       =  this.analise_NCM.Count(a => a.ALIQ_ICMS_VENDA_ATA < a.ALIQ_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSVataIgual       =  this.analise_NCM.Count(a => a.ALIQ_ICMS_VENDA_ATA == a.ALIQ_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.ALIQ_ICMS_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSVataNulaInterno =  this.analise_NCM.Count(a => a.ALIQ_ICMS_VENDA_ATA != null && a.ALIQ_ICMS_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSVataNulaExterno =  this.analise_NCM.Count(a => a.ALIQ_ICMS_VENDA_ATA == null && a.ALIQ_ICMS_VENDA_ATA_CONT_BASE != null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSVataNulaAmbos =  this.analise_NCM.Count(a => a.ALIQ_ICMS_VENDA_ATA == null && a.ALIQ_ICMS_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSVataUsoConsumo = this.analise_NCM.Count(a => a.PRODUTO_CATEGORIA == 21 &&  (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSVataIsenta    = this.analise_NCM.Count(a => a.CST_VENDA_ATA_CONT_BASE == 40 &&(a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSVataNaoTrib   = this.analise_NCM.Count(a => a.CST_VENDA_ATA_CONT_BASE == 41 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSVataSubsTributaria = this.analise_NCM.Count(a => a.CST_VENDA_ATA_CONT_BASE == 60 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));




            /*Aliq ICMS ST venda ATA - ok*/
            ViewBag.AlqICMSSTVataMaior =  this.analise_NCM.Count(a => a.ALIQ_ICMS_ST_VENDA_ATA > a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSSTVataMenor =  this.analise_NCM.Count(a => a.ALIQ_ICMS_ST_VENDA_ATA < a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSSTVataIgual =  this.analise_NCM.Count(a => a.ALIQ_ICMS_ST_VENDA_ATA == a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 60  && a.ALIQ_ICMS_ST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSSTVataNulaInterno =  this.analise_NCM.Count(a => a.ALIQ_ICMS_ST_VENDA_ATA != null && a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSSTVataNulaExterno =  this.analise_NCM.Count(a => a.ALIQ_ICMS_ST_VENDA_ATA == null && a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE != null && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSSTVataNulaAMBOS =  this.analise_NCM.Count(a => a.ALIQ_ICMS_ST_VENDA_ATA == null && a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE == 60  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqICMSSTVataUsoConsumo = this.analise_NCM.Count(a => a.ALIQ_ICMS_ST_VENDA_ATA == null && a.ALIQ_ICMS_ST_VENDA_ATA != null && a.PRODUTO_CATEGORIA == 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqICMSSTVataIsenta  = this.analise_NCM.Count(a => a.ALIQ_ICMS_ST_VENDA_ATA == null && a.ALIQ_ICMS_ST_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE == 40 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqICMSSTVataNTrib   = this.analise_NCM.Count(a => a.ALIQ_ICMS_ST_VENDA_ATA == null && a.ALIQ_ICMS_ST_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE == 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));




            /*Aliq ICMS Vendo no atacado para Simples Nacional - ok*/
            ViewBag.AliqICMSVendaAtaSimpNacionalMaior =  this.analise_NCM.Count(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL > a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSVendaAtaSimpNacionalMenor =  this.analise_NCM.Count(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL < a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSVendaAtaSimpNacionalIgual =  this.analise_NCM.Count(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSVendaAtaSimpNacionalNulaInterno =  this.analise_NCM.Count(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSVendaAtaSimpNacionalNulaExterno =  this.analise_NCM.Count(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSVendaAtaSimpNacionalNulaAMBOS      =  this.analise_NCM.Count(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSVendaAtaSimpNacionalUsoConsumo     = this.analise_NCM.Count(a => a.PRODUTO_CATEGORIA == 21 &&(a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSVendaAtaSimpNacionalIsenta         = this.analise_NCM.Count(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 40 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSVendaAtaSimpNacionalNTrib          = this.analise_NCM.Count(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 41 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSVendaAtaSimpNacionalSubsTributaria = this.analise_NCM.Count(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));



            /*Aliq ICMS ST Venda no atacado para Simples Nacional - ok*/
            ViewBag.AliqICMSSTVendaAtaSimpNacionalMaior =  this.analise_NCM.Count(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL > a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSSTVendaAtaSimpNacionalMenor =  this.analise_NCM.Count(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL < a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60   && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSSTVendaAtaSimpNacionalIgual =  this.analise_NCM.Count(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSSTVendaAtaSimpNacionalNulaInterno =  this.analise_NCM.Count(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60   && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSSTVendaAtaSimpNacionalNulaExterno =  this.analise_NCM.Count(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60   && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSSTVendaAtaSimpNacionalNulaAMBOS   =  this.analise_NCM.Count(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
           
            //ViewBag.AliqICMSSTVendaAtaSimpNacionalUsoConsumo = this.analise_NCM.Count(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.PRODUTO_CATEGORIA == 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AliqICMSSTVendaAtaSimpNacionalIsenta = this.analise_NCM.Count(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 40 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AliqICMSSTVendaAtaSimpNacionalNTrib = this.analise_NCM.Count(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));





            /*OBS: 22072021: ACERTADO COMPARAÇÃO DE IGUALDADE: RETIRAR OS NULOS*/
            /*Aliq ICMS Venda Varejo Consumidor Final - ok*/
            //ViewBag.AlqICMSVarejoCFMaior        = this.analise.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL > a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO && a.Cst_Venda_Varejo_Cons_Final_INTERNO != 60  && a.Cst_Venda_Varejo_Cons_Final_INTERNO != 40 && a.Cst_Venda_Varejo_Cons_Final_INTERNO != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqICMSVarejoCFMenor        = this.analise.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL < a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO && a.Cst_Venda_Varejo_Cons_Final_INTERNO != 60 && a.Cst_Venda_Varejo_Cons_Final_INTERNO != 40 && a.Cst_Venda_Varejo_Cons_Final_INTERNO != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqICMSVarejoCFIgual        = this.analise.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.Cst_Venda_Varejo_Cons_Final_INTERNO != 60 && a.Cst_Venda_Varejo_Cons_Final_INTERNO != 40 && a.Cst_Venda_Varejo_Cons_Final_INTERNO != 41 &&  a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) );
            //ViewBag.AlqICMSVarejoCFNullaInterno = this.analise.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO == null && a.Cst_Venda_Varejo_Cons_Final_INTERNO != 60 && a.Cst_Venda_Varejo_Cons_Final_INTERNO != 40 && a.Cst_Venda_Varejo_Cons_Final_INTERNO != 41 && a.PRODUTO_CATEGORIA != 21 &&  a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) ); //onde nao for nulo no cliente mas no mtx sim
            //ViewBag.AlqICMSVarejoCFNullaExterno = this.analise.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO != null && a.Cst_Venda_Varejo_Cons_Final_INTERNO != 60 && a.Cst_Venda_Varejo_Cons_Final_INTERNO != 40 && a.Cst_Venda_Varejo_Cons_Final_INTERNO != 41 && a.PRODUTO_CATEGORIA != 21 &&  a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqICMSVarejoCFNullaAmbos   = this.analise.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO == null && a.Cst_Venda_Varejo_Cons_Final_INTERNO != 60 && a.Cst_Venda_Varejo_Cons_Final_INTERNO != 40 && a.Cst_Venda_Varejo_Cons_Final_INTERNO != 41 && a.PRODUTO_CATEGORIA != 21 &&  a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            //ViewBag.AlqICMSVarejoCFUsoConsumo   = this.analise.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.PRODUTO_CATEGORIA == 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ////isenta e nao tributada
            //ViewBag.AlqICMSVarejoCFNullaExternoIsenta = this.analise.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL  == null && a.Cst_Venda_Varejo_Cons_Final_INTERNO == 40  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqICMSVarejoCFNullaExternoNaoTrib = this.analise.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.Cst_Venda_Varejo_Cons_Final_INTERNO == 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));


            ///*Aliq ICMS ST Venda Varejo Consumidor Final - ok*/
            //ViewBag.AlqICMSSTVarejoCFMaior = this.analise.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL > a.Aliq_Icms_ST_Venda_Varejo_Cons_Final_INTERNO  && a.Cst_Venda_Varejo_Cons_Final_INTERNO == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqICMSSTVarejoCFMenor = this.analise.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL < a.Aliq_Icms_ST_Venda_Varejo_Cons_Final_INTERNO && a.Cst_Venda_Varejo_Cons_Final_INTERNO == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqICMSSTVarejoCFIgual = this.analise.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == a.Aliq_Icms_ST_Venda_Varejo_Cons_Final_INTERNO && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.Cst_Venda_Varejo_Cons_Final_INTERNO == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqICMSSTVarejoCFNulaInterno = this.analise.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.Aliq_Icms_ST_Venda_Varejo_Cons_Final_INTERNO == null && a.Cst_Venda_Varejo_Cons_Final_INTERNO == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqICMSSTVarejoCFNulaExterno = this.analise.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.Aliq_Icms_ST_Venda_Varejo_Cons_Final_INTERNO != null && a.Cst_Venda_Varejo_Cons_Final_INTERNO == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqICMSSTVarejoCFNulaAmbos = this.analise.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.Aliq_Icms_ST_Venda_Varejo_Cons_Final_INTERNO == null  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));


            ///*Aliq ICMS Venda Varejo Contribuinte - ok*/
            //ViewBag.AlqICMSVendaVContMaior = this.analise.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT > a.Aliq_Icms_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqICMSVendaVContMenor = this.analise.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT < a.Aliq_Icms_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqICMSVendaVContIguais = this.analise.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == a.Aliq_Icms_Venda_Varejo_Cont_INTERNO && a.ALIQ_ICMS_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqICMSVendaVContNulasInternos = this.analise.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT != null && a.Aliq_Icms_Venda_Varejo_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqICMSVendaVContNulasExternos = this.analise.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == null && a.Aliq_Icms_Venda_Varejo_Cont_INTERNO != null  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            //ViewBag.AlqICMSVendaVContNulasNulaAmbos = this.analise.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == null && a.Aliq_Icms_Venda_Varejo_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));




            ///*Aliq ICMS ST Venda Varejo Contribuinte - ok*/
            //ViewBag.AlqICMSSTVendaVContMaior = this.analise.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT > a.Aliq_Icms_ST_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqICMSSTVendaVContMenor = this.analise.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT < a.Aliq_Icms_ST_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqICMSSTVendaVContIguais = this.analise.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT == a.Aliq_Icms_ST_Venda_Varejo_Cont_INTERNO && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqICMSSTVendaVContNulasInternos = this.analise.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT != null && a.Aliq_Icms_ST_Venda_Varejo_Cont_INTERNO == null && a.Cst_Venda_Varejo_Cont_INTERNO == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqICMSSTVendaVContNulasExternos = this.analise.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT == null && a.Aliq_Icms_ST_Venda_Varejo_Cont_INTERNO != null && a.Cst_Venda_Varejo_Cont_INTERNO == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            //ViewBag.AlqICMSSTVendaVContNulasNulaAmbos = this.analise.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT == null && a.Aliq_Icms_ST_Venda_Varejo_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));


            ///*Aliq ICMS venda ATA - ok*/
            //ViewBag.AlqICMSVataMaior = this.analise.Count(a => a.ALIQ_ICMS_VENDA_ATA > a.Aliq_Icms_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqICMSVataMenor = this.analise.Count(a => a.ALIQ_ICMS_VENDA_ATA < a.Aliq_Icms_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqICMSVataIgual = this.analise.Count(a => a.ALIQ_ICMS_VENDA_ATA == a.Aliq_Icms_Venda_Ata_Cont_INTERNO && a.ALIQ_ICMS_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqICMSVataNulaInterno = this.analise.Count(a => a.ALIQ_ICMS_VENDA_ATA != null && a.Aliq_Icms_Venda_Ata_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqICMSVataNulaExterno = this.analise.Count(a => a.ALIQ_ICMS_VENDA_ATA == null && a.Aliq_Icms_Venda_Ata_Cont_INTERNO != null &&  a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            ///*15.12.2022*/
            //ViewBag.AlqICMSVataNulaAmbos = this.analise.Count(a => a.ALIQ_ICMS_VENDA_ATA == null && a.Aliq_Icms_Venda_Ata_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));


            ///*Aliq ICMS ST venda ATA - ok*/
            //ViewBag.AlqICMSSTVataMaior = this.analise.Count(a => a.ALIQ_ICMS_ST_VENDA_ATA > a.Aliq_Icms_ST_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqICMSSTVataMenor = this.analise.Count(a => a.ALIQ_ICMS_ST_VENDA_ATA < a.Aliq_Icms_ST_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqICMSSTVataIgual = this.analise.Count(a => a.ALIQ_ICMS_ST_VENDA_ATA == a.Aliq_Icms_ST_Venda_Ata_Cont_INTERNO && a.ALIQ_ICMS_ST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqICMSSTVataNulaInterno = this.analise.Count(a => a.ALIQ_ICMS_ST_VENDA_ATA != null && a.Aliq_Icms_ST_Venda_Ata_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqICMSSTVataNulaExterno = this.analise.Count(a => a.ALIQ_ICMS_ST_VENDA_ATA == null && a.Aliq_Icms_ST_Venda_Ata_Cont_INTERNO != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            //ViewBag.AlqICMSSTVataNulaAMBOS = this.analise.Count(a => a.ALIQ_ICMS_ST_VENDA_ATA == null && a.Aliq_Icms_ST_Venda_Ata_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            ///*Aliq ICMS Vendo no atacado para Simples Nacional - ok*/
            //ViewBag.AliqICMSVendaAtaSimpNacionalMaior = this.analise.Count(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL > a.Aliq_Icms_Venda_Ata_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AliqICMSVendaAtaSimpNacionalMenor = this.analise.Count(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL < a.Aliq_Icms_Venda_Ata_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AliqICMSVendaAtaSimpNacionalIgual = this.analise.Count(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == a.Aliq_Icms_Venda_Ata_Simp_Nacional_INTERNO && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AliqICMSVendaAtaSimpNacionalNulaInterno = this.analise.Count(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.Aliq_Icms_Venda_Ata_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AliqICMSVendaAtaSimpNacionalNulaExterno = this.analise.Count(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.Aliq_Icms_Venda_Ata_Simp_Nacional_INTERNO != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AliqICMSVendaAtaSimpNacionalNulaAMBOS = this.analise.Count(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.Aliq_Icms_Venda_Ata_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));


            ///*Aliq ICMS ST Venda no atacado para Simples Nacional - ok*/
            //ViewBag.AliqICMSSTVendaAtaSimpNacionalMaior = this.analise.Count(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL > a.Aliq_Icms_ST_Venda_Ata_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AliqICMSSTVendaAtaSimpNacionalMenor = this.analise.Count(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL < a.Aliq_Icms_ST_Venda_Ata_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AliqICMSSTVendaAtaSimpNacionalIgual = this.analise.Count(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == a.Aliq_Icms_ST_Venda_Ata_Simp_Nacional_INTERNO && a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AliqICMSSTVendaAtaSimpNacionalNulaInterno = this.analise.Count(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.Aliq_Icms_ST_Venda_Ata_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AliqICMSSTVendaAtaSimpNacionalNulaExterno = this.analise.Count(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.Aliq_Icms_ST_Venda_Ata_Simp_Nacional_INTERNO != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            //ViewBag.AliqICMSSTVendaAtaSimpNacionalNulaAMBOS = this.analise.Count(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.Aliq_Icms_ST_Venda_Ata_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));



            return View();
        }


        [HttpGet]
        public ActionResult AnaliseTributariaSN(string ufOrigem, string ufDestino, string tributacao)
        {
            string usuarioSessao = ""; //variavel auxiliar
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            else
            {
                usuarioSessao = Session["usuario"].ToString(); //pega o usuário da sessão
            }

            //Verifica se a variavel de sessão USUARIOS está nula, se estiver carrega as informações trazidas da sessão
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == usuarioSessao select a).FirstOrDefault(); //pega o usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else
            {
                //será usada para carregar a lista pelo cnpj
                this.empresa = (Empresa)Session["empresas"]; //se nao for nula basta carregar a empresa em outra variavel de sessão

            }


            //origem e destino
            //se estiver nulla, ele vai ver qual a uf do cliente e vai applicar


            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();

            //VerificaTributacao(tributacao); //verificar se a tributação escolhida está ativa
            //se for simples nacional direciona para essa action
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["tributacao"] = "SIMPLES";
                TempData.Keep("tributacao");
            }
            else
            {
                TempData["tributacao"] = "OUTROS";
                TempData.Keep("tributacao");
            }


            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 

                        

            ViewBag.Tributacao = TempData["tributacao"].ToString();



            this.ufOrigem = TempData["UfOrigem"].ToString();
            this.ufDestino = TempData["UfDestino"].ToString();




            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            //se for simples nacional direciona para essa action
            if (this.empresa.simples_nacional.Equals(0))
            {
                TempData["UfOrigem"] = null;
                TempData["UfDestino"] = null;


                TempData.Keep("UfDestino");
                TempData.Keep("UfOrigem");
                return RedirectToAction("AnaliseTributaria");
            }

                     

            VerificaTempDataSN();
            //    /*Analises tributárias para ICMS de Saída*/

            //    /*OBS: 22072021: ACERTADO COMPARAÇÃO DE IGUALDADE: RETIRAR OS NULOS*/
            //    /*Aliq ICMS Venda Varejo Consumidor Final - ok*/
            //ViewBag.AlqICMSVarejoCFMaior = this.analiseSn.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL > a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqICMSVarejoCFMenor = this.analiseSn.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL < a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqICMSVarejoCFIgual = this.analiseSn.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqICMSVarejoCFNullaInterno = this.analiseSn.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)); //onde nao for nulo no cliente mas no mtx sim
            //ViewBag.AlqICMSVarejoCFNullaExterno = this.analiseSn.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            ////    /*Aliq ICMS ST Venda Varejo Consumidor Final - ok*/
            //ViewBag.AlqICMSSTVarejoCFMaior = this.analiseSn.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL > a.Aliq_Icms_ST_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqICMSSTVarejoCFMenor = this.analiseSn.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL < a.Aliq_Icms_ST_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqICMSSTVarejoCFIgual = this.analiseSn.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == a.Aliq_Icms_ST_Venda_Varejo_Cons_Final_INTERNO && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqICMSSTVarejoCFNulaInterno = this.analiseSn.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.Aliq_Icms_ST_Venda_Varejo_Cons_Final_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqICMSSTVarejoCFNulaExterno = this.analiseSn.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));


            /*NOVOS*/
            ViewBag.AlqICMSVarejoCFMaior = this.analiseSn.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL > a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSVarejoCFMenor = this.analiseSn.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL < a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSVarejoCFIgual = this.analiseSn.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSVarejoCFNullaInterno = this.analiseSn.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO == null  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)); //onde nao for nulo no cliente mas no mtx sim
            ViewBag.AlqICMSVarejoCFNullaExterno = this.analiseSn.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSVarejoCFNullaAmbos = this.analiseSn.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            ViewBag.AlqICMSVarejoCFUsoConsumo = this.analiseSn.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //isenta e nao tributada
            ViewBag.AlqICMSVarejoCFNullaExternoIsenta = this.analiseSn.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.Cst_Venda_Varejo_Cons_Final_INTERNO == 900 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSVarejoCFNullaExternoNaoTrib = this.analiseSn.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.Cst_Venda_Varejo_Cons_Final_INTERNO == 900 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));





            /*Aliq ICMS ST Venda Varejo Consumidor Final - ok*/
            ViewBag.AlqICMSSTVarejoCFMaior = this.analiseSn.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL > a.Aliq_Icms_ST_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSSTVarejoCFMenor = this.analiseSn.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL < a.Aliq_Icms_ST_Venda_Varejo_Cons_Final_INTERNO  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSSTVarejoCFIgual = this.analiseSn.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == a.Aliq_Icms_ST_Venda_Varejo_Cons_Final_INTERNO && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSSTVarejoCFNulaInterno = this.analiseSn.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.Aliq_Icms_ST_Venda_Varejo_Cons_Final_INTERNO == null  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSSTVarejoCFNulaExterno = this.analiseSn.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.Aliq_Icms_ST_Venda_Varejo_Cons_Final_INTERNO != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSSTVarejoCFNulaAmbos = this.analiseSn.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.Aliq_Icms_ST_Venda_Varejo_Cons_Final_INTERNO == null  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));



            /*FIM NOVOS*/

            //    /*Aliq ICMS Venda Varejo Contribuinte - ok*/
            ViewBag.AlqICMSVendaVContMaior = this.analiseSn.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT > a.Aliq_Icms_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSVendaVContMenor = this.analiseSn.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT < a.Aliq_Icms_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSVendaVContIguais = this.analiseSn.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == a.Aliq_Icms_Venda_Varejo_Cont_INTERNO && a.ALIQ_ICMS_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSVendaVContNulasInternos = this.analiseSn.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT != null && a.Aliq_Icms_Venda_Varejo_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSVendaVContNulasExternos = this.analiseSn.Count(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            //    /*Aliq ICMS ST Venda Varejo Contribuinte - ok*/
            ViewBag.AlqICMSSTVendaVContMaior = this.analiseSn.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT > a.Aliq_Icms_ST_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSSTVendaVContMenor = this.analiseSn.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT < a.Aliq_Icms_ST_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSSTVendaVContIguais = this.analiseSn.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT == a.Aliq_Icms_ST_Venda_Varejo_Cont_INTERNO && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSSTVendaVContNulasInternos = this.analiseSn.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT != null && a.Aliq_Icms_ST_Venda_Varejo_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSSTVendaVContNulasExternos = this.analiseSn.Count(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));


            //    /*Aliq ICMS venda ATA - ok*/
            ViewBag.AlqICMSVataMaior = this.analiseSn.Count(a => a.ALIQ_ICMS_VENDA_ATA > a.Aliq_Icms_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSVataMenor = this.analiseSn.Count(a => a.ALIQ_ICMS_VENDA_ATA < a.Aliq_Icms_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSVataIgual = this.analiseSn.Count(a => a.ALIQ_ICMS_VENDA_ATA == a.Aliq_Icms_Venda_Ata_Cont_INTERNO && a.ALIQ_ICMS_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSVataNulaInterno = this.analiseSn.Count(a => a.ALIQ_ICMS_VENDA_ATA != null && a.Aliq_Icms_Venda_Ata_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSVataNulaExterno = this.analiseSn.Count(a => a.ALIQ_ICMS_VENDA_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            //    /*Aliq ICMS ST venda ATA - ok*/
            ViewBag.AlqICMSSTVataMaior = this.analiseSn.Count(a => a.ALIQ_ICMS_ST_VENDA_ATA > a.Aliq_Icms_ST_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSSTVataMenor = this.analiseSn.Count(a => a.ALIQ_ICMS_ST_VENDA_ATA < a.Aliq_Icms_ST_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSSTVataIgual = this.analiseSn.Count(a => a.ALIQ_ICMS_ST_VENDA_ATA == a.Aliq_Icms_ST_Venda_Ata_Cont_INTERNO && a.ALIQ_ICMS_ST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSSTVataNulaInterno = this.analiseSn.Count(a => a.ALIQ_ICMS_ST_VENDA_ATA != null && a.Aliq_Icms_ST_Venda_Ata_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqICMSSTVataNulaExterno = this.analiseSn.Count(a => a.ALIQ_ICMS_ST_VENDA_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));


            //    /*Aliq ICMS Vendo no atacado para Simples Nacional - ok*/
            ViewBag.AliqICMSVendaAtaSimpNacionalMaior = this.analiseSn.Count(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL > a.Aliq_Icms_Venda_Ata_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSVendaAtaSimpNacionalMenor = this.analiseSn.Count(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL < a.Aliq_Icms_Venda_Ata_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSVendaAtaSimpNacionalIgual = this.analiseSn.Count(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == a.Aliq_Icms_Venda_Ata_Simp_Nacional_INTERNO && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSVendaAtaSimpNacionalNulaInterno = this.analiseSn.Count(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.Aliq_Icms_Venda_Ata_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSVendaAtaSimpNacionalNulaExterno = this.analiseSn.Count(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));


            //    /*Aliq ICMS ST Venda no atacado para Simples Nacional - ok*/
            ViewBag.AliqICMSSTVendaAtaSimpNacionalMaior = this.analiseSn.Count(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL > a.Aliq_Icms_ST_Venda_Ata_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSSTVendaAtaSimpNacionalMenor = this.analiseSn.Count(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL < a.Aliq_Icms_ST_Venda_Ata_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSSTVendaAtaSimpNacionalIgual = this.analiseSn.Count(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == a.Aliq_Icms_ST_Venda_Ata_Simp_Nacional_INTERNO && a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSSTVendaAtaSimpNacionalNulaInterno = this.analiseSn.Count(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.Aliq_Icms_ST_Venda_Ata_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSVendaAtaSimpNacionalNulaExterno = this.analiseSn.Count(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));


            return View();
        }



        [HttpGet]
        public ActionResult AnaliseRedBaseCalSai(string ufOrigem, string ufDestino, string tributacao)
        {

            string usuarioSessao = ""; //variavel auxiliar

            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            else
            {
                usuarioSessao = Session["usuario"].ToString(); //pega o usuário da sessão

            }

            //Verifica se a variavel de sessão USUARIOS está nula, se estiver carrega as informações trazidas da sessão
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == usuarioSessao select a).FirstOrDefault(); //pega o usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else
            {
                //será usada para carregar a lista pelo cnpj
                this.empresa = (Empresa)Session["empresas"]; //se nao for nula basta carregar a empresa em outra variavel de sessão

            }

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 

            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["tributacao"] = "SIMPLES";
                TempData.Keep("tributacao");
            }
            else
            {
                TempData["tributacao"] = "OUTROS";
                TempData.Keep("tributacao");
            }
          
           
            ViewBag.Tributacao = TempData["tributacao"].ToString();

            //VerificaTempData();

            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao

            ViewBag.TotalRegistros = this.analise_NCM.Count(a => a.TE_ID > 0 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));


            /*Aliq Redução da Base Calc ICMS venda CF*/
            ViewBag.AlqRBCIcmsCFMaior = this.analise_NCM.Count(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL > a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE  == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqRBCIcmsCFMenor = this.analise_NCM.Count(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL < a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE  == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqRBCIcmsCFIgual = this.analise_NCM.Count(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqRBCIcmsCFNullaInterno = this.analise_NCM.Count(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqRBCIcmsCFNullaExterno = this.analise_NCM.Count(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqRBCIcmsCFNullaAMBOS = this.analise_NCM.Count(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            ViewBag.AlqRBCIcmsCFSemReducao = this.analise_NCM.Count(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 20 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 70);




            /*Aliq Redução Base Calc ICMS ST venda CF*/
            ViewBag.AlqRBCIcmsSTCFMaior = this.analise_NCM.Count(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL > a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqRBCIcmsSTCFMenor = this.analise_NCM.Count(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL < a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqRBCIcmsSTCFIguais = this.analise_NCM.Count(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL == a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqRBCIcmsSTCFNullaInternos = this.analise_NCM.Count(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqRBCIcmsSTCFNullaExternos = this.analise_NCM.Count(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqRBCIcmsSTCFNullaAmbos = this.analise_NCM.Count(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            
            ViewBag.AlqRBCIcmsSTCFSemReducao = this.analise_NCM.Count(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)  && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 70);





            /*Reedução Base de Calculo venda varejo contribuinte*/
            ViewBag.AlqRDBCICMSVendaVarContMarior = this.analise_NCM.Count(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT > a.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 20 &&  a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqRDBCICMSVendaVarContMenor = this.analise_NCM.Count(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT < a.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqRDBCICMSVendaVarContIguais = this.analise_NCM.Count(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT == a.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 20  && a.RED_BASE_CALC_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqRDBCICMSVendaVarContNulaInterno = this.analise_NCM.Count(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT != null && a.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE == 20  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqRDBCICMSVendaVarContNulaExterno = this.analise_NCM.Count(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT == null && a.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE != null && a.CST_VENDA_VAREJO_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqRDBCICMSVendaVarContNulaAmbos = this.analise_NCM.Count(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT == null && a.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
                        
            ViewBag.AlqRDBCICMSVendaVarContSemReducao = this.analise_NCM.Count(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT != null && a.CST_VENDA_VAREJO_CONT_BASE != 20 &&  a.CST_VENDA_VAREJO_CONT_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));




            /*Reedução Base de Calculo ST venda varejo contribuinte*/
            ViewBag.AlqRDBCICMSSTVendaVarContMarior      = this.analise_NCM.Count(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT > a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqRDBCICMSSTVendaVarContMenor       = this.analise_NCM.Count(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT < a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqRDBCICMSSTVendaVarContIgual       = this.analise_NCM.Count(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT == a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE && a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT != null && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqRDBCICMSSTVendaVarContNulaInterna = this.analise_NCM.Count(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT != null && a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqRDBCICMSSTVendaVarContNulaExterna = this.analise_NCM.Count(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT == null && a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE != null && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqRDBCICMSSTVendaVarContNulaAmbos   = this.analise_NCM.Count(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT == null && a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            ViewBag.AlqRDBCICMSSTVendaVarContSemReducao = this.analise_NCM.Count(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT != null && a.CST_VENDA_VAREJO_CONT_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));





            /*Red Base Calc  ICMS  venda ATA PARA CONTRIBUINTE*/
            ViewBag.RedBaseCalcICMSVataMaior = this.analise_NCM.Count(a => a.RED_BASE_CALC_ICMS_VENDA_ATA > a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSVataMenor = this.analise_NCM.Count(a => a.RED_BASE_CALC_ICMS_VENDA_ATA < a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSVataIgual = this.analise_NCM.Count(a => a.RED_BASE_CALC_ICMS_VENDA_ATA == a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 20 && a.RED_BASE_CALC_ICMS_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSVataNulaInterno = this.analise_NCM.Count(a => a.RED_BASE_CALC_ICMS_VENDA_ATA != null && a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSVataNulaExterno = this.analise_NCM.Count(a => a.RED_BASE_CALC_ICMS_VENDA_ATA == null && a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE != null && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSVataNulaAmbos = this.analise_NCM.Count(a => a.RED_BASE_CALC_ICMS_VENDA_ATA == null && a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            
            ViewBag.RedBaseCalcICMSVataSemReducao = this.analise_NCM.Count(a => a.RED_BASE_CALC_ICMS_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE != 20 && a.CST_VENDA_ATA_CONT_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));



            /*Red Base Calc  ICMS ST  venda ATA PARA CONTRIBUINTE*/
            ViewBag.RedBaseCalcICMSSTVataMaior = this.analise_NCM.Count(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA > a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSSTVataMenor = this.analise_NCM.Count(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA < a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSSTVataIgual = this.analise_NCM.Count(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA == a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 70 && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSSTVataNulaInterno = this.analise_NCM.Count(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA != null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSSTVataNulaExterno = this.analise_NCM.Count(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA == null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE != null && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSSTVataNulaAmbos = this.analise_NCM.Count(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA == null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            ViewBag.RedBaseCalcICMSSTVataSemReducao = this.analise_NCM.Count(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));



            /*Redução base de calc ICMS venda no atacado para Simples Nacional*/
            ViewBag.RedBaseCalcICMSVATASimpNacionalMaior       = this.analise_NCM.Count(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL > a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSVATASimpNacionalMenor       = this.analise_NCM.Count(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL < a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSVATASimpNacionalIgual       = this.analise_NCM.Count(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL == a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSVATASimpNacionalNulaInterno = this.analise_NCM.Count(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSVATASimpNacionalNulaExterno = this.analise_NCM.Count(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSVATASimpNacionalNulaAmbos   = this.analise_NCM.Count(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            
            ViewBag.RedBaseCalcICMSVATASimpNacionalSemReducao  = this.analise_NCM.Count(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL != null  && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 20 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));




            /*Redução base de calc ICMS ST venda no atacado para Simples Nacional*/
            ViewBag.RedBaseCalcICMSSTVATASimpNacionalMaior = this.analise_NCM.Count(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL > a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSSTVATASimpNacionalMenor = this.analise_NCM.Count(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL < a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSSTVATASimpNacionalIgual = this.analise_NCM.Count(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSSTVATASimpNacionalNulaInterno = this.analise_NCM.Count(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSSTVATASimpNacionalNulaExterno = this.analise_NCM.Count(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSSTVATASimpNacionalNulaAmbos = this.analise_NCM.Count(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            ViewBag.RedBaseCalcICMSSTVATASimpNacionalSemReducao = this.analise_NCM.Count(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));


            return View();
        }

      
        /*não precisa mecher se for simples nacional*/
        [HttpGet]
        public ActionResult AnaliseRedBaseCalSaiSN(string ufOrigem, string ufDestino) 
        {
            string usuarioSessao = ""; //variavel auxiliar

            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            else
            {
                usuarioSessao = Session["usuario"].ToString(); //pega o usuário da sessão

            }

            //Verifica se a variavel de sessão USUARIOS está nula, se estiver carrega as informações trazidas da sessão
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == usuarioSessao select a).FirstOrDefault(); //pega o usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else
            {
                //será usada para carregar a lista pelo cnpj
                this.empresa = (Empresa)Session["empresas"]; //se nao for nula basta carregar a empresa em outra variavel de sessão

            }

           

            //verifica tempDataSN
            VerificaTempDataSN();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;


            /*Aliq Redução da Base Calc ICMS venda CF*/
            ViewBag.AlqRBCIcmsCFMaior = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL > a.Red_Base_Calc_Icms_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqRBCIcmsCFMenor = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL < a.Red_Base_Calc_Icms_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqRBCIcmsCFIgual = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == a.Red_Base_Calc_Icms_Venda_Varejo_Cons_Final_INTERNO && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqRBCIcmsCFNullaInterno = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.Red_Base_Calc_Icms_Venda_Varejo_Cons_Final_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqRBCIcmsCFNullaExterno = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            /*Aliq Redução Base Calc ICMS ST venda CF*/
            ViewBag.AlqRBCIcmsSTCFMaior = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL > a.Red_Base_Calc_Icms_ST_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqRBCIcmsSTCFMenor = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL < a.Red_Base_Calc_Icms_ST_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqRBCIcmsSTCFIguais = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL == a.Red_Base_Calc_Icms_ST_Venda_Varejo_Cons_Final_INTERNO && a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqRBCIcmsSTCFNullaInternos = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.Red_Base_Calc_Icms_ST_Venda_Varejo_Cons_Final_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqRBCIcmsSTCFNullaExternos = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            /*Reedução Base de Calculo venda varejo contribuinte*/
            ViewBag.AlqRDBCICMSVendaVarContMarior = this.analiseSn.Count(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT > a.Red_Base_Calc_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqRDBCICMSVendaVarContMenor = this.analiseSn.Count(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT < a.Red_Base_Calc_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqRDBCICMSVendaVarContIguais = this.analiseSn.Count(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT == a.Red_Base_Calc_Venda_Varejo_Cont_INTERNO && a.RED_BASE_CALC_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqRDBCICMSVendaVarContNulaInterno = this.analiseSn.Count(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT != null && a.Red_Base_Calc_Venda_Varejo_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqRDBCICMSVendaVarContNulaExterno = this.analiseSn.Count(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            /*Reedução Base de Calculo ST venda varejo contribuinte*/
            ViewBag.AlqRDBCICMSSTVendaVarContMarior = this.analiseSn.Count(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT > a.Red_Base_Calc_ST_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqRDBCICMSSTVendaVarContMenor = this.analiseSn.Count(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT < a.Red_Base_Calc_ST_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqRDBCICMSSTVendaVarContIgual = this.analiseSn.Count(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT == a.Red_Base_Calc_ST_Venda_Varejo_Cont_INTERNO && a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqRDBCICMSSTVendaVarContNulaInterna = this.analiseSn.Count(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT != null && a.Red_Base_Calc_ST_Venda_Varejo_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqRDBCICMSSTVendaVarContNulaExterna = this.analiseSn.Count(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));


            /*Red Base Calc  ICMS  venda ATA PARA CONTRIBUINTE*/
            ViewBag.RedBaseCalcICMSVataMaior = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_VENDA_ATA > a.Red_Base_Calc_Icms_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSVataMenor = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_VENDA_ATA < a.Red_Base_Calc_Icms_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSVataIgual = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_VENDA_ATA == a.Red_Base_Calc_Icms_Venda_Ata_Cont_INTERNO && a.RED_BASE_CALC_ICMS_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSVataNulaInterno = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_VENDA_ATA != null && a.Red_Base_Calc_Icms_Venda_Ata_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSVataNulaExterno = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_VENDA_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            /*Red Base Calc  ICMS ST  venda ATA PARA CONTRIBUINTE*/
            ViewBag.RedBaseCalcICMSSTVataMaior = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA > a.Red_Base_Calc_Icms_ST_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSSTVataMenor = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA < a.Red_Base_Calc_Icms_ST_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSSTVataIgual = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA == a.Red_Base_Calc_Icms_ST_Venda_Ata_Cont_INTERNO && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSSTVataNulaInterno = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA != null && a.Red_Base_Calc_Icms_ST_Venda_Ata_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSSTVataNulaExterno = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            /*Redução base de calc ICMS venda no atacado para Simples Nacional*/
            ViewBag.RedBaseCalcICMSVATASimpNacionalMaior = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL > a.Red_Base_Calc_Icms_Venda_Ata_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSVATASimpNacionalMenor = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL < a.Red_Base_Calc_Icms_Venda_Ata_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSVATASimpNacionalIgual = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL == a.Red_Base_Calc_Icms_Venda_Ata_Simp_Nacional_INTERNO && a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSVATASimpNacionalNulaInterno = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.Red_Base_Calc_Icms_Venda_Ata_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSVATASimpNacionalNulaExterno = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            /*Redução base de calc ICMS ST venda no atacado para Simples Nacional*/
            ViewBag.RedBaseCalcICMSSTVATASimpNacionalMaior = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL > a.Red_Base_Calc_Icms_ST_Venda_Ata_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSSTVATASimpNacionalMenor = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL < a.Red_Base_Calc_Icms_ST_Venda_Ata_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSSTVATASimpNacionalIgual = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == a.Red_Base_Calc_Icms_ST_Venda_Ata_Simp_Nacional_INTERNO && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSSTVATASimpNacionalNulaInterno = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.Red_Base_Calc_Icms_ST_Venda_Ata_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSSTVATASimpNacionalNulaExterno = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));


            return View();

        }





        [HttpGet]
        public ActionResult AnaliseRedBaseCalEnt(string ufOrigem, string ufDestino)
        {

            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            string user = Session["usuario"].ToString(); //pega o usuario da sessão

            //verifica se a variavel usuarios está nula, caso esteja ele carrega as informações de usuario e empresa
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else
            {
                this.empresa = (Empresa)Session["empresas"]; //se nao for nula basta carregar a empresa
            }
            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();

            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["tributacao"] = "SIMPLES";
                TempData.Keep("tributacao");
            }
            else
            {
                TempData["tributacao"] = "OUTROS";
                TempData.Keep("tributacao");
            }


            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 
            ViewBag.Tributacao = TempData["tributacao"].ToString();

            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;


            VerificaTempData();

            /*Red bae calc ICMS Compra de Industria*/
            ViewBag.RedBaseCalcICMSCompINDMaior = this.analise.Count(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND > a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSCompINDMenor = this.analise.Count(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND < a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSCompINDIgual = this.analise.Count(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND == a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO && a.RED_BASE_CALC_ICMS_COMPRA_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSCompINDNulaInterno = this.analise.Count(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND != null && a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSCompINDNulaExterno = this.analise.Count(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));


            /*Red bae calc ICMS ST Compra de Industria*/
            ViewBag.RedBaseCalcICMSSTCompINDMaior = this.analise.Count(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND > a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSSTCompINDMenor = this.analise.Count(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND < a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSSTCompINDIgual = this.analise.Count(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND == a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO && a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSSTCompINDNulaInterno = this.analise.Count(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND != null && a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSSTCompINDNulaExterno = this.analise.Count(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            /*Red Base Calc ICMS Compra de Atacado*/
            ViewBag.RedBaseCalcICMSCompATAMaior = this.analise.Count(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA > a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSCompATAMenor = this.analise.Count(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA < a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSCompATAIgual = this.analise.Count(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA == a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO && a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSCompATANulaInterno = this.analise.Count(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA != null && a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSCompATANulaExterno = this.analise.Count(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));


            /*Red Base Calc ICMS ST Compra de Atacado*/
            ViewBag.RedBaseCalcICMSSTCompATAMaior = this.analise.Count(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA > a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSSTCompATAMenor = this.analise.Count(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA < a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSSTCompATAIgual = this.analise.Count(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA == a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO && a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSSTCompATANulaInterno = this.analise.Count(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA != null && a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSSTCompATANulaExterno = this.analise.Count(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            /*Red Base Calc ICMS Compra de Simples Nacional*/
            ViewBag.RedBaseCalcICMSCompSNMaior = this.analise.Count(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL > a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSCompSNMenor = this.analise.Count(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL < a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSCompSNIgual = this.analise.Count(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL == a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO && a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSCompSNNulaInterno = this.analise.Count(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL != null && a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSCompSNNulaExterno = this.analise.Count(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            /*Red Base Calc ICMS ST Compra de Simples Nacional*/
            ViewBag.RedBaseCalcICMSSTCompSNMaior = this.analise.Count(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL > a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSSTCompSNMenor = this.analise.Count(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL < a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSSTCompSNIgual = this.analise.Count(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSSTCompSNNulaInterno = this.analise.Count(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSSTCompSNNulaExterno = this.analise.Count(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            return View();

        }

        [HttpGet]
        public ActionResult AnaliseRedBaseCalEntSN(string ufOrigem, string ufDestino)
        {

            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            string user = Session["usuario"].ToString(); //pega o usuario da sessão

            //verifica se a variavel usuarios está nula, caso esteja ele carrega as informações de usuario e empresa
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else
            {
                this.empresa = (Empresa)Session["empresas"]; //se nao for nula basta carregar a empresa
            }

            //verifica tempDataSN
            VerificaTempDataSN();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;


            /*Red bae calc ICMS Compra de Industria*/
            ViewBag.RedBaseCalcICMSCompINDMaior = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND > a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSCompINDMenor = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND < a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSCompINDIgual = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND == a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO && a.RED_BASE_CALC_ICMS_COMPRA_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSCompINDNulaInterno = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND != null && a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSCompINDNulaExterno = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));


            /*Red bae calc ICMS ST Compra de Industria*/
            ViewBag.RedBaseCalcICMSSTCompINDMaior = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND > a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSSTCompINDMenor = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND < a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSSTCompINDIgual = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND == a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO && a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSSTCompINDNulaInterno = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND != null && a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSSTCompINDNulaExterno = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            /*Red Base Calc ICMS Compra de Atacado*/
            ViewBag.RedBaseCalcICMSCompATAMaior = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA > a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSCompATAMenor = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA < a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSCompATAIgual = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA == a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO && a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSCompATANulaInterno = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA != null && a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSCompATANulaExterno = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));


            /*Red Base Calc ICMS ST Compra de Atacado*/
            ViewBag.RedBaseCalcICMSSTCompATAMaior = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA > a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSSTCompATAMenor = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA < a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSSTCompATAIgual = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA == a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO && a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSSTCompATANulaInterno = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA != null && a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSSTCompATANulaExterno = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            /*Red Base Calc ICMS Compra de Simples Nacional*/
            ViewBag.RedBaseCalcICMSCompSNMaior = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL > a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSCompSNMenor = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL < a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSCompSNIgual = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL == a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO && a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSCompSNNulaInterno = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL != null && a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSCompSNNulaExterno = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            /*Red Base Calc ICMS ST Compra de Simples Nacional*/
            ViewBag.RedBaseCalcICMSSTCompSNMaior = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL > a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSSTCompSNMenor = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL < a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSSTCompSNIgual = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSSTCompSNNulaInterno = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.RedBaseCalcICMSSTCompSNNulaExterno = this.analiseSn.Count(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            return View();

        }


        [HttpGet]
        public ActionResult AnaliseIcmsEntrada(string ufOrigem, string ufDestino)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            string user = Session["usuario"].ToString(); //pega o usuario da sessão

            //verifica se a variavel usuarios está nula, caso esteja ele carrega as informações de usuario e empresa
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else
            {
                this.empresa = (Empresa)Session["empresas"]; //se nao for nula basta carregar a empresa
            }

                     

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 




            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;


            //se for simples nacional direciona para essa action
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["tributacao"] = "SIMPLES";
                TempData.Keep("tributacao");
            }
            else
            {
                TempData["tributacao"] = "OUTROS";
                TempData.Keep("tributacao");
            }

            ViewBag.Tributacao = TempData["tributacao"].ToString();

            VerificaTempData();


            /*Aliquota ICMS Compra de Industria*/
            ViewBag.AliqICMSCompINDMaior = this.analise.Count(a => a.ALIQ_ICMS_COMP_DE_IND > a.Aliq_Icms_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSCompINDMenor = this.analise.Count(a => a.ALIQ_ICMS_COMP_DE_IND < a.Aliq_Icms_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSCompINDIgual = this.analise.Count(a => a.ALIQ_ICMS_COMP_DE_IND == a.Aliq_Icms_Comp_de_Ind_INTERNO && a.ALIQ_ICMS_COMP_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSCompINDNulaExterno = this.analise.Count(a => a.ALIQ_ICMS_COMP_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSCompIndNulaInterno = this.analise.Count(a => a.ALIQ_ICMS_COMP_DE_IND != null && a.Aliq_Icms_Comp_de_Ind_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)); //onde não for nulo no cliente e nulo no mtx



            /*Aliquota ICMS ST Compra de Industria*/
            ViewBag.AliqICMSSTCompINDMaior = this.analise.Count(a => a.ALIQ_ICMS_ST_COMP_DE_IND > a.Aliq_Icms_ST_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSSTCompINDMenor = this.analise.Count(a => a.ALIQ_ICMS_ST_COMP_DE_IND < a.Aliq_Icms_ST_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSSTCompINDIgual = this.analise.Count(a => a.ALIQ_ICMS_ST_COMP_DE_IND == a.Aliq_Icms_ST_Comp_de_Ind_INTERNO && a.ALIQ_ICMS_ST_COMP_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSSTCompINDNulaExterno = this.analise.Count(a => a.ALIQ_ICMS_ST_COMP_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSSTCompIndNulaInterno = this.analise.Count(a => a.ALIQ_ICMS_ST_COMP_DE_IND != null && a.Aliq_Icms_ST_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));



            /*Aliquota ICMS Compra de Atacado*/
            ViewBag.AliqICMSCompATAMaior = this.analise.Count(a => a.ALIQ_ICMS_COMPRA_DE_ATA > a.Aliq_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSCompATAMenor = this.analise.Count(a => a.ALIQ_ICMS_COMPRA_DE_ATA < a.Aliq_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSCompATAIgual = this.analise.Count(a => a.ALIQ_ICMS_COMPRA_DE_ATA == a.Aliq_Icms_Compra_de_Ata_INTERNO && a.ALIQ_ICMS_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSCompATANulaInterno = this.analise.Count(a => a.ALIQ_ICMS_COMPRA_DE_ATA != null && a.Aliq_Icms_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSCompATANulaExterno = this.analise.Count(a => a.ALIQ_ICMS_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));


            /*Aliquota ICMS ST Compra de Atacado*/
            ViewBag.AliqICMSSTCompATAMaior = this.analise.Count(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA > a.Aliq_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSSTCompATAMenor = this.analise.Count(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA < a.Aliq_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSSTCompATAIgual = this.analise.Count(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA == a.Aliq_Icms_ST_Compra_de_Ata_INTERNO && a.ALIQ_ICMS_ST_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSSTCompATANulaInterno = this.analise.Count(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA != null && a.Aliq_Icms_ST_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSSTCompATANulaExterno = this.analise.Count(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            /*Aliquota ICMS Compra de Simples nacional*/
            ViewBag.AliqICMSCompSNMaior = this.analise.Count(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL > a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSCompSNMenor = this.analise.Count(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL < a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSCompSNIgual = this.analise.Count(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL == a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO && a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSCompSNNulaInterno = this.analise.Count(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL != null && a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSCompSNNulaExterno = this.analise.Count(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));


            /*Aliquota ICMS ST Compra de Simples nacional*/
            ViewBag.AliqICMSSTCompSNMaior = this.analise.Count(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL > a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSSTCompSNMenor = this.analise.Count(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL < a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSSTCompSNIgual = this.analise.Count(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO && a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSSTCompSNNulaInterno = this.analise.Count(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSSTCompSNNulaExterno = this.analise.Count(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));


            /*Aliquota ICMS NFE INDUSTRIA*/
            ViewBag.AliqICMSNFEIndMaior = this.analise.Count(a => a.ALIQ_ICMS_NFE > a.Aliq_Icms_NFE_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSNFEIndMenor = this.analise.Count(a => a.ALIQ_ICMS_NFE < a.Aliq_Icms_NFE_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSNFEIndIguais = this.analise.Count(a => a.ALIQ_ICMS_NFE == a.Aliq_Icms_NFE_INTERNO && a.ALIQ_ICMS_NFE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSNFEIndNulaInterno = this.analise.Count(a => a.ALIQ_ICMS_NFE != null && a.Aliq_Icms_NFE_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSNFEIndNulaExterno = this.analise.Count(a => a.ALIQ_ICMS_NFE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            /*Aliquota ICMS NFE SIMPLES NACIONAL*/
            ViewBag.AliqICMSNFESNMaior = this.analise.Count(a => a.ALIQ_ICMS_NFE_FOR_SN > a.Aliq_Icms_NFE_For_SN_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSNFESNMenor = this.analise.Count(a => a.ALIQ_ICMS_NFE_FOR_SN > a.Aliq_Icms_NFE_For_SN_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSNFESNIguais = this.analise.Count(a => a.ALIQ_ICMS_NFE_FOR_SN == a.Aliq_Icms_NFE_For_SN_INTERNO && a.ALIQ_ICMS_NFE_FOR_SN != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSNFESNNullaInterno = this.analise.Count(a => a.ALIQ_ICMS_NFE_FOR_SN != null && a.Aliq_Icms_NFE_For_SN_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSNFESNNullaExterno = this.analise.Count(a => a.ALIQ_ICMS_NFE_FOR_SN == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            /*Aliquota ICMS NFE ATACADO*/
            ViewBag.AliqICMSNFEAtaMaior = this.analise.Count(a => a.ALIQ_ICMS_NFE_FOR_ATA > a.Aliq_Icms_NFE_For_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSNFEAtaMenor = this.analise.Count(a => a.ALIQ_ICMS_NFE_FOR_ATA < a.Aliq_Icms_NFE_For_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSNFEAtaIgual = this.analise.Count(a => a.ALIQ_ICMS_NFE_FOR_ATA == a.Aliq_Icms_NFE_For_Ata_INTERNO && a.ALIQ_ICMS_NFE_FOR_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSNFEAtaNulaInterno = this.analise.Count(a => a.ALIQ_ICMS_NFE_FOR_ATA != null && a.Aliq_Icms_NFE_For_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSNFEAtaNulaExterno = this.analise.Count(a => a.ALIQ_ICMS_NFE_FOR_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));


            return View();

        }

        [HttpGet]
        public ActionResult AnaliseIcmsEntradaSN(string ufOrigem, string ufDestino)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            string user = Session["usuario"].ToString(); //pega o usuario da sessão

            //verifica se a variavel usuarios está nula, caso esteja ele carrega as informações de usuario e empresa
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else
            {
                this.empresa = (Empresa)Session["empresas"]; //se nao for nula basta carregar a empresa
            }


            VerificaTempDataSN();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;


            /*Aliquota ICMS Compra de Industria*/
            ViewBag.AliqICMSCompINDMaior = this.analiseSn.Count(a => a.ALIQ_ICMS_COMP_DE_IND > a.Aliq_Icms_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSCompINDMenor = this.analiseSn.Count(a => a.ALIQ_ICMS_COMP_DE_IND < a.Aliq_Icms_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSCompINDIgual = this.analiseSn.Count(a => a.ALIQ_ICMS_COMP_DE_IND == a.Aliq_Icms_Comp_de_Ind_INTERNO && a.ALIQ_ICMS_COMP_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSCompINDNulaExterno = this.analiseSn.Count(a => a.ALIQ_ICMS_COMP_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSCompIndNulaInterno = this.analiseSn.Count(a => a.ALIQ_ICMS_COMP_DE_IND != null && a.Aliq_Icms_Comp_de_Ind_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)); //onde não for nulo no cliente e nulo no mtx



            /*Aliquota ICMS ST Compra de Industria*/
            ViewBag.AliqICMSSTCompINDMaior = this.analiseSn.Count(a => a.ALIQ_ICMS_ST_COMP_DE_IND > a.Aliq_Icms_ST_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSSTCompINDMenor = this.analiseSn.Count(a => a.ALIQ_ICMS_ST_COMP_DE_IND < a.Aliq_Icms_ST_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSSTCompINDIgual = this.analiseSn.Count(a => a.ALIQ_ICMS_ST_COMP_DE_IND == a.Aliq_Icms_ST_Comp_de_Ind_INTERNO && a.ALIQ_ICMS_ST_COMP_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSSTCompINDNulaExterno = this.analiseSn.Count(a => a.ALIQ_ICMS_ST_COMP_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSSTCompIndNulaInterno = this.analiseSn.Count(a => a.ALIQ_ICMS_ST_COMP_DE_IND != null && a.Aliq_Icms_ST_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));



            /*Aliquota ICMS Compra de Atacado*/
            ViewBag.AliqICMSCompATAMaior = this.analiseSn.Count(a => a.ALIQ_ICMS_COMPRA_DE_ATA > a.Aliq_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSCompATAMenor = this.analiseSn.Count(a => a.ALIQ_ICMS_COMPRA_DE_ATA < a.Aliq_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSCompATAIgual = this.analiseSn.Count(a => a.ALIQ_ICMS_COMPRA_DE_ATA == a.Aliq_Icms_Compra_de_Ata_INTERNO && a.ALIQ_ICMS_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSCompATANulaInterno = this.analiseSn.Count(a => a.ALIQ_ICMS_COMPRA_DE_ATA != null && a.Aliq_Icms_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSCompATANulaExterno = this.analiseSn.Count(a => a.ALIQ_ICMS_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));


            /*Aliquota ICMS ST Compra de Atacado*/
            ViewBag.AliqICMSSTCompATAMaior = this.analiseSn.Count(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA > a.Aliq_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSSTCompATAMenor = this.analiseSn.Count(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA < a.Aliq_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSSTCompATAIgual = this.analiseSn.Count(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA == a.Aliq_Icms_ST_Compra_de_Ata_INTERNO && a.ALIQ_ICMS_ST_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSSTCompATANulaInterno = this.analiseSn.Count(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA != null && a.Aliq_Icms_ST_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSSTCompATANulaExterno = this.analiseSn.Count(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            /*Aliquota ICMS Compra de Simples nacional*/
            ViewBag.AliqICMSCompSNMaior = this.analiseSn.Count(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL > a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSCompSNMenor = this.analiseSn.Count(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL < a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSCompSNIgual = this.analiseSn.Count(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL == a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO && a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSCompSNNulaInterno = this.analiseSn.Count(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL != null && a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSCompSNNulaExterno = this.analiseSn.Count(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));


            /*Aliquota ICMS ST Compra de Simples nacional*/
            ViewBag.AliqICMSSTCompSNMaior = this.analiseSn.Count(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL > a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSSTCompSNMenor = this.analiseSn.Count(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL < a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSSTCompSNIgual = this.analiseSn.Count(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO && a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSSTCompSNNulaInterno = this.analiseSn.Count(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSSTCompSNNulaExterno = this.analiseSn.Count(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));


            /*Aliquota ICMS NFE INDUSTRIA*/
            ViewBag.AliqICMSNFEIndMaior = this.analiseSn.Count(a => a.ALIQ_ICMS_NFE > a.Aliq_Icms_NFE_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSNFEIndMenor = this.analiseSn.Count(a => a.ALIQ_ICMS_NFE < a.Aliq_Icms_NFE_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSNFEIndIguais = this.analiseSn.Count(a => a.ALIQ_ICMS_NFE == a.Aliq_Icms_NFE_INTERNO && a.ALIQ_ICMS_NFE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSNFEIndNulaInterno = this.analiseSn.Count(a => a.ALIQ_ICMS_NFE != null && a.Aliq_Icms_NFE_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSNFEIndNulaExterno = this.analiseSn.Count(a => a.ALIQ_ICMS_NFE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            /*Aliquota ICMS NFE SIMPLES NACIONAL*/
            ViewBag.AliqICMSNFESNMaior = this.analiseSn.Count(a => a.ALIQ_ICMS_NFE_FOR_SN > a.Aliq_Icms_NFE_For_SN_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSNFESNMenor = this.analiseSn.Count(a => a.ALIQ_ICMS_NFE_FOR_SN > a.Aliq_Icms_NFE_For_SN_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSNFESNIguais = this.analiseSn.Count(a => a.ALIQ_ICMS_NFE_FOR_SN == a.Aliq_Icms_NFE_For_SN_INTERNO && a.ALIQ_ICMS_NFE_FOR_SN != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSNFESNNullaInterno = this.analiseSn.Count(a => a.ALIQ_ICMS_NFE_FOR_SN != null && a.Aliq_Icms_NFE_For_SN_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSNFESNNullaExterno = this.analiseSn.Count(a => a.ALIQ_ICMS_NFE_FOR_SN == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            /*Aliquota ICMS NFE ATACADO*/
            ViewBag.AliqICMSNFEAtaMaior = this.analiseSn.Count(a => a.ALIQ_ICMS_NFE_FOR_ATA > a.Aliq_Icms_NFE_For_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSNFEAtaMenor = this.analiseSn.Count(a => a.ALIQ_ICMS_NFE_FOR_ATA < a.Aliq_Icms_NFE_For_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSNFEAtaIgual = this.analiseSn.Count(a => a.ALIQ_ICMS_NFE_FOR_ATA == a.Aliq_Icms_NFE_For_Ata_INTERNO && a.ALIQ_ICMS_NFE_FOR_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSNFEAtaNulaInterno = this.analiseSn.Count(a => a.ALIQ_ICMS_NFE_FOR_ATA != null && a.Aliq_Icms_NFE_For_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqICMSNFEAtaNulaExterno = this.analiseSn.Count(a => a.ALIQ_ICMS_NFE_FOR_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));


            return View();

        }

        


        [HttpGet]
        public ActionResult AnalisePisCofins(string ufOrigem, string ufDestino)
        {

            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            string user = Session["usuario"].ToString(); //pega o usuario da sessão

            //verifica se a variavel usuarios está nula, caso esteja ele carrega as informações de usuario e empresa
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else
            {
                this.empresa = (Empresa)Session["empresas"]; //se nao for nula basta carregar a empresa
            }


            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();

            //se for simples nacional direciona para essa action
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["tributacao"] = "SIMPLES";
                TempData.Keep("tributacao");
            }
            else
            {
                TempData["tributacao"] = "OUTROS";
                TempData.Keep("tributacao");
            }



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 

            ViewBag.Tributacao = TempData["tributacao"].ToString();

            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;


            VerificaTempData();

            //pega a verificação pelo ncm
            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao

            ViewBag.TotalRegistros = this.analise_NCM.Count(a => a.TE_ID > 0 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));


            /*Pis*/
            /*Aliquota EntradaPIS*/
            //ViewBag.AlqEPMaior = this.analise_NCM.Count(a => a.ALIQ_ENTRADA_PIS > a.ALIQ_ENT_PIS_BASE && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqEPMenor = this.analise_NCM.Count(a => a.ALIQ_ENTRADA_PIS < a.ALIQ_ENT_PIS_BASE && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqEPIgual = this.analise_NCM.Count(a => a.ALIQ_ENTRADA_PIS == a.ALIQ_ENT_PIS_BASE && a.ALIQ_ENTRADA_PIS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqEPNulaInterno = this.analise_NCM.Count(a => a.ALIQ_ENTRADA_PIS != null && a.ALIQ_ENT_PIS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqEPNulaCliente = this.analise_NCM.Count(a => a.ALIQ_ENTRADA_PIS == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            /*Aiquota Saida PIS*/
            ViewBag.AlqSPMaior = this.analise_NCM.Count(a => a.ALIQ_SAIDA_PIS > a.ALIQ_SAIDA_PIS_BASE && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqSPMenor = this.analise_NCM.Count(a => a.ALIQ_SAIDA_PIS < a.ALIQ_SAIDA_PIS_BASE && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqSPIguais = this.analise_NCM.Count(a => a.ALIQ_SAIDA_PIS == a.ALIQ_SAIDA_PIS_BASE && a.ALIQ_SAIDA_PIS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqSPNulaInterno = this.analise_NCM.Count(a => a.ALIQ_SAIDA_PIS != null && a.ALIQ_SAIDA_PIS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqSPNulaCliente = this.analise_NCM.Count(a => a.ALIQ_SAIDA_PIS == null && a.ALIQ_SAIDA_PIS_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AliqSPNulaAmbos = this.analise_NCM.Count(a => a.ALIQ_SAIDA_PIS == null  && a.ALIQ_SAIDA_PIS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            /*Cofins*/
            /*AlqEntradaCofins*/
            //ViewBag.AlqEntradaCofinsMaior = this.analise_NCM.Count(a => a.ALIQ_ENTRADA_COFINS > a.ALIQ_ENT_COFINS_BASE && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqEntradaCofinsMenor = this.analise_NCM.Count(a => a.ALIQ_ENTRADA_COFINS < a.ALIQ_ENT_COFINS_BASE && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AlqEntradaCofinsIguais = this.analise_NCM.Count(a => a.ALIQ_ENTRADA_COFINS == a.ALIQ_ENT_COFINS_BASE && a.ALIQ_ENTRADA_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AliqEntradaCofinsNullasInternas = this.analise_NCM.Count(a => a.ALIQ_ENTRADA_COFINS != null && a.ALIQ_ENT_COFINS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.AliqEntradaCofinsNullasExternas = this.analise_NCM.Count(a => a.ALIQ_ENTRADA_COFINS == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            /*Aliquota saida cofins*/
            ViewBag.AlqSaidaCofinsMaior = this.analise_NCM.Count(a => a.ALIQ_SAIDA_COFINS > a.ALIQ_SAIDA_COFINS_BASE && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqSaidaCofinsMenor = this.analise_NCM.Count(a => a.ALIQ_SAIDA_COFINS < a.ALIQ_SAIDA_COFINS_BASE && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqSaidaCofinsIguais = this.analise_NCM.Count(a => a.ALIQ_SAIDA_COFINS == a.ALIQ_SAIDA_COFINS_BASE && a.ALIQ_SAIDA_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqSCNullaInterna = this.analise_NCM.Count(a => a.ALIQ_SAIDA_COFINS != null && a.ALIQ_SAIDA_COFINS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqSCNullaCliente = this.analise_NCM.Count(a => a.ALIQ_SAIDA_COFINS == null && a.ALIQ_SAIDA_COFINS_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.AlqSCNullaAmbos =   this.analise_NCM.Count(a => a.ALIQ_SAIDA_COFINS == null && a.ALIQ_SAIDA_COFINS_BASE == null  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
           
            return View();
        }


        /*CST: Código de Situação Tributária*/
        [HttpGet]
        public ActionResult AnaliseCST(string ufOrigem, string ufDestino)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            string user = Session["usuario"].ToString(); //pega o usuario da sessão

            //verifica se a variavel usuarios está nula, caso esteja ele carrega as informações de usuario e empresa
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else
            {
                this.empresa = (Empresa)Session["empresas"]; //se nao for nula basta carregar a empresa
            }

            //se for simples nacional direciona para essa action
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["tributacao"] = "SIMPLES";
                TempData.Keep("tributacao");
            }
            else
            {
                TempData["tributacao"] = "OUTROS";
                TempData.Keep("tributacao");
            }

            

            ViewBag.Tributacao = TempData["tributacao"].ToString();


            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();


            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;



            //se for simples nacional direciona para essa action
            if (this.empresa.simples_nacional.Equals(1))
            {
                //TempData["UfOrigem"] = null;
                //TempData["UfDestino"] = null;

                //TempData.Keep("UfDestino");
                //TempData.Keep("UfOrigem");
                return RedirectToAction("AnaliseCSTSN");

               

            }
            
              
                //VerificaTempData();
            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao


            ViewBag.TotalRegistros = this.analise_NCM.Count(a => a.TE_ID > 0 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            //origem e destino




            /*Entrada PIS Cofins (ACERTADO ALTERAÇÃO: TIRAR OS NULOS DA CONTA)
                             Dessa forma ele compara os dois registros, se em um deles o valor
                            for nulo ele retira da contagem, assim somente os registros realmente
                            diferentes são analisados e a contagem de nulos no cliente e nulos na
                            matriz ficará correta
                            A comparação de igualdade acontece o mesmo, ele deve tirar os registros
                            que forem nulos tanto no cliente quanto no mtx
                             */
                //ViewBag.CstEntradaPisCofinsNulaCliente = this.analise_NCM.Count(a => a.CST_ENTRADA_PIS_COFINS == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)); //nula so no cliente
                //ViewBag.CstEntradaPisCofinsNulaMtx = this.analise_NCM.Count(a => a.Cst_Entrada_PisCofins_INTERNO == null && a.CST_ENTRADA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)); //nula so no mtx
                //ViewBag.CstEntradaPisCofinsIgual = this.analise_NCM.Count(a => a.CST_ENTRADA_PIS_COFINS == a.Cst_Entrada_PisCofins_INTERNO && a.CST_ENTRADA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
                //ViewBag.CstEntradaPisCofinsDife = this.analise_NCM.Count(a => a.CST_ENTRADA_PIS_COFINS != a.Cst_Entrada_PisCofins_INTERNO && a.CST_ENTRADA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

               




            /*Saída PIS Cofins*/
            ViewBag.CstSaidaPisCofinsNulaCliente = this.analise_NCM.Count(a => a.CST_SAIDA_PIS_COFINS == null && a.CST_SAIDA_PISCOFINS_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.CstSaidaPisCofinsNulaAmbos   = this.analise_NCM.Count(a => a.CST_SAIDA_PIS_COFINS == null && a.CST_SAIDA_PISCOFINS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.CstSaidaPisCofinsNulaMtx = this.analise_NCM.Count(a => a.CST_SAIDA_PISCOFINS_BASE == null && a.CST_SAIDA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.CstSaidaPisCofinsIgual = this.analise_NCM.Count(a => a.CST_SAIDA_PIS_COFINS == a.CST_SAIDA_PISCOFINS_BASE && a.CST_SAIDA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.CstSaidaPisCofinsDife = this.analise_NCM.Count(a => a.CST_SAIDA_PIS_COFINS != a.CST_SAIDA_PISCOFINS_BASE && a.CST_SAIDA_PIS_COFINS != null && a.CST_SAIDA_PISCOFINS_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));







            /*CST Venda Varejo Consumidor Final*/
            //ViewBag.CstVendaVarejoCFNulaCliente = this.analise_NCM.Count(a => a.CST_VENDA_VAREJO_CONS_FINAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.CstVendaVarejoCFNulaMtx = this.analise_NCM.Count(a => a.Cst_Venda_Varejo_Cons_Final_INTERNO == null && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.CstVendaVarejoCFIgual = this.analise_NCM.Count(a => a.CST_VENDA_VAREJO_CONS_FINAL == a.Cst_Venda_Varejo_Cons_Final_INTERNO && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.CstVendaVarejoCFDif = this.analise_NCM.Count(a => a.CST_VENDA_VAREJO_CONS_FINAL != a.Cst_Venda_Varejo_Cons_Final_INTERNO && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            ViewBag.CstVendaVarejoCFNulaCliente = this.analise_NCM.Count(a => a.CST_VENDA_VAREJO_CONS_FINAL == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.CstVendaVarejoCFNulaAmbos =   this.analise_NCM.Count(a => a.CST_VENDA_VAREJO_CONS_FINAL == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.CstVendaVarejoCFNulaMtx =     this.analise_NCM.Count(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.CstVendaVarejoCFIgual =       this.analise_NCM.Count(a => a.CST_VENDA_VAREJO_CONS_FINAL == a.CST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.CstVendaVarejoCFDif =         this.analise_NCM.Count(a => a.CST_VENDA_VAREJO_CONS_FINAL != a.CST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));



            /*CST Venda Varejo Contribuinte*/
            //ViewBag.CstVendaVarejoContNulaCliente = this.analise_NCM.Count(a => a.CST_VENDA_VAREJO_CONT == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.CstVendaVarejoContNulaMtx = this.analise_NCM.Count(a => a.Cst_Venda_Varejo_Cont_INTERNO == null && a.CST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.CstVendaVarejoContIgual = this.analise_NCM.Count(a => a.CST_VENDA_VAREJO_CONT == a.Cst_Venda_Varejo_Cont_INTERNO && a.CST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.CstVendaVarejoContDif = this.analise_NCM.Count(a => a.CST_VENDA_VAREJO_CONT != a.Cst_Venda_Varejo_Cont_INTERNO && a.CST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));


            ViewBag.CstVendaVarejoContNulaCliente = this.analise_NCM.Count(a => a.CST_VENDA_VAREJO_CONT == null && a.CST_VENDA_VAREJO_CONT_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.CSTVendaVarejoContNulaAmbos = this.analise_NCM.Count(a => a.CST_VENDA_VAREJO_CONT == null && a.CST_VENDA_VAREJO_CONT_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.CstVendaVarejoContNulaMtx = this.analise_NCM.Count(a => a.CST_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.CstVendaVarejoContIgual = this.analise_NCM.Count(a => a.CST_VENDA_VAREJO_CONT == a.CST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.CstVendaVarejoContDif = this.analise_NCM.Count(a => a.CST_VENDA_VAREJO_CONT != a.CST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT != null && a.CST_VENDA_VAREJO_CONT_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));




            /*CST Venda Atacado Simples Nacional*/
            //ViewBag.CstVendaAtaSNNulaCliente = this.analise_NCM.Count(a => a.CST_VENDA_ATA_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //    ViewBag.CstVendaAtaSNNulaMtx = this.analise_NCM.Count(a => a.Cst_Venda_Ata_Simp_Nacional_INTERNO == null && a.CST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //    ViewBag.CstVendaAtaSNIgual = this.analise_NCM.Count(a => a.CST_VENDA_ATA_SIMP_NACIONAL == a.Cst_Venda_Ata_Simp_Nacional_INTERNO && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //    ViewBag.CstVendaAtaSNDif = this.analise_NCM.Count(a => a.CST_VENDA_ATA_SIMP_NACIONAL != a.Cst_Venda_Ata_Simp_Nacional_INTERNO && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));


            ViewBag.CstVendaAtaSNNulaCliente = this.analise_NCM.Count(a => a.CST_VENDA_ATA_SIMP_NACIONAL == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.CstVendaAtaSNNulaAmbos = this.analise_NCM.Count(a => a.CST_VENDA_ATA_SIMP_NACIONAL == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.CstVendaAtaSNNulaMtx = this.analise_NCM.Count(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.CstVendaAtaSNIgual = this.analise_NCM.Count(a => a.CST_VENDA_ATA_SIMP_NACIONAL == a.CST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.CstVendaAtaSNDif = this.analise_NCM.Count(a => a.CST_VENDA_ATA_SIMP_NACIONAL != a.CST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));


            /*CST Venda Atacado Contribuinte*/
            //ViewBag.CstVendaAtaContNulaCliente = this.analise_NCM.Count(a => a.CST_VENDA_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //    ViewBag.CstVendaAtaContNulaMtx = this.analise_NCM.Count(a => a.Cst_Venda_Ata_Cont_INTERNO == null && a.CST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //    ViewBag.CstVendaAtaContIgual = this.analise_NCM.Count(a => a.CST_VENDA_ATA == a.Cst_Venda_Ata_Cont_INTERNO && a.CST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //    ViewBag.CstVendaAtaContDif = this.analise_NCM.Count(a => a.CST_VENDA_ATA != a.Cst_Venda_Ata_Cont_INTERNO && a.CST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            ViewBag.CstVendaAtaContNulaCliente = this.analise_NCM.Count(a => a.CST_VENDA_ATA == null && a.CST_VENDA_ATA_CONT_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.CstVendaAtaContNulaAmbos = this.analise_NCM.Count(a => a.CST_VENDA_ATA == null && a.CST_VENDA_ATA_CONT_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.CstVendaAtaContNulaMtx = this.analise_NCM.Count(a => a.CST_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.CstVendaAtaContIgual = this.analise_NCM.Count(a => a.CST_VENDA_ATA == a.CST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.CstVendaAtaContDif = this.analise_NCM.Count(a => a.CST_VENDA_ATA != a.CST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));



            return View();

            

            
        }


        public ActionResult AnaliseCSTSN(string ufOrigem, string ufDestino)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            string user = Session["usuario"].ToString(); //pega o usuario da sessão

            //verifica se a variavel usuarios está nula, caso esteja ele carrega as informações de usuario e empresa
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else
            {
                this.empresa = (Empresa)Session["empresas"]; //se nao for nula basta carregar a empresa
            }

      
            //se for simples nacional direciona para essa action
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["tributacao"] = "SIMPLES";
                TempData.Keep("tributacao");
            }
            else
            {
                TempData["tributacao"] = "OUTROS";
                TempData.Keep("tributacao");
            }

            ViewBag.Tributacao = TempData["tributacao"].ToString();

            //VerificaTempDataSN();

            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();

           

            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            /*Entrada PIS Cofins (ACERTADO ALTERAÇÃO: TIRAR OS NULOS DA CONTA)
             Dessa forma ele compara os dois registros, se em um deles o valor
            for nulo ele retira da contagem, assim somente os registros realmente
            diferentes são analisados e a contagem de nulos no cliente e nulos na
            matriz ficará correta
            A comparação de igualdade acontece o mesmo, ele deve tirar os registros
            que forem nulos tanto no cliente quanto no mtx
             */
            //ViewBag.CstEntradaPisCofinsNulaCliente = this.analiseSn.Count(a => a.CST_ENTRADA_PIS_COFINS == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)); //nula so no cliente
            //ViewBag.CstEntradaPisCofinsNulaMtx = this.analiseSn.Count(a => a.Cst_Entrada_PisCofins_INTERNO == null && a.CST_ENTRADA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)); //nula so no mtx
            //ViewBag.CstEntradaPisCofinsIgual = this.analiseSn.Count(a => a.CST_ENTRADA_PIS_COFINS == a.Cst_Entrada_PisCofins_INTERNO && a.CST_ENTRADA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.CstEntradaPisCofinsDife = this.analiseSn.Count(a => a.CST_ENTRADA_PIS_COFINS != a.Cst_Entrada_PisCofins_INTERNO && a.CST_ENTRADA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            //  this.analiseSn = this.analiseSn.Where(a => a.ATIVO == 1).ToList();

            ViewBag.TotalRegistros = this.analise_NCM.Count(a=>a.TE_ID > 0 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            /*Saída PIS Cofins*/

            /*Analisado por NCM*/
            ViewBag.CstSaidaPisCofinsNulaCliente = this.analise_NCM.Count(a => a.CST_SAIDA_PIS_COFINS == null && a.CST_SAIDA_PISCOFINS_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.CstSaidaPisCofinsNulaAmbos = this.analise_NCM.Count(a => a.CST_SAIDA_PIS_COFINS == null && a.CST_SAIDA_PISCOFINS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.CstSaidaPisCofinsNulaMtx = this.analise_NCM.Count(a => a.CST_SAIDA_PISCOFINS_BASE == null && a.CST_SAIDA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.CstSaidaPisCofinsIgual = this.analise_NCM.Count(a => a.CST_SAIDA_PIS_COFINS == a.CST_SAIDA_PISCOFINS_BASE && a.CST_SAIDA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.CstSaidaPisCofinsDife = this.analise_NCM.Count(a => a.CST_SAIDA_PIS_COFINS != a.CST_SAIDA_PISCOFINS_BASE && a.CST_SAIDA_PIS_COFINS != null && a.CST_SAIDA_PISCOFINS_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));




            //ViewBag.CstSaidaPisCofinsNulaClienteB = this.analiseSn.Count(a => a.CST_SAIDA_PIS_COFINS == null && a.Cst_Saida_PisCofins_INTERNO != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.CstSaidaPisCofinsNulaAmbosB = this.analiseSn.Count(a => a.CST_SAIDA_PIS_COFINS == null && a.Cst_Saida_PisCofins_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.CstSaidaPisCofinsNulaMtxB = this.analiseSn.Count(a => a.Cst_Saida_PisCofins_INTERNO == null && a.CST_SAIDA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.CstSaidaPisCofinsIgualB = this.analiseSn.Count(a => a.CST_SAIDA_PIS_COFINS == a.Cst_Saida_PisCofins_INTERNO && a.CST_SAIDA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.CstSaidaPisCofinsDifeB = this.analiseSn.Count(a => a.CST_SAIDA_PIS_COFINS != a.Cst_Saida_PisCofins_INTERNO && a.CST_SAIDA_PIS_COFINS != null && a.Cst_Saida_PisCofins_INTERNO != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));



            /*CST Venda Varejo Consumidor Final*/
            //analisado por ncm
            ViewBag.CstVendaVarejoCFNulaCliente = this.analise_NCM.Count(a => a.CST_VENDA_VAREJO_CONS_FINAL == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.CstVendaVarejoCFNulaAmbos = this.analise_NCM.Count(a => a.CST_VENDA_VAREJO_CONS_FINAL == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.CstVendaVarejoCFNulaMtx = this.analise_NCM.Count(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.CstVendaVarejoCFIgual = this.analise_NCM.Count(a => a.CST_VENDA_VAREJO_CONS_FINAL == a.CST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.CstVendaVarejoCFDif = this.analise_NCM.Count(a => a.CST_VENDA_VAREJO_CONS_FINAL != a.CST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != null &&  a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

           //ViewBag.TotalVendaVarejoConsFinal = (int)ViewBag.CstVendaVarejoCFNulaCliente + (int)ViewBag.CstVendaVarejoCFNulaAmbos + (int)ViewBag.CstVendaVarejoCFNulaMtx + (int)ViewBag.CstVendaVarejoCFIgual + (int)ViewBag.CstVendaVarejoCFDif;


            //ViewBag.CstVendaVarejoCFNulaClienteB = this.analiseSn.Count(a => a.CST_VENDA_VAREJO_CONS_FINAL == null && a.Cst_Venda_Varejo_Cons_Final_INTERNO != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.CstVendaVarejoCFNulaAmbosB = this.analiseSn.Count(a => a.CST_VENDA_VAREJO_CONS_FINAL == null && a.Cst_Venda_Varejo_Cons_Final_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.CstVendaVarejoCFNulaMtxB = this.analiseSn.Count(a => a.Cst_Venda_Varejo_Cons_Final_INTERNO == null && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.CstVendaVarejoCFIgualB = this.analiseSn.Count(a => a.CST_VENDA_VAREJO_CONS_FINAL == a.Cst_Venda_Varejo_Cons_Final_INTERNO && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.CstVendaVarejoCFDifB = this.analiseSn.Count(a => a.CST_VENDA_VAREJO_CONS_FINAL != a.Cst_Venda_Varejo_Cons_Final_INTERNO && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.Cst_Venda_Varejo_Cons_Final_INTERNO != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

             ViewBag.TotalVendaVarejoConsFinal = (int)ViewBag.CstVendaVarejoCFNulaCliente + (int)ViewBag.CstVendaVarejoCFNulaAmbos + (int)ViewBag.CstVendaVarejoCFNulaMtx + (int)ViewBag.CstVendaVarejoCFIgual + (int)ViewBag.CstVendaVarejoCFDif;




            /*CST Venda Varejo Contribuinte*/
            //Analisado por ncm
            ViewBag.CstVendaVarejoContNulaCliente = this.analise_NCM.Count(a => a.CST_VENDA_VAREJO_CONT == null && a.CST_VENDA_VAREJO_CONT_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.CSTVendaVarejoContNulaAmbos = this.analise_NCM.Count(a => a.CST_VENDA_VAREJO_CONT == null && a.CST_VENDA_VAREJO_CONT_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.CstVendaVarejoContNulaMtx = this.analise_NCM.Count(a => a.CST_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.CstVendaVarejoContIgual = this.analise_NCM.Count(a => a.CST_VENDA_VAREJO_CONT == a.CST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.CstVendaVarejoContDif = this.analise_NCM.Count(a => a.CST_VENDA_VAREJO_CONT != a.CST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT != null && a.CST_VENDA_VAREJO_CONT_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            //ViewBag.CstVendaVarejoContNulaClienteB = this.analiseSn.Count(a => a.CST_VENDA_VAREJO_CONT == null && a.Cst_Venda_Varejo_Cont_INTERNO != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.CSTVendaVarejoContNulaAmbosB = this.analiseSn.Count(a => a.CST_VENDA_VAREJO_CONT == null && a.Cst_Venda_Varejo_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.CstVendaVarejoContNulaMtxB = this.analiseSn.Count(a => a.Cst_Venda_Varejo_Cont_INTERNO == null && a.CST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.CstVendaVarejoContIgualB = this.analiseSn.Count(a => a.CST_VENDA_VAREJO_CONT == a.Cst_Venda_Varejo_Cont_INTERNO && a.CST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.CstVendaVarejoContDifB = this.analiseSn.Count(a => a.CST_VENDA_VAREJO_CONT != a.Cst_Venda_Varejo_Cont_INTERNO && a.CST_VENDA_VAREJO_CONT != null && a.Cst_Venda_Varejo_Cont_INTERNO != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));




            /*CST Venda Atacado Contribuinte*/
            //Analisado por ncm

            ViewBag.CstVendaAtaContNulaCliente = this.analise_NCM.Count(a => a.CST_VENDA_ATA == null && a.CST_VENDA_ATA_CONT_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.CstVendaAtaContNulaAmbos   = this.analise_NCM.Count(a => a.CST_VENDA_ATA == null && a.CST_VENDA_ATA_CONT_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.CstVendaAtaContNulaMtx     = this.analise_NCM.Count(a => a.CST_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.CstVendaAtaContIgual       = this.analise_NCM.Count(a => a.CST_VENDA_ATA == a.CST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.CstVendaAtaContDif         = this.analise_NCM.Count(a => a.CST_VENDA_ATA != a.CST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));




            //ViewBag.CstVendaAtaContNulaClienteB = this.analiseSn.Count(a => a.CST_VENDA_ATA == null && a.Cst_Venda_Ata_Cont_INTERNO !=null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.CstVendaAtaContNulaAmbosB   = this.analiseSn.Count(a => a.CST_VENDA_ATA == null && a.Cst_Venda_Ata_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.CstVendaAtaContNulaMtxB     = this.analiseSn.Count(a => a.Cst_Venda_Ata_Cont_INTERNO == null && a.CST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.CstVendaAtaContIgualB       = this.analiseSn.Count(a => a.CST_VENDA_ATA == a.Cst_Venda_Ata_Cont_INTERNO && a.CST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.CstVendaAtaContDifB         = this.analiseSn.Count(a => a.CST_VENDA_ATA != a.Cst_Venda_Ata_Cont_INTERNO && a.CST_VENDA_ATA != null && a.Cst_Venda_Ata_Cont_INTERNO != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));


            /*CST Venda Atacado Simples Nacional*/
            //Analisdo por NCM
            ViewBag.CstVendaAtaSNNulaCliente = this.analise_NCM.Count(a => a.CST_VENDA_ATA_SIMP_NACIONAL == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE !=null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.CstVendaAtaSNNulaAmbos   = this.analise_NCM.Count(a => a.CST_VENDA_ATA_SIMP_NACIONAL == null  && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.CstVendaAtaSNNulaMtx     = this.analise_NCM.Count(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.CstVendaAtaSNIgual       = this.analise_NCM.Count(a => a.CST_VENDA_ATA_SIMP_NACIONAL == a.CST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            ViewBag.CstVendaAtaSNDif         = this.analise_NCM.Count(a => a.CST_VENDA_ATA_SIMP_NACIONAL != a.CST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));


            //ViewBag.CstVendaAtaSNNulaClienteB = this.analiseSn.Count(a => a.CST_VENDA_ATA_SIMP_NACIONAL == null && a.Cst_Venda_Ata_Simp_Nacional_INTERNO != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.CstVendaAtaSNNulaAmbosB = this.analiseSn.Count(a => a.CST_VENDA_ATA_SIMP_NACIONAL == null && a.Cst_Venda_Ata_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.CstVendaAtaSNNulaMtxB = this.analiseSn.Count(a => a.Cst_Venda_Ata_Simp_Nacional_INTERNO == null && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.CstVendaAtaSNIgualB = this.analiseSn.Count(a => a.CST_VENDA_ATA_SIMP_NACIONAL == a.Cst_Venda_Ata_Simp_Nacional_INTERNO && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            //ViewBag.CstVendaAtaSNDifB = this.analiseSn.Count(a => a.CST_VENDA_ATA_SIMP_NACIONAL != a.Cst_Venda_Ata_Simp_Nacional_INTERNO && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.Cst_Venda_Ata_Simp_Nacional_INTERNO != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));



            return View();
        }

        [HttpGet]
        public ActionResult AnaliseCSTEnt(string ufOrigem, string ufDestino)
        {
            string user = "";
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            else
            {
                 user = Session["usuario"].ToString(); //pega o usuario da sessão
            }
           

            //verifica se a variavel usuarios está nula, caso esteja ele carrega as informações de usuario e empresa
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else
            {
                this.empresa = (Empresa)Session["empresas"]; //se nao for nula basta carregar a empresa
            }

           
            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();

            //se for simples nacional direciona para essa action
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["tributacao"] = "SIMPLES";
                TempData.Keep("tributacao");
            }
            else
            {
                TempData["tributacao"] = "OUTROS";
                TempData.Keep("tributacao");
            }



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 
            ViewBag.Tributacao = TempData["tributacao"].ToString();


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            /*Entrada PIS Cofins (ACERTADO ALTERAÇÃO: TIRAR OS NULOS DA CONTA)
             Dessa forma ele compara os dois registros, se em um deles o valor
            for nulo ele retira da contagem, assim somente os registros realmente
            diferentes são analisados e a contagem de nulos no cliente e nulos na
            matriz ficará correta
            A comparação de igualdade acontece o mesmo, ele deve tirar os registros
            que forem nulos tanto no cliente quanto no mtx
             */


            VerificaTempData();

            /*CST Compra de industria*/
            ViewBag.CstCompraIndustriaNulaCliente = this.analise.Count(a => a.CST_COMPRA_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)); //nula do cliente
            ViewBag.CstCompraIndustriaNulaMtx     = this.analise.Count(a => a.Cst_Compra_de_Ind_INTERNO == null && a.CST_COMPRA_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)); //nula no mtx
            ViewBag.CstCompraIndustriaIgual       = this.analise.Count(a => a.CST_COMPRA_DE_IND == a.Cst_Compra_de_Ind_INTERNO && a.CST_COMPRA_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)); //compara tirando os nulos
            ViewBag.CstCompraIndustriaDif         = this.analise.Count(a => a.CST_COMPRA_DE_IND != a.Cst_Compra_de_Ind_INTERNO && a.CST_COMPRA_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
            /*CST Compra de Atacado*/
            ViewBag.CstCompraAtacadoNulaCliente = this.analise.Count(a => a.CST_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)); //nula do cliente
            ViewBag.CstCompraAtacadoNulaMtx     = this.analise.Count(a => a.Cst_Compra_de_Ata_INTERNO == null && a.CST_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)); //nula no mtx
            ViewBag.CstCompraAtacadoIgual       = this.analise.Count(a => a.CST_COMPRA_DE_ATA == a.Cst_Compra_de_Ata_INTERNO && a.CST_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)); //compara tirando os nulos
            ViewBag.CstCompraAtacadoDif         = this.analise.Count(a => a.CST_COMPRA_DE_ATA != a.Cst_Compra_de_Ata_INTERNO && a.CST_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            /*CST Compra de Simples nacional*/
            ViewBag.CstCompraSNNulaCliente = this.analise.Count(a => a.CST_COMPRA_DE_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)); //nula do cliente
            ViewBag.CstCompraSNNulaMtx     = this.analise.Count(a => a.Cst_Compra_de_Simp_Nacional_INTERNO == null && a.CST_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)); //nula no mtx
            ViewBag.CstCompraSNIgual       = this.analise.Count(a => a.CST_COMPRA_DE_SIMP_NACIONAL == a.Cst_Compra_de_Simp_Nacional_INTERNO && a.CST_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)); //compara tirando os nulos
            ViewBag.CstCompraSNDif         = this.analise.Count(a => a.CST_COMPRA_DE_SIMP_NACIONAL != a.Cst_Compra_de_Simp_Nacional_INTERNO && a.CST_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));


            /*Tres juntos: CST_NFE_IND, CST_NFE_ATA, CST_NFE_SN*/
            /*CST NFE Industria*/
            ViewBag.CstNFEIndNulaCliente = this.analise.Count(a => a.CST_DA_NFE_DA_IND_FORN == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)); //nula do cliente
            ViewBag.CstNFEIndNulaMtx     = this.analise.Count(a => a.Cst_da_Nfe_da_Ind_FORN_INTERNO == null && a.CST_DA_NFE_DA_IND_FORN != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)); //nula no mtx
            ViewBag.CstNFEIndIgual       = this.analise.Count(a => a.CST_DA_NFE_DA_IND_FORN == a.Cst_da_Nfe_da_Ind_FORN_INTERNO && a.CST_DA_NFE_DA_IND_FORN != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)); //compara tirando os nulos
            ViewBag.CstNFEIndDif         = this.analise.Count(a => a.CST_DA_NFE_DA_IND_FORN != a.Cst_da_Nfe_da_Ind_FORN_INTERNO && a.CST_DA_NFE_DA_IND_FORN != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            /*CST NFE Atacado*/
            ViewBag.CstNFEAtaNulaCliente = this.analise.Count(a => a.CST_DA_NFE_DE_ATA_FORN == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)); //nula do cliente
            ViewBag.CstNFEAtaNulaMtx     = this.analise.Count(a => a.Cst_da_Nfe_de_Ata_FORn_INTERNO == null && a.CST_DA_NFE_DE_ATA_FORN != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)); //nula no mtx
            ViewBag.CstNFEAtaIgual       = this.analise.Count(a => a.CST_DA_NFE_DE_ATA_FORN == a.Cst_da_Nfe_de_Ata_FORn_INTERNO && a.CST_DA_NFE_DE_ATA_FORN != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)); //compara tirando os nulos
            ViewBag.CstNFEAtaDif         = this.analise.Count(a => a.CST_DA_NFE_DE_ATA_FORN != a.Cst_da_Nfe_de_Ata_FORn_INTERNO && a.CST_DA_NFE_DE_ATA_FORN != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            /*CSosnt NFE For Simples Nacional*/
            ViewBag.CstNFESNNulaCliente = this.analise.Count(a => a.CSOSNT_DANFE_DOS_NFOR == null); //nula do cliente
            ViewBag.CstNFESNNulaMtx     = this.analise.Count(a => a.CsosntdaNfedoSnFOR_INTERNO == null && a.CSOSNT_DANFE_DOS_NFOR != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)); //nula no mtx
            ViewBag.CstNFESNIgual       = this.analise.Count(a => a.CSOSNT_DANFE_DOS_NFOR == a.CsosntdaNfedoSnFOR_INTERNO && a.CSOSNT_DANFE_DOS_NFOR != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)); //compara tirando os nulos
            ViewBag.CstNFESNDif         = this.analise.Count(a => a.CSOSNT_DANFE_DOS_NFOR != a.CsosntdaNfedoSnFOR_INTERNO && a.CSOSNT_DANFE_DOS_NFOR != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

            return View();

        }
              


        /*Produtos*/
        [HttpGet]
        public ActionResult AnaliseProd()
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            string user = Session["usuario"].ToString();

            //verifica se a variavel usuarios está nula, caso esteja ele carrega as informações de usuario e empresa
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else
            {
                this.empresa = (Empresa)Session["empresas"]; //se nao for nula basta carregar a empresa
            }

            //se for simples nacional direciona para essa action
            if (this.empresa.simples_nacional.Equals(1))
            {

                //  VerificaTempDataSN();

                ////Para os itens sem correspondencia
                //if (TempData["analise2"] == null)
                //{
                //    //this.tribEmpProd = (from a in db.TributacaoEmpresas where a.CNPJ_EMPRESA == empresa.cnpj && a.ATIVO.Equals(1) select a).ToList();
                //    this.trib3 = (from a in db.Analise_Tributaria_3 where a.CNPJ_EMPRESA == empresa.cnpj && a.ATIVO.Equals(1) select a).ToList(); //lista com os itens divegentes
                //    this.trib2 = (from a in db.Analise_Tributaria_2 where a.CNPJ_EMPRESA == empresa.cnpj && a.ATIVO.Equals(1) select a).ToList(); //lista com os itens divegentes
                //    TempData["prdInexistente"] = this.trib2;
                //    //TempData["analise2"] = this.tribEmpProd;
                //    TempData["analise2"] = this.trib3;
                //    TempData.Keep("analise2");
                //    TempData.Keep("prdInexistente");
                //}
                //else
                //{
                //    //this.tribEmpProd = (List<TributacaoEmpresa>)TempData["analise2"];
                //    this.trib3 = (List<AnaliseTributaria3>)TempData["analise2"];

                //    this.trib2 = (List<AnaliseTributaria2>)TempData["prdInexistente"];
                //    TempData.Keep("analise2");
                //    TempData.Keep("prdInexistente");
                //}
                VerificaProdutos();


                ///*Descrição: IGUAIS, DIFERENTES E NULOS*/
                //int iguais = analise.Count(a => a.PRODUTO_DESCRICAO == a.Descricao_INTERNO);
                //int nulas = analise.Count(a => a.PRODUTO_DESCRICAO == "" || a.PRODUTO_DESCRICAO == null);
                //iguais = iguais - nulas; //dessa forma ecxlui-se onde a descrição está nula no cliente e no mtx ao mesmo tempo

                //ViewBag.ProdDescIguais = iguais;
                //ViewBag.ProdDescNull = nulas;
                //ViewBag.ProdDescDif = analise.Count(a => a.PRODUTO_DESCRICAO != a.Descricao_INTERNO);

                /*Descrição: IGUAIS, DIFERENTES E NULOS*/
                //ViewBag.ProdDescIguais = this.analiseSn.Count(a => a.PRODUTO_COD_BARRAS == a.Cod_Barras_INTERNO && a.PRODUTO_DESCRICAO == a.Descricao_INTERNO);
                //ViewBag.ProdDescNull = this.analiseSn.Count(a => a.PRODUTO_COD_BARRAS == a.Cod_Barras_INTERNO && a.PRODUTO_DESCRICAO == "" || a.PRODUTO_DESCRICAO == null);
                //ViewBag.ProdDescDif = this.analiseSn.Count(a => a.PRODUTO_COD_BARRAS == a.Cod_Barras_INTERNO && a.PRODUTO_DESCRICAO != a.Descricao_INTERNO);

                ViewBag.ProdDescIguais = this.trib3.Count(a => a.PRODUTO_DESCRICAO == a.Descricao_INTERNO);
                ViewBag.ProdDescNull = this.trib3.Count(a => a.PRODUTO_DESCRICAO == "" || a.PRODUTO_DESCRICAO == null);
                ViewBag.ProdDescDif = this.trib3.Count(a =>  a.PRODUTO_DESCRICAO != a.Descricao_INTERNO);



                /*Cest: IGUAIS, DIFERENTES, NULOS*/
                ViewBag.ProdCESTNulo = this.trib3.Count(a => a.PRODUTO_CEST == null); // não possuem cest
                ViewBag.ProdCESTDif = this.trib3.Count(a =>  a.PRODUTO_CEST != a.Cest_INTERNO && a.PRODUTO_CEST != null);
                ViewBag.ProdCESTIgual = this.trib3.Count(a => a.PRODUTO_CEST == a.Cest_INTERNO && a.PRODUTO_CEST != null);





                /*Versao 2*/
                ViewBag.ProdNuloAmbos = this.trib3.Count(a => a.PRODUTO_CEST == null && a.Cest_INTERNO == null); // não possuem cest
                ViewBag.ProdNuloMTX = this.trib3.Count(a =>  a.PRODUTO_CEST != null && a.Cest_INTERNO == null); // não possuem cest
                ViewBag.ProdNuloCliente = this.trib3.Count(a =>  a.PRODUTO_CEST == null && a.Cest_INTERNO != null); // não possuem cest
                ViewBag.ProdCESTDif = this.trib3.Count(a => a.PRODUTO_CEST != a.Cest_INTERNO && a.PRODUTO_CEST != null && a.Cest_INTERNO != null);
                ViewBag.ProdCESTIgual = this.trib3.Count(a => a.PRODUTO_CEST == a.Cest_INTERNO && a.PRODUTO_CEST != null && a.Cest_INTERNO != null);


                /*Ncm*/
                //ViewBag.ProdNCMNulo = this.trib3.Count(a => a.PRODUTO_NCM == null && a.NCM_INTERNO != null);
                //ViewBag.ProdNCMDiferente = this.trib3.Count(a => a.PRODUTO_NCM != a.NCM_INTERNO && a.PRODUTO_NCM != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
                //ViewBag.ProdNCMIgual = this.trib3.Count(a => a.PRODUTO_NCM == a.NCM_INTERNO && a.PRODUTO_NCM != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));

                /*Versão 2 NCM*/
                ViewBag.ProdNCMNuloAmbos   = this.trib3.Count(a => a.PRODUTO_NCM == null && a.NCM_INTERNO == null);
                ViewBag.ProdNCMNuloMTX     = this.trib3.Count(a => a.PRODUTO_NCM != null && a.NCM_INTERNO == null);
                ViewBag.ProdNCMNuloCliente = this.trib3.Count(a => a.PRODUTO_NCM == null && a.NCM_INTERNO != null); // não possuem cest
                ViewBag.ProdNCMDiferente   = this.trib3.Count(a => a.PRODUTO_NCM != a.NCM_INTERNO && a.PRODUTO_NCM != null &&  a.NCM_INTERNO != null);
                ViewBag.ProdNCMIgual       = this.trib3.Count(a => a.PRODUTO_NCM == a.NCM_INTERNO && a.PRODUTO_NCM != null && a.NCM_INTERNO != null);

                /*Produtos sem correspondencias*/
                /*TO-DO: implementar código para pegar produtos sem correspondencia*/

                //total de produtos
                //int qtdProd = 0;

                //variavel auxiliar
                // int contador = 0;

                //     int semTrib = 0;
                //percorre a lista de produtos inexistentes
                //foreach (AnaliseTributaria2 t in trib2)
                //{
                //    //compara com oa lista de produtos existentes
                //    tribEmpProd = tribEmpProd.Where(a => a.PRODUTO_COD_BARRAS.StartsWith(t.PRODUTO_COD_BARRAS)).ToList();
                //    //caso nao exista o valor vem zerado e soma no contador
                //    if (tribEmpProd.Count() >= 0)
                //    {
                //        contador++;
                //        this.tribEmpProd = (List<TributacaoEmpresa>)TempData["analise2"];
                //    }
                //}
                //qtdProd = this.analiseSn.Count();
                //contador = trib2.Count();


                //    ViewBag.ComCorrespondencia = qtdProd;
                //    ViewBag.SemCorrespondencia = contador;
                //    ViewBag.SemTributacao = this.tribEmpProd.Count() - contador;

                ViewBag.SemCorrespondencia = this.trib2.Count();
                ViewBag.ComCorrespondencia = this.trib3.Count();

                //atribui a viewBag os valores que possuem e nao possuem correspondencia



            }
            else {
                VerificaTempData();
                //Para os itens sem correspondencia
                if (TempData["analise2"] == null)
                {
                    // this.tribEmpProd = (from a in db.TributacaoEmpresas where a.CNPJ_EMPRESA == empresa.cnpj && a.ATIVO.Equals(1) select a).ToList();
                    this.trib3 = (from a in db.Analise_Tributaria_3 where a.CNPJ_EMPRESA == empresa.cnpj && a.ATIVO.Equals(1) select a).ToList(); //lista com os itens divegentes

                    this.trib2 = (from a in db.Analise_Tributaria_2 where a.CNPJ_EMPRESA == empresa.cnpj && a.ATIVO.Equals(1) select a).ToList(); //lista com os itens divegentes
                    TempData["prdInexistente"] = this.trib2;
                    TempData["analise2"] = this.trib3;
                    TempData.Keep("analise2");
                    TempData.Keep("prdInexistente");
                }
                else
                {
                    this.trib3 = (List<AnaliseTributaria3>)TempData["analise2"];
                    this.trib2 = (List<AnaliseTributaria2>)TempData["prdInexistente"];
                    TempData.Keep("analise2");
                    TempData.Keep("prdInexistente");
                }



                ///*Descrição: IGUAIS, DIFERENTES E NULOS*/
                //int iguais = analise.Count(a => a.PRODUTO_DESCRICAO == a.Descricao_INTERNO);
                //int nulas = analise.Count(a => a.PRODUTO_DESCRICAO == "" || a.PRODUTO_DESCRICAO == null);
                //iguais = iguais - nulas; //dessa forma ecxlui-se onde a descrição está nula no cliente e no mtx ao mesmo tempo

                //ViewBag.ProdDescIguais = iguais;
                //ViewBag.ProdDescNull = nulas;
                //ViewBag.ProdDescDif = analise.Count(a => a.PRODUTO_DESCRICAO != a.Descricao_INTERNO);

                /*Descrição: IGUAIS, DIFERENTES E NULOS*/
                ViewBag.ProdDescIguais = this.analise.Count(a => a.PRODUTO_COD_BARRAS == a.Cod_Barras_INTERNO && a.PRODUTO_DESCRICAO == a.Descricao_INTERNO);
                ViewBag.ProdDescNull = this.analise.Count(a => a.PRODUTO_COD_BARRAS == a.Cod_Barras_INTERNO && a.PRODUTO_DESCRICAO == "" || a.PRODUTO_DESCRICAO == null);
                ViewBag.ProdDescDif = this.analise.Count(a => a.PRODUTO_COD_BARRAS == a.Cod_Barras_INTERNO && a.PRODUTO_DESCRICAO != a.Descricao_INTERNO);


                /*Cest: IGUAIS, DIFERENTES, NULOS*/
                ViewBag.ProdCESTNulo = this.analise.Count(a => a.PRODUTO_CEST == null); // não possuem cest
                ViewBag.ProdCESTDif = this.analise.Count(a => a.PRODUTO_COD_BARRAS == a.Cod_Barras_INTERNO && a.PRODUTO_CEST != a.Cest_INTERNO && a.PRODUTO_CEST != null);
                ViewBag.ProdCESTIgual = this.analise.Count(a => a.PRODUTO_COD_BARRAS == a.Cod_Barras_INTERNO && a.PRODUTO_CEST == a.Cest_INTERNO && a.PRODUTO_CEST != null);





                /*Versao 2*/
                ViewBag.ProdNuloAmbos = this.analise.Count(a => a.PRODUTO_COD_BARRAS == a.Cod_Barras_INTERNO && a.PRODUTO_CEST == null && a.Cest_INTERNO == null); // não possuem cest
                ViewBag.ProdNuloMTX = this.analise.Count(a => a.PRODUTO_COD_BARRAS == a.Cod_Barras_INTERNO && a.PRODUTO_CEST != null && a.Cest_INTERNO == null); // não possuem cest
                ViewBag.ProdNuloCliente = this.analise.Count(a => a.PRODUTO_COD_BARRAS == a.Cod_Barras_INTERNO && a.PRODUTO_CEST == null && a.Cest_INTERNO != null); // não possuem cest
                ViewBag.ProdCESTDif = this.analise.Count(a => a.PRODUTO_COD_BARRAS == a.Cod_Barras_INTERNO && a.PRODUTO_CEST != a.Cest_INTERNO && a.PRODUTO_CEST != null && a.Cest_INTERNO != null);
                ViewBag.ProdCESTIgual = this.analise.Count(a => a.PRODUTO_COD_BARRAS == a.Cod_Barras_INTERNO && a.PRODUTO_CEST == a.Cest_INTERNO && a.PRODUTO_CEST != null && a.Cest_INTERNO != null);


                ///*Ncm*/
                //ViewBag.ProdNCMNulo = this.analise.Count(a => a.PRODUTO_NCM == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino));
                //ViewBag.ProdNCMDiferente = this.analise.Count(a => a.PRODUTO_COD_BARRAS == a.Cod_Barras_INTERNO && a.PRODUTO_NCM != a.NCM_INTERNO && a.PRODUTO_NCM != null);
                //ViewBag.ProdNCMIgual = this.analise.Count(a => a.PRODUTO_COD_BARRAS == a.Cod_Barras_INTERNO && a.PRODUTO_NCM == a.NCM_INTERNO && a.PRODUTO_NCM != null);


                /*Versão 2 NCM*/
                ViewBag.ProdNCMNuloAmbos = this.trib3.Count(a => a.PRODUTO_NCM == null && a.NCM_INTERNO == null);
                ViewBag.ProdNCMNuloMTX = this.trib3.Count(a => a.PRODUTO_NCM != null && a.NCM_INTERNO == null);
                ViewBag.ProdNCMNuloCliente = this.trib3.Count(a => a.PRODUTO_NCM == null && a.NCM_INTERNO != null); // não possuem cest
                ViewBag.ProdNCMDiferente = this.trib3.Count(a => a.PRODUTO_NCM != a.NCM_INTERNO && a.PRODUTO_NCM != null && a.NCM_INTERNO != null);
                ViewBag.ProdNCMIgual = this.trib3.Count(a => a.PRODUTO_NCM == a.NCM_INTERNO && a.PRODUTO_NCM != null && a.NCM_INTERNO != null);


                /*Produtos sem correspondencias*/
                /*TO-DO: implementar código para pegar produtos sem correspondencia*/

                //total de produtos
                // int qtdProd = tribEmpProd.Count();

                //variavel auxiliar
                //int contador = 0;

                //percorre a lista de produtos inexistentes
                //foreach (AnaliseTributaria2 t in trib2)
                //{
                //    //compara com oa lista de produtos existentes
                //    tribEmpProd = tribEmpProd.Where(a => a.PRODUTO_COD_BARRAS.StartsWith(t.PRODUTO_COD_BARRAS)).ToList();
                //    //caso nao exista o valor vem zerado e soma no contador
                //    if (tribEmpProd.Count() >= 0)
                //    {
                //        contador++;
                //        this.tribEmpProd = (List<TributacaoEmpresa>)TempData["analise2"];
                //    }
                //}
                //atribui a viewBag os valores que possuem e nao possuem correspondencia
                // ViewBag.SemCorrespondencia = contador;
                //ViewBag.ComCorrespondencia = qtdProd - contador;

                ViewBag.SemCorrespondencia = this.trib2.Count();
                ViewBag.ComCorrespondencia = this.trib3.Count();


            }





            return View();
        }


        [HttpGet]
        public ActionResult AnaliseProdt()
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            string user = Session["usuario"].ToString();

            //verifica se a variavel usuarios está nula, caso esteja ele carrega as informações de usuario e empresa
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else
            {
                this.empresa = (Empresa)Session["empresas"]; //se nao for nula basta carregar a empresa
            }

            VerificaTempDataProd();

            ViewBag.ProdDescIguais = this.analiseProd.Count(a => a.PRODUTO_DESCRICAO_CLIENTE == a.DESCRICAO_BASE);
            ViewBag.ProdDescNull   = this.analiseProd.Count(a => a.PRODUTO_DESCRICAO_CLIENTE == "" || a.DESCRICAO_BASE == null);
            ViewBag.ProdDescDif    = this.analiseProd.Count(a => a.PRODUTO_DESCRICAO_CLIENTE != a.DESCRICAO_BASE);


            /*Cest: IGUAIS, DIFERENTES, NULOS*/
            //ViewBag.ProdCESTNulo = this.analiseProd.Count(a => a.CEST_CLIENTE == null); // não possuem cest
            //ViewBag.ProdCESTDif = this.analiseProd.Count(a => a.COD_BARRAS_CLIENTE == a.COD_BARRAS_BASE && a.CEST_CLIENTE != a.CEST_BASE && a.CEST_CLIENTE != null);
            //ViewBag.ProdCESTIgual = this.analiseProd.Count(a => a.COD_BARRAS_CLIENTE == a.COD_BARRAS_BASE && a.CEST_CLIENTE == a.CEST_BASE && a.CEST_CLIENTE != null);



            /*Versao 2*/
            ViewBag.ProdNuloAmbos   = this.analiseProd.Count(a =>  a.CEST_CLIENTE == null && a.CEST_BASE == null); // não possuem cest
            ViewBag.ProdNuloMTX     = this.analiseProd.Count(a =>  a.CEST_CLIENTE != null && a.CEST_BASE == null); // não possuem cest
            ViewBag.ProdNuloCliente = this.analiseProd.Count(a =>  a.CEST_CLIENTE == null && a.CEST_BASE != null); // não possuem cest
            ViewBag.ProdCESTDif     = this.analiseProd.Count(a =>  a.CEST_CLIENTE != a.CEST_BASE && a.CEST_CLIENTE != null && a.CEST_BASE != null);
            ViewBag.ProdCESTIgual   = this.analiseProd.Count(a =>  a.CEST_CLIENTE == a.CEST_BASE && a.CEST_CLIENTE != null && a.CEST_BASE != null);


            /*Ncm*/
            ViewBag.ProdNCMNulo      = this.analiseProd.Count(a => a.NCM_CLIENTE == null);
            ViewBag.ProdNCMDiferente = this.analiseProd.Count(a => a.NCM_CLIENTE != a.NCM_BASE && a.NCM_CLIENTE != null);
            ViewBag.ProdNCMIgual     = this.analiseProd.Count(a => a.NCM_CLIENTE == a.NCM_BASE && a.NCM_CLIENTE != null);


            //VERSAO 2 DO NCM
            ViewBag.ProdNCMNuloAmbos   = this.analiseProd.Count(a => a.NCM_CLIENTE == null && a.NCM_BASE == null); // não possuem cest
            ViewBag.ProdNCMNuloMTX     = this.analiseProd.Count(a => a.NCM_CLIENTE != null && a.NCM_BASE == null); // não possuem cest
            ViewBag.ProdNCMNuloCliente = this.analiseProd.Count(a => a.NCM_CLIENTE == null && a.NCM_BASE != null); // não possuem cest

            ViewBag.ProdNCMDiferente = this.analiseProd.Count(a => a.NCM_CLIENTE != a.NCM_BASE && a.NCM_CLIENTE != null);
            ViewBag.ProdNCMIgual     = this.analiseProd.Count(a => a.NCM_CLIENTE == a.NCM_BASE && a.NCM_CLIENTE != null);

            /*Produtos sem correspondencias*/
            /*TO-DO: implementar código para pegar produtos sem correspondencia*/



            return View();

        }


        /// <summary>
        /// Descrição da action TabelaIcmsEntrada
        /// </summary>
        /// <param name="ordenacao"> Define a ordenação dos registros</param>
        /// <param name="procuraPor"> Define se a procura é por codigo de barras ou pela descrição do produto</param>
        /// <param name="procuraNCM"> Define a procura por ncm</param>
        /// <param name="procuraCEST"> Define a procura pelo CEST</param>
        /// <param name="filtroCorrente"> Define se o filtro está informado (codigo de barras ou descrição)</param>
        ///  <param name="filtroCorrenteNCM"> Define se o filtro está informado (NCM)</param>
        ///  <param name="filtroCorrenteCest"> Define se o filtro está informado (CEST)</param>
        ///  <param name="pagina"> Define o número da página que esta sendo mostrada</param>
        ///  <param name="numeroLinhas"> Define o número de linhas a serem mostradas(padrao 10)</param>
        /// <returns>Retorna a View Tipada</returns>
        [HttpGet]
        public ActionResult TabelaIcmsEntrada(string origem, string destino, string ordenacao, string procuraPor, string procuraNCM, 
        string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, int? pagina, int? numeroLinhas)
        {
            //Veririficar a sessão do usuario
            if(Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home"); //manda pro login
            }
            //Mensagem do head do card
            ViewBag.MsgCardHeader = "Visualização em tabelas de Icms de Entrada";

            //Pegando o usuario e a empresa do mesmo - atribui à variavel user
            string usuarioLogado = Session["usuario"].ToString();

            /*Inicializando a variavel de sessao de usuario caso nao exista
             Essa variavel vai servir para buscar um usuario especifico, o mesmo que está logado no sistema
             e salvar em uma variavel de sessao para ser usado durante todo o acesso
             */
            if(Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == usuarioLogado select a).FirstOrDefault();
                // pega a empresa do usuario
                this.empresa = (from a in db.Empresas where a.cnpj == this.usuario.empresa.cnpj select a).FirstOrDefault();
                //inicia a variavel de sessao
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else
            {
                //caso a variavel ja esteja em uso, atribui somente a empresa
                this.empresa = (Empresa)Session["empresas"];
            }

            //Verificar o filtrocorrente, se estiver nulo ele busca pelo parametro procuraPor(codigo de barras ou descricao)
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor; //atribui à variavel auxiliar

            /*converte em long caso seja possivel e atribui à variavel tipada: 
             isso se faz necessário caso o usuario digitou o codigo de barras
            ao inves da descrição do produto
            */
            long codBarrasL = 0; //variavel tipada
            /*Neste momento o sistema verifica se é possivel converter o que o usuario digitou
             em um valor long, se for significa que ele digitou um codigo de barras e a variavel do tipo bool recebe TRUE*/
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //veriica se veio parametros de pesquisa, se nao veio a variavel continua null, se veio ela recebe o que veio da view
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //Se o parametro numero de linhas vier preenchido ele atrubui a ViewBag, caso contrario continua 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 5;

            //Viewbag de ordenação
            ViewBag.Ordenacao = ordenacao;

            //se a ordenação nao estiver nula ele aplica a ordencao produto descrescente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            //Atribui 1 à página caso os parametros não sejam nulos
            pagina = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : pagina;

            //Atribui os filtros correntes caso alguma procura esteja nulla (seja nula)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;

            /*Atribindo as viewBags*/
            ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM;

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();

            //verifica estados origem e destino
            VerificaOriDest(origem, destino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            /*A lista é salva em uma tempdata para ficar persistida enquanto o usuario está na action, quando
             houver alterações essa lista é renovado e os dados atualizados*/
            if (TempData["analise"] == null)
            {
                this.analise = (from a in db.Analise_Tributaria where a.CNPJ_EMPRESA == this.empresa.cnpj select a).ToList();
                TempData["analise"] = this.analise; //cria a tempdata
                TempData.Keep("analise"); //persiste
            }
            else
            {
                this.analise = (List<AnaliseTributaria>)TempData["analise"];//o ojeto analise recebe os valores de tempdata
                TempData.Keep("analise"); //persiste
            }

            //filtra por origem e destino
            this.analise = this.analise.Where(s => s.UF_ORIGEM == this.ufOrigem && s.UF_DESTINO == this.ufDestino).ToList();
            //Action de busca: retorna a lista ja filtrada
            analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);

            //Ordenação
            switch (ordenacao)
            {
                case "Produto_desc":
                    analise = analise.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    analise = analise.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a página
            int tamanhoPagina = 0;

            //ternario para tamanho da página
            tamanhoPagina = (ViewBag.NumeroLinhas != null) ? ViewBag.NumeroLinhas : (tamanhoPagina = (numeroLinhas != 5) ? ViewBag.NumeroLinhas : (int)numeroLinhas);

            //se houver algo na vaiavel pagina ele atruib caso contrario atribui 1
            int numeroPagina = (pagina ?? 1);
            
            return View(analise.ToPagedList(numeroPagina, tamanhoPagina));//view tipada

        }


        [HttpGet]
        public ActionResult TabelaIcmsSaida(string origem, string destino, string ordenacao, string procuraPor, string procuraNCM,
        string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, int? pagina, int? numeroLinhas)
        {
            //Veririficar a sessão do usuario
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home"); //manda pro login
            }
            //Mensagem do head do card
            ViewBag.MsgCardHeader = "Visualização em tabelas de Icms de Saída";

            //Pegando o usuario e a empresa do mesmo - atribui à variavel user
            string usuarioLogado = Session["usuario"].ToString();

            /*Inicializando a variavel de sessao de usuario caso nao exista
             Essa variavel vai servir para buscar um usuario especifico, o mesmo que está logado no sistema
             e salvar em uma variavel de sessao para ser usado durante todo o acesso
             */
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == usuarioLogado select a).FirstOrDefault();
                // pega a empresa do usuario
                this.empresa = (from a in db.Empresas where a.cnpj == this.usuario.empresa.cnpj select a).FirstOrDefault();
                //inicia a variavel de sessao
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else
            {
                //caso a variavel ja esteja em uso, atribui somente a empresa
                this.empresa = (Empresa)Session["empresas"];
            }

            //Verificar o filtrocorrente, se estiver nulo ele busca pelo parametro procuraPor(codigo de barras ou descricao)
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor; //atribui à variavel auxiliar

            /*converte em long caso seja possivel e atribui à variavel tipada: 
             isso se faz necessário caso o usuario digitou o codigo de barras
            ao inves da descrição do produto
            */
            long codBarrasL = 0; //variavel tipada
            /*Neste momento o sistema verifica se é possivel converter o que o usuario digitou
             em um valor long, se for significa que ele digitou um codigo de barras e a variavel do tipo bool recebe TRUE*/
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //veriica se veio parametros de pesquisa, se nao veio a variavel continua null, se veio ela recebe o que veio da view
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //Se o parametro numero de linhas vier preenchido ele atrubui a ViewBag, caso contrario continua 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 5;

            //Viewbag de ordenação
            ViewBag.Ordenacao = ordenacao;

            //se a ordenação nao estiver nula ele aplica a ordencao produto descrescente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            //Atribui 1 à página caso os parametros não sejam nulos
            pagina = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : pagina;

            //Atribui os filtros correntes caso alguma procura esteja nulla (seja nula)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;

            /*Atribindo as viewBags*/
            ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM;
            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();
            //verifica estados origem e destino
            VerificaOriDest(origem, destino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;


            /*A lista é salva em uma tempdata para ficar persistida enquanto o usuario está na action, quando
             houver alterações essa lista é renovado e os dados atualizados*/
            if (TempData["analise"] == null)
            {
                this.analise = (from a in db.Analise_Tributaria where a.CNPJ_EMPRESA == this.empresa.cnpj select a).ToList();
                TempData["analise"] = this.analise; //cria a tempdata
                TempData.Keep("analise"); //persiste
            }
            else
            {
                this.analise = (List<AnaliseTributaria>)TempData["analise"];//o ojeto analise recebe os valores de tempdata
                TempData.Keep("analise"); //persiste
            }

            //filtra por origem e destino
            this.analise = this.analise.Where(s => s.UF_ORIGEM == this.ufOrigem && s.UF_DESTINO == this.ufDestino).ToList();

            //Action de busca: retorna a lista ja filtrada
            analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);

            //Ordenação
            switch (ordenacao)
            {
                case "Produto_desc":
                    analise = analise.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    analise = analise.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a página
            int tamanhoPagina = 0;

            //ternario para tamanho da página
            tamanhoPagina = (ViewBag.NumeroLinhas != null) ? ViewBag.NumeroLinhas : (tamanhoPagina = (numeroLinhas != 5) ? ViewBag.NumeroLinhas : (int)numeroLinhas);

            //se houver algo na vaiavel pagina ele atruib caso contrario atribui 1
            int numeroPagina = (pagina ?? 1);

            

            return View(analise.ToPagedList(numeroPagina, tamanhoPagina));//view tipada

        }


        [HttpGet]
        public ActionResult TabelaRedBasCalSaida(string origem, string destino, string ordenacao, string procuraPor, string procuraNCM,
        string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, int? pagina, int? numeroLinhas)
        {
            //Veririficar a sessão do usuario
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home"); //manda pro login
            }
            //Mensagem do head do card
            ViewBag.MsgCardHeader = "Visualização em tabelas de Redução de Base de Calc. Icms de Saída ";

            //Pegando o usuario e a empresa do mesmo - atribui à variavel user
            string usuarioLogado = Session["usuario"].ToString();

            /*Inicializando a variavel de sessao de usuario caso nao exista
             Essa variavel vai servir para buscar um usuario especifico, o mesmo que está logado no sistema
             e salvar em uma variavel de sessao para ser usado durante todo o acesso
             */
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == usuarioLogado select a).FirstOrDefault();
                // pega a empresa do usuario
                this.empresa = (from a in db.Empresas where a.cnpj == this.usuario.empresa.cnpj select a).FirstOrDefault();
                //inicia a variavel de sessao
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else
            {
                //caso a variavel ja esteja em uso, atribui somente a empresa
                this.empresa = (Empresa)Session["empresas"];
            }

            //Verificar o filtrocorrente, se estiver nulo ele busca pelo parametro procuraPor(codigo de barras ou descricao)
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor; //atribui à variavel auxiliar

            /*converte em long caso seja possivel e atribui à variavel tipada: 
             isso se faz necessário caso o usuario digitou o codigo de barras
            ao inves da descrição do produto
            */
            long codBarrasL = 0; //variavel tipada
            /*Neste momento o sistema verifica se é possivel converter o que o usuario digitou
             em um valor long, se for significa que ele digitou um codigo de barras e a variavel do tipo bool recebe TRUE*/
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //veriica se veio parametros de pesquisa, se nao veio a variavel continua null, se veio ela recebe o que veio da view
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //Se o parametro numero de linhas vier preenchido ele atrubui a ViewBag, caso contrario continua 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 5;

            //Viewbag de ordenação
            ViewBag.Ordenacao = ordenacao;

            //se a ordenação nao estiver nula ele aplica a ordencao produto descrescente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            //Atribui 1 à página caso os parametros não sejam nulos
            pagina = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : pagina;

            //Atribui os filtros correntes caso alguma procura esteja nulla (seja nula)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;

            /*Atribindo as viewBags*/
            ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM;

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();

            //verifica estados origem e destino
            VerificaOriDest(origem, destino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            /*A lista é salva em uma tempdata para ficar persistida enquanto o usuario está na action, quando
             houver alterações essa lista é renovado e os dados atualizados*/
            if (TempData["analise"] == null)
            {
                this.analise = (from a in db.Analise_Tributaria where a.CNPJ_EMPRESA == this.empresa.cnpj select a).ToList();
                TempData["analise"] = this.analise; //cria a tempdata
                TempData.Keep("analise"); //persiste
            }
            else
            {
                this.analise = (List<AnaliseTributaria>)TempData["analise"];//o ojeto analise recebe os valores de tempdata
                TempData.Keep("analise"); //persiste
            }

            //filtra por origem e destino
            this.analise = this.analise.Where(s => s.UF_ORIGEM == this.ufOrigem && s.UF_DESTINO == this.ufDestino).ToList();

            //Action de busca: retorna a lista ja filtrada
            analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);

            //Ordenação
            switch (ordenacao)
            {
                case "Produto_desc":
                    analise = analise.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    analise = analise.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a página
            int tamanhoPagina = 0;

            //ternario para tamanho da página
            tamanhoPagina = (ViewBag.NumeroLinhas != null) ? ViewBag.NumeroLinhas : (tamanhoPagina = (numeroLinhas != 5) ? ViewBag.NumeroLinhas : (int)numeroLinhas);

            //se houver algo na vaiavel pagina ele atruib caso contrario atribui 1
            int numeroPagina = (pagina ?? 1);

           

            return View(analise.ToPagedList(numeroPagina, tamanhoPagina));//view tipada

        }

        

        [HttpGet]
        public ActionResult TabelaRedBasCalEntrada(string origem, string destino, string ordenacao, string procuraPor, string procuraNCM,
        string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, int? pagina, int? numeroLinhas)
        {
            //Veririficar a sessão do usuario
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home"); //manda pro login
            }
            //Mensagem do head do card
            ViewBag.MsgCardHeader = "Visualização em tabelas de Redução de Base de Calc. Icms de Saída ";

            //Pegando o usuario e a empresa do mesmo - atribui à variavel user
            string usuarioLogado = Session["usuario"].ToString();

            /*Inicializando a variavel de sessao de usuario caso nao exista
             Essa variavel vai servir para buscar um usuario especifico, o mesmo que está logado no sistema
             e salvar em uma variavel de sessao para ser usado durante todo o acesso
             */
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == usuarioLogado select a).FirstOrDefault();
                // pega a empresa do usuario
                this.empresa = (from a in db.Empresas where a.cnpj == this.usuario.empresa.cnpj select a).FirstOrDefault();
                //inicia a variavel de sessao
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else
            {
                //caso a variavel ja esteja em uso, atribui somente a empresa
                this.empresa = (Empresa)Session["empresas"];
            }

            //Verificar o filtrocorrente, se estiver nulo ele busca pelo parametro procuraPor(codigo de barras ou descricao)
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor; //atribui à variavel auxiliar

            /*converte em long caso seja possivel e atribui à variavel tipada: 
             isso se faz necessário caso o usuario digitou o codigo de barras
            ao inves da descrição do produto
            */
            long codBarrasL = 0; //variavel tipada
            /*Neste momento o sistema verifica se é possivel converter o que o usuario digitou
             em um valor long, se for significa que ele digitou um codigo de barras e a variavel do tipo bool recebe TRUE*/
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //veriica se veio parametros de pesquisa, se nao veio a variavel continua null, se veio ela recebe o que veio da view
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //Se o parametro numero de linhas vier preenchido ele atrubui a ViewBag, caso contrario continua 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 5;

            //Viewbag de ordenação
            ViewBag.Ordenacao = ordenacao;

            //se a ordenação nao estiver nula ele aplica a ordencao produto descrescente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            //Atribui 1 à página caso os parametros não sejam nulos
            pagina = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : pagina;

            //Atribui os filtros correntes caso alguma procura esteja nulla (seja nula)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;

            /*Atribindo as viewBags*/
            ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM;

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();

            //verifica estados origem e destino
            VerificaOriDest(origem, destino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            /*A lista é salva em uma tempdata para ficar persistida enquanto o usuario está na action, quando
             houver alterações essa lista é renovado e os dados atualizados*/
            if (TempData["analise"] == null)
            {
                this.analise = (from a in db.Analise_Tributaria where a.CNPJ_EMPRESA == this.empresa.cnpj select a).ToList();
                TempData["analise"] = this.analise; //cria a tempdata
                TempData.Keep("analise"); //persiste
            }
            else
            {
                this.analise = (List<AnaliseTributaria>)TempData["analise"];//o ojeto analise recebe os valores de tempdata
                TempData.Keep("analise"); //persiste
            }

            //filtra por origem e destino
            this.analise = this.analise.Where(s => s.UF_ORIGEM == this.ufOrigem && s.UF_DESTINO == this.ufDestino).ToList();

            //Action de busca: retorna a lista ja filtrada
            analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);

            //Ordenação
            switch (ordenacao)
            {
                case "Produto_desc":
                    analise = analise.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    analise = analise.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a página
            int tamanhoPagina = 0;

            //ternario para tamanho da página
            tamanhoPagina = (ViewBag.NumeroLinhas != null) ? ViewBag.NumeroLinhas : (tamanhoPagina = (numeroLinhas != 5) ? ViewBag.NumeroLinhas : (int)numeroLinhas);

            //se houver algo na vaiavel pagina ele atruib caso contrario atribui 1
            int numeroPagina = (pagina ?? 1);
           
           
            return View(analise.ToPagedList(numeroPagina, tamanhoPagina));//view tipada

        }


        [HttpGet]
        public ActionResult TabelaPisCofins(string origem, string destino, string ordenacao, string procuraPor, string procuraNCM,
        string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, int? pagina, int? numeroLinhas)
        {
            //Veririficar a sessão do usuario
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home"); //manda pro login
            }
            

            //Pegando o usuario e a empresa do mesmo - atribui à variavel user
            string usuarioLogado = Session["usuario"].ToString();

            /*Inicializando a variavel de sessao de usuario caso nao exista
             Essa variavel vai servir para buscar um usuario especifico, o mesmo que está logado no sistema
             e salvar em uma variavel de sessao para ser usado durante todo o acesso
             */
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == usuarioLogado select a).FirstOrDefault();
                // pega a empresa do usuario
                this.empresa = (from a in db.Empresas where a.cnpj == this.usuario.empresa.cnpj select a).FirstOrDefault();
                //inicia a variavel de sessao
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else
            {
                //caso a variavel ja esteja em uso, atribui somente a empresa
                this.empresa = (Empresa)Session["empresas"];
            }

            //Verificar o filtrocorrente, se estiver nulo ele busca pelo parametro procuraPor(codigo de barras ou descricao)
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor; //atribui à variavel auxiliar

            /*converte em long caso seja possivel e atribui à variavel tipada: 
             isso se faz necessário caso o usuario digitou o codigo de barras
            ao inves da descrição do produto
            */
            long codBarrasL = 0; //variavel tipada
            /*Neste momento o sistema verifica se é possivel converter o que o usuario digitou
             em um valor long, se for significa que ele digitou um codigo de barras e a variavel do tipo bool recebe TRUE*/
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //veriica se veio parametros de pesquisa, se nao veio a variavel continua null, se veio ela recebe o que veio da view
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //Se o parametro numero de linhas vier preenchido ele atrubui a ViewBag, caso contrario continua 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 5;

            //Viewbag de ordenação
            ViewBag.Ordenacao = ordenacao;

            //se a ordenação nao estiver nula ele aplica a ordencao produto descrescente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            //Atribui 1 à página caso os parametros não sejam nulos
            pagina = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : pagina;

            //Atribui os filtros correntes caso alguma procura esteja nulla (seja nula)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;

            /*Atribindo as viewBags*/
            ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM;

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();

            //verifica estados origem e destino
            VerificaOriDest(origem, destino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;



            /*A lista é salva em uma tempdata para ficar persistida enquanto o usuario está na action, quando
             houver alterações essa lista é renovado e os dados atualizados*/
            if (TempData["analise"] == null)
            {
                this.analise = (from a in db.Analise_Tributaria where a.CNPJ_EMPRESA == this.empresa.cnpj select a).ToList();
                TempData["analise"] = this.analise; //cria a tempdata
                TempData.Keep("analise"); //persiste
            }
            else
            {
                this.analise = (List<AnaliseTributaria>)TempData["analise"];//o ojeto analise recebe os valores de tempdata
                TempData.Keep("analise"); //persiste
            }

            //filtra por origem e destino
            this.analise = this.analise.Where(s => s.UF_ORIGEM == this.ufOrigem && s.UF_DESTINO == this.ufDestino).ToList();

            //Action de busca: retorna a lista ja filtrada
            analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);

            //Ordenação
            switch (ordenacao)
            {
                case "Produto_desc":
                    analise = analise.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    analise = analise.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a página
            int tamanhoPagina = 0;

            //ternario para tamanho da página
            tamanhoPagina = (ViewBag.NumeroLinhas != null) ? ViewBag.NumeroLinhas : (tamanhoPagina = (numeroLinhas != 5) ? ViewBag.NumeroLinhas : (int)numeroLinhas);

            //se houver algo na vaiavel pagina ele atruib caso contrario atribui 1
            int numeroPagina = (pagina ?? 1);

            return View(analise.ToPagedList(numeroPagina, tamanhoPagina));//view tipada

        }


        //[HttpGet]
        //public ActionResult TabelaProduto(string sortOrder, string procuraNome, string procuraBarras, string procuraNCM, string procuraCEST, string currentFilter, int? page, string LinhasNum)
        //{
        //    /*Verificando a sessão*/
        //    if (Session["usuario"] == null)
        //    {
        //        return RedirectToAction("Login", "../Home");
        //    }

        //    /*Pegando o usuário e a empresa do usuário*/
        //    string user = Session["usuario"].ToString();
        //    Usuario usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
        //    Empresa empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa

        //    //Paginação 
        //    ViewBag.OrdemAtual = sortOrder;
        //    ViewBag.PorProdutoDesc = String.IsNullOrEmpty(sortOrder) ? "Produto_desc" : "";
        //    ViewBag.PorCatProd = sortOrder == "CatProd" ? "CatProd_desc" : "CatProd";


        //    if (procuraNome != null)
        //    {
        //        page = 1;
        //        procuraNome = procuraNome.Trim();
        //    }
        //    else
        //    {
        //        procuraNome = currentFilter;
        //    }

        //    if (procuraBarras != null)
        //    {
        //        page = 1;
        //        procuraBarras = procuraBarras.Trim();
        //    }
        //    else
        //    {
        //        procuraBarras = currentFilter;
        //    }

        //    if (procuraCEST != null)
        //    {
        //        page = 1;
        //        procuraCEST = procuraCEST.Trim();
        //    }
        //    else
        //    {
        //        procuraCEST = currentFilter;
        //    }
        //    if (procuraNCM != null)
        //    {
        //        page = 1;
        //        procuraNCM = procuraNCM.Trim();
        //    }
        //    else
        //    {
        //        procuraNCM = currentFilter;
        //    }


        //    var trib = from s in db.Analise_Tributaria select s;

        //    //busca
        //    if (!String.IsNullOrEmpty(procuraNome))
        //    {

        //        trib = trib.Where(s => s.CNPJ_EMPRESA == usuario.empresa.cnpj && s.PRODUTO_DESCRICAO.Contains(procuraNome));
        //        trib = trib.OrderBy(s => s.Id_Produto_INTERNO);
        //        //trib = (from a in db.Analise_Tributaria where a.CNPJ_EMPRESA == usuario.empresa.cnpj && a.PRODUTO_DESCRICAO.Contains(searchString.ToUpper()) || a.PRODUTO_COD_BARRAS.Contains(searchString) orderby a.PRODUTO_DESCRICAO select a).ToList();

        //        ViewBag.Quantidade = trib.Count();
        //    }
        //    else
        //    {
        //        if (!String.IsNullOrEmpty(procuraBarras))
        //        {

        //            trib = trib.Where(s => s.CNPJ_EMPRESA == usuario.empresa.cnpj && s.PRODUTO_COD_BARRAS.Contains(procuraBarras));
        //            trib = trib.OrderBy(s => s.Id_Produto_INTERNO);


        //        }
        //        else
        //        {
        //            if (!String.IsNullOrEmpty(procuraNCM))
        //            {
        //                trib = trib.Where(s => s.CNPJ_EMPRESA == usuario.empresa.cnpj && s.PRODUTO_NCM.Contains(procuraNCM));
        //                trib = trib.OrderBy(s => s.Id_Produto_INTERNO);
        //            }
        //            else
        //            {
        //                if (!String.IsNullOrEmpty(procuraCEST))
        //                {
        //                    trib = trib.Where(s => s.CNPJ_EMPRESA == usuario.empresa.cnpj && s.PRODUTO_CEST.Contains(procuraCEST));
        //                    trib = trib.OrderBy(s => s.Id_Produto_INTERNO);
        //                }
        //                else
        //                {
        //                    trib = trib.Where(s => s.CNPJ_EMPRESA == usuario.empresa.cnpj);
        //                    trib = trib.OrderBy(s => s.Id_Produto_INTERNO);
        //                }
        //            }


        //        }


        //    }


        //    int pageSize = 0;

        //    if (String.IsNullOrEmpty(LinhasNum))
        //    {
        //        pageSize = 5;
        //    }
        //    else
        //    {

        //        ViewBag.Texto = LinhasNum;
        //        pageSize = Int32.Parse(LinhasNum);
        //    }

        //    int pageNumber = (page ?? 1);

        //    return View(trib.ToPagedList(pageNumber, pageSize)); //retorna a view com o numero de paginas e tamanho

        //}



        [HttpGet]
        public ActionResult TabelaProdutoSN(string ordenacao, int? filtroSelect, int? page, int? numeroLinhas, int? parFiltro = 3, string filtroDados = "")
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            /*mensgem topo card*/
            ViewBag.Mensagem = "Produto Geral Cliente x MTX";


            /*Pegando o usuario e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            //Criar uma sssion para evitar buscar novamente o usuario e a empresa
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault();//pegou o usuario no banco
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault();//empresa do usuario
                Session["usuarios"] = usuario; //cria sessao unica para o usuario
                Session["empresas"] = empresa; //cria sessao unica para empresa
            }
            else
            {
                this.empresa = (Empresa)Session["empresas"]; //se nao for nula apenas atribui a empresa a sessao salva na condição acima
            }

            //verificar se é simples nacional
            if (!this.empresa.simples_nacional.Equals(1))
            {

                return RedirectToAction("TabelaProduto");

            }

            //numero de linhas? se o parametro numerolinhas vier preenchido ele atualiza a variavel, caso contrario continua em 10 (padrao)
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 5;
            //ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3"; //filtro para mostrar todos os dados
            ViewBag.ParFiltro = (filtroDados != "") ? parFiltro : 3; //filtro para mostrar todos os dados
            ViewBag.DadoFiltrar = (filtroDados != null) ? filtroDados : null;
            ViewBag.FiltroSelect = (filtroSelect != null) ? filtroSelect : 1;

            //ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decrescente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            page = (filtroDados == null) ? 1 : page; //atribui 1 a pagina caso os parametros nao sejam nulos

            //origem e destino


            if (ViewBag.FiltroSelect == 1)
            {


               // VerificaTempDataSN();
                VerificaProdutos();


                //if (TempData["tribkk"] == null)
                //{
                //    this.trib = (from a in db.Analise_Tributaria where a.CNPJ_EMPRESA == this.empresa.cnpj && a.ATIVO.Equals(1) select a).ToList();
                //    TempData["trib"] = this.trib;
                //    TempData.Keep("trib");
                //}
                //else
                //{
                //    this.trib = (List<AnaliseTributaria>)TempData["trib"];
                //    TempData.Keep("trib");
                //}
                //procura diferenciado para tabela de  produto
               // this.analiseSn = ProcuraPorTabelaProdutoSN(filtroDados, parFiltro, this.analiseSn);

                this.trib3 = ProcuraPorTabelaProdutoSNCorrespondente(filtroDados, parFiltro, this.trib3);

                //this.trib = this.trib.Where(s => s.UF_ORIGEM.Equals(this.ufOrigem) && s.UF_DESTINO.Equals(this.ufDestino)).ToList();

                int tamaanhoPagina = 0;

                //ternario para tamanho da pagina
                tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 5) ? ViewBag.numeroLinhas : (int)numeroLinhas);

                //ViewBag.MenssagemGravar = (resultado != null) ? resultado : "";

                int numeroPagina = (page ?? 1);


                return View(this.trib3.ToPagedList(numeroPagina, tamaanhoPagina)); //retorna a view com o numero de paginas e tamanho

            }
            else
            {

                ////<!--Escrever codigo para produtos não encontrados na tabela -->
                return RedirectToAction("TabelaProduto2", new { filtroSelect = 2 });
            }



        }



        [HttpGet]
        public ActionResult TabelaProduto(string ordenacao,  int? filtroSelect, int? page, int? numeroLinhas, int? parFiltro=3, string filtroDados = "")
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            /*mensgem topo card*/
            ViewBag.Mensagem = "Produto Geral Cliente x MTX";

                     
            /*Pegando o usuario e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            //Criar uma sssion para evitar buscar novamente o usuario e a empresa
            if(Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault();//pegou o usuario no banco
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault();//empresa do usuario
                Session["usuarios"] = usuario; //cria sessao unica para o usuario
                Session["empresas"] = empresa; //cria sessao unica para empresa
            }
            else
            {
                this.empresa = (Empresa)Session["empresas"]; //se nao for nula apenas atribui a empresa a sessao salva na condição acima
            }

            //verificar se é simples nacional
            if (this.empresa.simples_nacional.Equals(1)) {

                return RedirectToAction("TabelaProdutoSN");

            }



                //numero de linhas? se o parametro numerolinhas vier preenchido ele atualiza a variavel, caso contrario continua em 10 (padrao)
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 5;
            //ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3"; //filtro para mostrar todos os dados
            ViewBag.ParFiltro = (filtroDados != "") ? parFiltro : 3; //filtro para mostrar todos os dados
            ViewBag.DadoFiltrar = (filtroDados != null) ? filtroDados : null;
            ViewBag.FiltroSelect = (filtroSelect != null)? filtroSelect: 1;

            //ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decrescente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            page = (filtroDados == null) ? 1 : page; //atribui 1 a pagina caso os parametros nao sejam nulos

            //origem e destino

           
            if (ViewBag.FiltroSelect == 1)
            {


                VerificaTempData();


                    //if (TempData["tribkk"] == null)
                    //{
                    //    this.trib = (from a in db.Analise_Tributaria where a.CNPJ_EMPRESA == this.empresa.cnpj && a.ATIVO.Equals(1) select a).ToList();
                    //    TempData["trib"] = this.trib;
                    //    TempData.Keep("trib");
                    //}
                    //else
                    //{
                    //    this.trib = (List<AnaliseTributaria>)TempData["trib"];
                    //    TempData.Keep("trib");
                    //}
                    //procura diferenciado para tabela de  produto
                this.analise = ProcuraPorTabelaProduto(filtroDados, parFiltro, this.analise);


                    //this.trib = this.trib.Where(s => s.UF_ORIGEM.Equals(this.ufOrigem) && s.UF_DESTINO.Equals(this.ufDestino)).ToList();

                    int tamaanhoPagina = 0;

                    //ternario para tamanho da pagina
                    tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 5) ? ViewBag.numeroLinhas : (int)numeroLinhas);

                    //ViewBag.MenssagemGravar = (resultado != null) ? resultado : "";

                    int numeroPagina = (page ?? 1);


                    return View(this.analise.ToPagedList(numeroPagina, tamaanhoPagina)); //retorna a view com o numero de paginas e tamanho


                

                

            }
            else
            {

                ////<!--Escrever codigo para produtos não encontrados na tabela -->
               
                return RedirectToAction("TabelaProduto2", new { filtroSelect = 2 });
            }

           

        }

        /*Action responsavel por mostrar os produtos importados mas que não há correspondecia com produtos
         dentro da matriz MTX*/
        [HttpGet]
        public ActionResult TabelaProduto2(string opcao, string ordenacao, int? filtroSelect, int? page, int? numeroLinhas, int? parFiltro = 3, string filtroDados = "")
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            /*mensgem topo card*/
            ViewBag.Mensagem = "Produto Geral Cliente x MTX";

            ///*Variavel auxiliar para alguma alteração*/
            //string resultado = param;

            /*Pegando o usuario e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            //Criar uma sssion para evitar buscar novamente o usuario e a empresa
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault();//pegou o usuario no banco
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault();//empresa do usuario
                Session["usuarios"] = usuario; //cria sessao unica para o usuario
                Session["empresas"] = empresa; //cria sessao unica para empresa
            }
            else
            {
                this.empresa = (Empresa)Session["empresas"]; //se nao for nula apenas atribui a empresa a sessao salva na condição acima
            }


            //numero de linhas? se o parametro numerolinhas vier preenchido ele atualiza a variavel, caso contrario continua em 10 (padrao)
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 5;
            //ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3"; //filtro para mostrar todos os dados
            ViewBag.ParFiltro = (filtroDados != "") ? parFiltro : 3; //filtro para mostrar todos os dados
            ViewBag.DadoFiltrar = (filtroDados != null) ? filtroDados : null;

            



            

            if (opcao == "Não Correspondente")
            {
                ViewBag.FiltroSelect = 2;
            }
            else
            {
                ViewBag.FiltroSelect = (filtroSelect != null) ? filtroSelect : 1;
            }

            //ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decrescente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            page = (filtroDados == null) ? 1 : page; //atribui 1 a pagina caso os parametros nao sejam nulos


            if (ViewBag.FiltroSelect == 2)
            {
                this.trib2 = (from a in db.Analise_Tributaria_2 where a.CNPJ_EMPRESA == this.empresa.cnpj && a.ATIVO.Equals(1) select a).ToList();

                //procura diferenciado para tabela de  produto
                trib2 = ProcuraPorTabelaProduto2(filtroDados, parFiltro, trib2);


                int tamaanhoPagina = 0;

                //ternario para tamanho da pagina
                tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 5) ? ViewBag.numeroLinhas : (int)numeroLinhas);

                //ViewBag.MenssagemGravar = (resultado != null) ? resultado : "";

                int numeroPagina = (page ?? 1);


                return View(trib2.ToPagedList(numeroPagina, tamaanhoPagina)); //retorna a view com o numero de paginas e tamanho

            }
            else
            {

               
                return RedirectToAction("TabelaProduto");
            }

        }

        //Para Simples Nacional
        
        [HttpGet]
        public ActionResult EditClienteProdMassaSN(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            /*Mensagem do head do card*/
            ViewBag.Mensagem = "Descrição do produto no Cliente X Descrição do Produto no MTX";

            /*Variavel auxiliar para retornar o resulado da alteração*/
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            //vai criar uma session para evitar buscar novamente o usuario e a empresa
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else
            {
                this.empresa = (Empresa)Session["empresas"];
            }


            if (!this.empresa.simples_nacional.Equals(1))
            {

                return RedirectToAction("EditClienteProdMassa",  new { opcao = opcao, page = page });
            }



            //se o filtro corrente estiver nulo ele busca pelo parametro procurar por
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;
            ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3"; //filtro parametro 3 para mostrar ambos

            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao == null ? "Produto_desc" : ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;//atribui 1 a pagina caso os parametreos nao sejam nulos

            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;

            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //viewbag
            ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM;

            //VerificaTempDataSN();
            VerificaProdutos();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            //ViewBag para guardar a opção
            ViewBag.Opcao = opcao;

            switch (opcao)
            {
                case "Descrição igual":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1"; //1=IGUAIS
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_DESCRICAO == a.Descricao_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_DESCRICAO != a.Descricao_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_DESCRICAO == "" || a.PRODUTO_DESCRICAO == null && a.Descricao_INTERNO != "" || a.Descricao_INTERNO != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }//fim swithce filtro
                    break;
                case "Descrição diferente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2"; //2=DIFERENTES
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_DESCRICAO == a.Descricao_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_DESCRICAO != a.Descricao_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_DESCRICAO == "" || a.PRODUTO_DESCRICAO == null && a.Descricao_INTERNO != "" || a.Descricao_INTERNO != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }//fim swithce filtro
                    break;
                case "Descrição nula":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3"; //3=NULOS
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_DESCRICAO == a.Descricao_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_DESCRICAO != a.Descricao_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_DESCRICAO == "" || a.PRODUTO_DESCRICAO == null && a.Descricao_INTERNO != "" || a.Descricao_INTERNO != null  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }//fim swithce filtro
                    break;





            }//fim switch
            //Action para procurar
            this.trib3 = ProcuraPorCorrespondentes(codBarrasL, procuraPor, procuraCEST, procuraNCM, trib3);


            switch (ViewBag.Ordenacao)
            {
                case "Produto_desc":
                    this.trib3 = this.trib3.OrderBy(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.trib3 = this.trib3.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }


            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";


            //mandar a opção para que o javascript veja
            ViewBag.Opcao = opcao;

            int numeroPagina = (page ?? 1);


            return View(this.trib3.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada

        }


        //Alteração em massa produto: - Descrição
        [HttpGet]
        public ActionResult EditClienteProdMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            /*Mensagem do head do card*/
            ViewBag.Mensagem = "Descrição do produto no Cliente X Descrição do Produto no MTX";

            /*Variavel auxiliar para retornar o resulado da alteração*/
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            //vai criar uma session para evitar buscar novamente o usuario e a empresa
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else
            {
                this.empresa = (Empresa)Session["empresas"];
            }


            if (this.empresa.simples_nacional.Equals(1))
            {
                
                return RedirectToAction("EditClienteProdMassaSN", new { opcao = opcao, page });
            }



            //se o filtro corrente estiver nulo ele busca pelo parametro procurar por
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;
            ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3"; //filtro parametro 3 para mostrar ambos

            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao == null ? "Produto_desc":ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;//atribui 1 a pagina caso os parametreos nao sejam nulos

            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;

            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //viewbag
            ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM;

            //VerificaTempData();
            VerificaProdutos();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            //ViewBag para guardar a opção
            ViewBag.Opcao = opcao;

            switch (opcao)
            {
                case "Descrição igual":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1"; //1=IGUAIS
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_COD_BARRAS == a.Cod_Barras_INTERNO && a.PRODUTO_DESCRICAO == a.Descricao_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_COD_BARRAS == a.Cod_Barras_INTERNO && a.PRODUTO_DESCRICAO != a.Descricao_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_COD_BARRAS == a.Cod_Barras_INTERNO && a.PRODUTO_DESCRICAO == "" || a.PRODUTO_DESCRICAO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }//fim swithce filtro
                    break;
                case "Descrição diferente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2"; //2=DIFERENTES
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_COD_BARRAS == a.Cod_Barras_INTERNO && a.PRODUTO_DESCRICAO == a.Descricao_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_COD_BARRAS == a.Cod_Barras_INTERNO && a.PRODUTO_DESCRICAO != a.Descricao_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_COD_BARRAS == a.Cod_Barras_INTERNO && a.PRODUTO_DESCRICAO == "" || a.PRODUTO_DESCRICAO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }//fim swithce filtro
                    break;
                case "Descrição nula":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3"; //3=NULOS
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_COD_BARRAS == a.Cod_Barras_INTERNO && a.PRODUTO_DESCRICAO == a.Descricao_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_COD_BARRAS == a.Cod_Barras_INTERNO && a.PRODUTO_DESCRICAO != a.Descricao_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_COD_BARRAS == a.Cod_Barras_INTERNO && a.PRODUTO_DESCRICAO == "" || a.PRODUTO_DESCRICAO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }//fim swithce filtro
                    break;
                




            }//fim switch
            //Action para procurar
            //analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);
            this.trib3 = ProcuraPorCorrespondentes(codBarrasL, procuraPor, procuraCEST, procuraNCM, trib3);



            switch (ViewBag.Ordenacao)
            {
                case "Produto_desc":
                    this.trib3 = this.trib3.OrderBy(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.trib3 = this.trib3.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }


            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            int numeroPagina = (page ?? 1);


            return View(this.trib3.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada

        }

        [HttpGet]
        public ActionResult EditClienteProdMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }

            this.empresa = (Empresa)Session["empresas"]; //se nao for nula basta carregar a empresa

            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();

            //registros salvos
            int regSalv = 0;
            int regNsalv = 0;

            string descCliente = "";
            string descMtx = "";

            try
            {
                for (int i = 0; i < idTrib.Length; i++)
                {
                    //converter em inteiro
                    int idTrb = int.Parse(idTrib[i]);

                    //faz a busca no objeto criado instanciando um so objeto
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                    //AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS && a.CNPJ_EMPRESA.Equals(this.empresa.cnpj) && a.ATIVO.Equals(1) select a).FirstOrDefault();
                    AnaliseTributaria3 analise = (from a in db.Analise_Tributaria_3 where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS && a.CNPJ_EMPRESA.Equals(this.empresa.cnpj) && a.ATIVO.Equals(1) select a).FirstOrDefault();

                    descCliente = (analise.PRODUTO_DESCRICAO==null)? descCliente: analise.PRODUTO_DESCRICAO.ToString();
                    descMtx=(analise.Descricao_INTERNO == null)? descMtx : analise.Descricao_INTERNO.ToString();
                    
                    if(descCliente == descMtx)
                    {
                        regNsalv++;
                    }
                    else
                    {
                        //atribui o valor procurado na analise ao objeto instanciado
                        trib.PRODUTO_DESCRICAO = analise.Descricao_INTERNO;
                        db.SaveChanges();

                        regSalv++;
                    }
                }
                TempData["analise"] = null;
                TempData["analise2"] = null;
                resultado = "Registro Salvo com Sucesso!!";
            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro : " + e.ToString();
            }

            
            //Redirecionar para a tela de graficos
            return RedirectToAction("EditClienteProdMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });
        }

        [HttpGet]
        public ActionResult EditClienteProdMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;
            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();
            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                //faz a busca no objeto criado instanciando um so objeto
                //trib = db.TributacaoEmpresas.Find(idTrb);

                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }

            return View(trib);
        }

        [HttpGet]
        public ActionResult EditClienteProdMassaManualModalPost(string strDados, string descProdClienteManual)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }

            

            //separar a String em um array
            string[] idTrib = strDados.Split(',');
            string resultado = "";
            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();
            int regSalvos = 0;
            
            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.PRODUTO_DESCRICAO = (descProdClienteManual != "") ? trib.PRODUTO_DESCRICAO = descProdClienteManual : null;

                    db.SaveChanges();
                    regSalvos++;

                }

                TempData["analise"] = null;
                TempData["analise2"] = null;
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }


            //Redirecionar para a tela de graficos
            return RedirectToAction("EditClienteProdMassa", new { param = resultado, qtdSalvos = regSalvos });
           
        }





        //alteração de todos os itens
        [HttpGet]
        public ActionResult EditClienteProdMassaSNTODOS(string opcao)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            string ufOrigem = TempData["UfOrigem"].ToString();
            string ufDestino = TempData["UfDestino"].ToString();

            VerificaProdutos();
            TributacaoEmpresa trib = new TributacaoEmpresa();

            if (opcao == "Descrição diferente")
            {
                this.trib3 = this.trib3.Where(a => a.PRODUTO_DESCRICAO != a.Descricao_INTERNO && a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }
            if (opcao == "Descrição nula")
            {
                this.trib3 = this.trib3.Where(a => a.PRODUTO_DESCRICAO == "" || a.PRODUTO_DESCRICAO == null && a.Descricao_INTERNO != "" || a.Descricao_INTERNO!= null && a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }

            int teste = this.trib3.Count(); //verificar a quantidade de registros

            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            string resultado = ""; //variavel auxiliar;
            //pega todos os ID para serem alterados
            //this.analiseSn.Count()
            for (int i = 0; i < this.trib3.Count(); i++)
            {

                //converter em inteiro
                int? idTrb = (this.trib3[i].TE_ID);
                trib = db.TributacaoEmpresas.Find(idTrb);//busca o registro
                trib.PRODUTO_DESCRICAO = this.trib3[i].Descricao_INTERNO.ToString();

                try
                {

                    db.SaveChanges();
                    regSalv++; //contagem de registros salvos

                }
                catch (Exception e)
                {
                    resultado = "Problemas ao salvar o registro: " + e.ToString();
                    regNsalv++;
                }

            }
            resultado = "Registro Salvo com Sucesso!!";


            TempData["analise"] = null;
            TempData["analise2"] = null;
            //string[] idTrib = this.alanliseSN.
            //a analise vai me dar todos os ids


            return RedirectToAction("EditClienteProdMassaSN", new { param = resultado, qtdSalvos = regSalv, opcao = opcao });
        }


       

        //Alteração em massa produto: NCM
        [HttpGet]
        public ActionResult EditClienteNcmMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            /*Mensagem do head do card*/
            ViewBag.Mensagem = "NCM no Cliente X NCM no MTX"; 

            /*Variavel auxiliar para retornar o resulado da alteração*/
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            //vai criar uma session para evitar buscar novamente o usuario e a empresa
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurar por
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
           // ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;

            if(numeroLinhas != null)
            {
                TempData["linhas"] = numeroLinhas;
                TempData.Keep("linhas");
                ViewBag.NumeroLinhas = numeroLinhas;
            }
            else
            {
                if (TempData["linhas"] == null)
                {
                    TempData["linhas"] = 10;
                    TempData.Keep("linhas");
                    ViewBag.NumeroLinhas = 10;
                }
                else
                {
                    ViewBag.NumeroLinhas = TempData["linhas"];
                }
            }

            

            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao == null? "Produto_desc" : ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/

            if (filtroNulo != null)
            {
                switch (filtroNulo)
                {
                    case "1":
                        TempData["opcao"] = "NCM Iguais";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "2":
                        TempData["opcao"] = "NCM Diferentes";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "3":
                        TempData["opcao"] = "NCM Nulo Ambos";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "4":
                        TempData["opcao"] = "NCM Nulo MTX";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "5":
                        TempData["opcao"] = "NCM Nulo Cliente";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;

                }
            }
            else
            {

                TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
                opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                                                                               //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
                TempData.Keep("opcao");
            }


            

            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;//atribui 1 a pagina caso os parametreos nao sejam nulos

            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;

            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //viewbag
            ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM;

            //VerificaTempData();
            VerificaProdutos();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            //ViewBag para guardar a opção
            ViewBag.Opcao = opcao;


            switch (opcao)
            {
                case "NCM Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1"; //1=IGUAIS
                    switch (ViewBag.Filtro)
                    {
                        case "1": //IGUAIS
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_NCM == a.NCM_INTERNO && a.PRODUTO_NCM != null && a.NCM_INTERNO != null).ToList();
                           
                            break;
                        case "2": //DIFERENTES
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_NCM != a.NCM_INTERNO && a.PRODUTO_NCM != null && a.NCM_INTERNO != null).ToList();

                            break;
                        case "3": //NULO EM AMBOS
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_NCM == null && a.NCM_INTERNO == null).ToList();
                        
                            break;
                        case "4": //NULO NO MTX
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_NCM != null && a.NCM_INTERNO == null).ToList();
                          
                            break;
                        case "5": //NULO NO CLIENTE
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_NCM == null && a.NCM_INTERNO != null).ToList();
                           
                            break;
                    }//fim swithce filtro
                    break;
                case "NCM Diferentes":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2"; //2=DIFERENTES
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_NCM == a.NCM_INTERNO && a.PRODUTO_NCM != null && a.NCM_INTERNO != null).ToList();

                            break;
                        case "2":
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_NCM != a.NCM_INTERNO && a.PRODUTO_NCM != null && a.NCM_INTERNO != null).ToList();

                            break;
                        case "3": //NULO EM AMBOS
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_NCM == null && a.NCM_INTERNO == null).ToList();

                            break;
                        case "4": //NULO NO MTX
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_NCM != null && a.NCM_INTERNO == null).ToList();

                            break;
                        case "5": //NULO NO CLIENTE
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_NCM == null && a.NCM_INTERNO != null).ToList();

                            break;
                    }//fim swithce filtro
                    break;
                case "NCM Nulo Ambos":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3"; //3=NULO EM AMBOS
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_NCM == a.NCM_INTERNO && a.PRODUTO_NCM != null && a.NCM_INTERNO != null).ToList();

                            break;
                        case "2":
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_NCM != a.NCM_INTERNO && a.PRODUTO_NCM != null && a.NCM_INTERNO != null).ToList();

                            break;
                        case "3": //NULO EM AMBOS
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_NCM == null && a.NCM_INTERNO == null).ToList();

                            break;
                        case "4": //NULO NO MTX
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_NCM != null && a.NCM_INTERNO == null).ToList();

                            break;
                        case "5": //NULO NO CLIENTE
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_NCM == null && a.NCM_INTERNO != null).ToList();

                            break;
                    }//fim swithce filtro
                    break;
                case "NCM Nulo MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4"; //4=NULO NO MTX
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_NCM == a.NCM_INTERNO && a.PRODUTO_NCM != null && a.NCM_INTERNO != null).ToList();
                            break;
                        case "2":
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_NCM != a.NCM_INTERNO && a.PRODUTO_NCM != null && a.NCM_INTERNO != null).ToList();

                            break;
                        case "3": //NULO EM AMBOS
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_NCM == null && a.NCM_INTERNO == null).ToList();

                            break;
                        case "4": //NULO NO MTX
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_NCM != null && a.NCM_INTERNO == null).ToList();

                            break;
                        case "5": //NULO NO CLIENTE
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_NCM == null && a.NCM_INTERNO != null).ToList();

                            break;
                    }//fim swithce filtro
                    break;
                case "NCM Nulo Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5"; //5=NULO NO cliente
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_NCM == a.NCM_INTERNO && a.PRODUTO_NCM != null && a.NCM_INTERNO != null).ToList();
                            break;
                        case "2":
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_NCM != a.NCM_INTERNO && a.PRODUTO_NCM != null && a.NCM_INTERNO != null).ToList();

                            break;
                        case "3": //NULO EM AMBOS
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_NCM == null && a.NCM_INTERNO == null).ToList();

                            break;
                        case "4": //NULO NO MTX
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_NCM != null && a.NCM_INTERNO == null).ToList();

                            break;
                        case "5": //NULO NO CLIENTE
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_NCM == null && a.NCM_INTERNO != null).ToList();

                            break;
                    }//fim swithce filtro
                    break;


            }//fim switch


            //Action para procurar
            //analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);
            this.trib3 = ProcuraPorCorrespondentes(codBarrasL, procuraPor, procuraCEST, procuraNCM, trib3);

            switch (ViewBag.Ordenacao)
            {
                case "Produto_desc":
                    this.trib3 = this.trib3.OrderBy(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.trib3 = this.trib3.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }


            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";


            //mandar a opção para que o javascript veja
            ViewBag.Opcao = opcao;

            int numeroPagina = (page ?? 1);


            return View(this.trib3.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada



        }

        [HttpGet]
        public ActionResult EditClienteNcmMassaModal(string strDados)
        {

            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"]; //se nao for nula basta carregar a empresa

            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();

            //registros salvos
            int regSalv = 0;
            int regNsalv = 0;
            string ncmCliente = "";
            string ncmMtx = "";


            try
            {
                for (int i = 0; i < idTrib.Length; i++)
                {
                    //converter em inteiro
                    int idTrb = int.Parse(idTrib[i]);

                    //faz a busca no objeto criado instanciando um so objeto
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                    //AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS && a.CNPJ_EMPRESA.Equals(this.empresa.cnpj) && a.ATIVO.Equals(1)  select a).FirstOrDefault();
                    AnaliseTributaria3 analise = (from a in db.Analise_Tributaria_3 where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS && a.CNPJ_EMPRESA.Equals(this.empresa.cnpj) && a.ATIVO.Equals(1) select a).FirstOrDefault();
                    
                    ncmCliente = (analise.PRODUTO_NCM == null) ? ncmCliente : analise.PRODUTO_NCM.ToString();
                    
                    ncmMtx = (analise.NCM_INTERNO == null)?ncmMtx: analise.NCM_INTERNO.ToString();
               

                    if (ncmCliente == ncmMtx)
                    {
                        regNsalv++;
                    }
                    else
                    {
                        //atribui o valor procurado na analise ao objeto instanciado
                        trib.PRODUTO_NCM = analise.NCM_INTERNO;
                        db.SaveChanges();
                        regSalv++;
                    }
                }
                TempData["analise"] = null;
                TempData["analise2"] = null;
                TempData["analiseSN"] = null;
                resultado = "Registro Salvo com Sucesso!!";
            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro : " + e.ToString();
            }


            //Redirecionar para a tela de graficos
            return RedirectToAction("EditClienteNcmMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });
        }

        [HttpGet]
        public ActionResult EditClienteNcmMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;
            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();
            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                //faz a busca no objeto criado instanciando um so objeto
                //trib = db.TributacaoEmpresas.Find(idTrb);

                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }

            return View(trib);
        }

        [HttpGet]
        public ActionResult EditClienteNcmMassaManualModalPost(string strDados, string ncmClienteManual)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }

            //trocando o ponto por virgula
            //cestClienteManual = cestClienteManual.Replace(".", ",");

            //separar a String em um array
            string[] idTrib = strDados.Split(',');
            string resultado = "";
            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();
            int regSalvos = 0;


            ncmClienteManual = ncmClienteManual.Replace(".", "");

            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.PRODUTO_NCM = (ncmClienteManual != "") ? trib.PRODUTO_NCM = ncmClienteManual : null;
                    try
                    {
                        db.SaveChanges();
                        regSalvos++;
                       
                    }
                    catch (Exception e)
                    {
                        resultado = "Problemas ao salvar o registro: " + e.ToString();
                    }

                }

                TempData["analise"] = null;
                TempData["analise2"] = null;
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }


            //Redirecionar para a tela de graficos
            return RedirectToAction("EditClienteNcmMassa", new { param = resultado, qtdSalvos = regSalvos });
        }


        //alteração de todos os itens
        [HttpGet]
        public ActionResult EditClienteNcmMassaTODOS(string opcao)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            string ufOrigem = TempData["UfOrigem"].ToString();
            string ufDestino = TempData["UfDestino"].ToString();

            VerificaProdutos();
            TributacaoEmpresa trib = new TributacaoEmpresa();

            if (opcao == "NCM Diferentes")
            {
                this.trib3 = this.trib3.Where(a => a.PRODUTO_NCM != a.NCM_INTERNO && a.PRODUTO_NCM != null && a.NCM_INTERNO != null).ToList();

            }
            if (opcao == "NCM Nulo Cliente")
            {
                this.trib3 = this.trib3.Where(a => a.PRODUTO_NCM == null && a.NCM_INTERNO != null).ToList();
             

            }

            int teste = this.trib3.Count(); //verificar a quantidade de registros

            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            string resultado = ""; //variavel auxiliar;
            //pega todos os ID para serem alterados
            //this.analiseSn.Count()
            for (int i = 0; i < this.trib3.Count(); i++)
            {

                //converter em inteiro
                int? idTrb = (this.trib3[i].TE_ID);
                trib = db.TributacaoEmpresas.Find(idTrb);//busca o registro

               
                trib.PRODUTO_NCM = this.trib3[i].NCM_INTERNO.ToString();

                try
                {

                    db.SaveChanges();
                    regSalv++; //contagem de registros salvos

                }
                catch (Exception e)
                {
                    resultado = "Problemas ao salvar o registro: " + e.ToString();
                    regNsalv++;
                }

            }
            resultado = "Registro Salvo com Sucesso!!";


            TempData["analise"] = null;
            TempData["analise2"] = null;
            //string[] idTrib = this.alanliseSN.
            //a analise vai me dar todos os ids


            return RedirectToAction("EditClienteNcmMassa", new { param = resultado, qtdSalvos = regSalv, opcao = opcao });
        }








        //Alterações em massa produto: CEST
        [HttpGet]
        public ActionResult EditClienteCestMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor,
            string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM,
            string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            ViewBag.Mensagem = "CEST no Cliente X CEST no MTX";

            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else
            {
                this.empresa = (Empresa)Session["empresas"];
            }


            //se o filtro corrente estiver nulo ele busca pelo parametro procurar por
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;
            
            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;
            ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3"; //filtro parametro 3 para mostrar ambos
            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao == null ? "Produto_desc" : ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;//atribui 1 a pagina caso os parametreos nao sejam nulos
            
            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;

            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //viewbag
            ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM;

            //VerificaTempData();
            VerificaProdutos();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;
            //this.analise = (from a in db.Analise_Tributaria where a.CNPJ_EMPRESA == this.empresa.cnpj select a).
            //this.analise = context.Funcionarios.AsNoTracking().ToList();

            /*Alteração feita para teste - 08122021*/
            //this.analise = db.Analise_Tributaria.AsNoTracking().ToList();
            //this.analise = this.analise.Where(a => a.CNPJ_EMPRESA == this.empresa.cnpj).ToList();

            //this.analise = db.Analise_Tributaria.AsNoTracking().ToList();




            ViewBag.Opcao = opcao;


            switch (opcao)
            {
                case "CEST Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";
                    switch (ViewBag.Filtro)
                    {
                        case "1": //iguais fora os nulos
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_CEST == a.Cest_INTERNO && a.PRODUTO_CEST  != null && a.Cest_INTERNO != null).ToList();
                            break;

                        case "2": //diferentes
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_CEST != a.Cest_INTERNO && a.PRODUTO_CEST !=null  && a.Cest_INTERNO != null).ToList();
                            break;

                        case "3": //nulos no cliente
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_CEST == null && a.Cest_INTERNO != null).ToList();
                            break;

                        case "4": //nulo mtx
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_CEST != null && a.Cest_INTERNO == null).ToList();
                            break;

                        case "5":// nulo em ambos
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_CEST == null && a.Cest_INTERNO == null).ToList();
                            break;

                    }//fim swithce filtro
                    break;
                case "CEST Diferentes":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";
                    //analise = this.analise.Where(s => s.PRODUTO_CEST == null || s.PRODUTO_CEST == "0").ToList();
                    switch (ViewBag.Filtro)
                    {
                        case "1": //iguais fora os nulos
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_CEST == a.Cest_INTERNO && a.PRODUTO_CEST != null && a.Cest_INTERNO != null).ToList();
                            break;

                        case "2": //diferentes
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_CEST != a.Cest_INTERNO && a.PRODUTO_CEST != null && a.Cest_INTERNO != null).ToList();
                            break;

                        case "3": //nulos no cliente
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_CEST == null && a.Cest_INTERNO != null).ToList();
                            break;

                        case "4": //nulo mtx
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_CEST != null && a.Cest_INTERNO == null).ToList();
                            break;

                        case "5":// nulo em ambos
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_CEST == null && a.Cest_INTERNO == null).ToList();
                            break;
                    }//fim swithce filtro
                     break;
                case "CEST Nulo Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";
                    switch (ViewBag.Filtro)
                    {
                        case "1": //iguais fora os nulos
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_CEST == a.Cest_INTERNO && a.PRODUTO_CEST != null && a.Cest_INTERNO != null).ToList();
                            break;

                        case "2": //diferentes
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_CEST != a.Cest_INTERNO && a.PRODUTO_CEST != null && a.Cest_INTERNO != null).ToList();
                            break;

                        case "3": //nulos no cliente
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_CEST == null && a.Cest_INTERNO != null).ToList();
                            break;

                        case "4": //nulo mtx
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_CEST != null && a.Cest_INTERNO == null).ToList();
                            break;

                        case "5":// nulo em ambos
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_CEST == null && a.Cest_INTERNO == null).ToList();
                            break;
                    }//fim swithce filtro
                    break;
                case "CEST Nulo MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";
                    switch (ViewBag.Filtro)
                    {
                        case "1": //iguais fora os nulos
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_CEST == a.Cest_INTERNO && a.PRODUTO_CEST != null && a.Cest_INTERNO != null).ToList();
                            break;

                        case "2": //diferentes
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_CEST != a.Cest_INTERNO && a.PRODUTO_CEST != null && a.Cest_INTERNO != null).ToList();
                            break;

                        case "3": //nulos no cliente
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_CEST == null && a.Cest_INTERNO != null).ToList();
                            break;

                        case "4": //nulo mtx
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_CEST != null && a.Cest_INTERNO == null).ToList();
                            break;

                        case "5":// nulo em ambos
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_CEST == null && a.Cest_INTERNO == null).ToList();
                            break;
                    }//fim swithce filtro
                    break;

                case "CEST Nulo Ambos":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";
                    switch (ViewBag.Filtro)
                    {
                        case "1": //iguais fora os nulos
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_CEST == a.Cest_INTERNO && a.PRODUTO_CEST != null && a.Cest_INTERNO != null).ToList();
                            break;

                        case "2": //diferentes
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_CEST != a.Cest_INTERNO && a.PRODUTO_CEST != null && a.Cest_INTERNO != null).ToList();
                            break;

                        case "3": //nulos no cliente
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_CEST == null && a.Cest_INTERNO != null).ToList();
                            break;

                        case "4": //nulo mtx
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_CEST != null && a.Cest_INTERNO == null).ToList();
                            break;

                        case "5":// nulo em ambos
                            this.trib3 = this.trib3.Where(a => a.PRODUTO_CEST == null && a.Cest_INTERNO == null).ToList();
                            break;
                    }//fim swithce filtro
                    break;

            }//fim switch


            //Action para procurar
            // analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);
            this.trib3 = ProcuraPorCorrespondentes(codBarrasL, procuraPor, procuraCEST, procuraNCM, trib3);


            switch (ViewBag.Ordenacao)
            {
                case "Produto_desc":
                    this.trib3 = this.trib3.OrderBy(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.trib3 = this.trib3.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;

            }
            

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagem de retorno quando há alterações
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";


            //mandar a opção para que o javascript veja
            ViewBag.Opcao = opcao;


            //número de páginas
            int numeroPagina = (page ?? 1);

            return View(this.trib3.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
            
        }

        [HttpGet]
        public ActionResult EditClienteCestMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"]; //se nao for nula basta carregar a empresa
            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();

            //registros salvos
            int regSalv = 0;
            int regNsalv = 0;
            string cestCliente = "";
            string cestMTX = "";

            try
            {
                for (int i = 0; i < idTrib.Length; i++)
                {
                    //converter em inteiro
                    int idTrb = int.Parse(idTrib[i]);

                    //faz a busca no objeto criado instanciando um so objeto
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                    AnaliseTributaria analise =     (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS && a.CNPJ_EMPRESA.Equals(this.empresa.cnpj) && a.ATIVO.Equals(1) select a).FirstOrDefault();

                    //se for nullo ele nao aceita atribuir e da erro
                    //string ncmCliente = analise.PRODUTO_CEST.ToString();
                    cestCliente = (analise.PRODUTO_CEST == null)?cestCliente: analise.PRODUTO_CEST.ToString();
                    cestMTX = (analise.Cest_INTERNO == null)?cestMTX: analise.Cest_INTERNO.ToString();
                    //string ncmMtx = analise.Cest_INTERNO.ToString();
                    if (cestCliente == cestMTX)
                    {
                        regNsalv++;
                    }
                    else
                    {
                        //atribui o valor procurado na analise ao objeto instanciado
                        //cestClienteManual = cestClienteManual.Replace(".", ",");
                        trib.PRODUTO_CEST = analise.Cest_INTERNO;
                        db.SaveChanges();
                        regSalv++;
                    }
                }
                TempData["analise"] = null;
                resultado = "Registro Salvo com Sucesso!!";
            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro : " + e.ToString();
            }


            //Redirecionar para a tela de graficos
            return RedirectToAction("EditClienteCestMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });
           

        }
        [HttpGet]
        public ActionResult EditClienteCestMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;
            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();
            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                //faz a busca no objeto criado instanciando um so objeto
                //trib = db.TributacaoEmpresas.Find(idTrb);
               
                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }
           
            return View(trib);
        }

        [HttpGet]
        public ActionResult EditClienteCestMassaManualModalPost(string strDados, string cestClienteManual)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }

            //trocando o ponto por virgula
            //cestClienteManual = cestClienteManual.Replace(".", ",");

            //separar a String em um array
            string[] idTrib = strDados.Split(',');
            string resultado = "";
            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();
            int regSalvos = 0;

            try
            {
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.PRODUTO_CEST = (cestClienteManual != "") ? trib.PRODUTO_CEST = cestClienteManual : null;
                    try
                    {
                        db.SaveChanges();
                        regSalvos++;

                    }
                    catch (Exception e)
                    {
                        resultado = "Problemas ao salvar o registro: " + e.ToString();
                    }
                }
                TempData["analise"] = null;
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch(Exception e)
            {
                string erro = e.ToString();
                resultado = "Problemas ao salvar o registro: " + erro;
            }


           

            //Redirecionar para a tela de graficos
            return RedirectToAction("EditClienteCestMassa", new { param = resultado, qtdSalvos = regSalvos });
        }

        [HttpGet]
        public ActionResult EditClienteCestMassaTODOS(string opcao)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            string ufOrigem = TempData["UfOrigem"].ToString();
            string ufDestino = TempData["UfDestino"].ToString();

            VerificaProdutos();
            TributacaoEmpresa trib = new TributacaoEmpresa();

            if (opcao == "CEST Diferentes")
            {
                this.trib3 = this.trib3.Where(a => a.PRODUTO_CEST != a.Cest_INTERNO && a.PRODUTO_CEST != null && a.Cest_INTERNO != null).ToList();
            }
            if (opcao == "CEST Nulo Cliente")
            {
              
                this.trib3 = this.trib3.Where(a => a.PRODUTO_CEST == null && a.Cest_INTERNO != null).ToList();

            }

            int teste = this.trib3.Count(); //verificar a quantidade de registros

            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            string resultado = ""; //variavel auxiliar;
            //pega todos os ID para serem alterados
            //this.analiseSn.Count()
            for (int i = 0; i < this.trib3.Count(); i++)
            {

                //converter em inteiro
                int? idTrb = (this.trib3[i].TE_ID);
                trib = db.TributacaoEmpresas.Find(idTrb);//busca o registro


                trib.PRODUTO_CEST = this.trib3[i].Cest_INTERNO.ToString();

                try
                {

                    db.SaveChanges();
                    regSalv++; //contagem de registros salvos

                }
                catch (Exception e)
                {
                    resultado = "Problemas ao salvar o registro: " + e.ToString();
                    regNsalv++;
                }

            }
            resultado = "Registro Salvo com Sucesso!!";


            TempData["analise"] = null;
            TempData["analise2"] = null;
            //string[] idTrib = this.alanliseSN.
            //a analise vai me dar todos os ids


            return RedirectToAction("EditClienteCestMassa", new { param = resultado, qtdSalvos = regSalv, opcao = opcao });

        }


        /// <summary>
        /// Edição Venda Varejo consumidor Final
        /// </summary>
        //[HttpGet]
        //public ActionResult EditClienteAliqIcmsVendaVarfCFMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        //{
        //    /*Verificando a sessão*/
        //    if (Session["usuario"] == null)
        //    {
        //        return RedirectToAction("Login", "../Home");
        //    }

        //    //Mensagem do card
        //    ViewBag.Mensagem = "Alíquota ICMS Venda no Varejo para consumidor final no Cliente X  no MTX";

        //    //variavel auxiliar
        //    string resultado = param;

        //    /*Pegando o usuário e a empresa do usuário*/
        //    string user = Session["usuario"].ToString();

        //    /*Inicializando a variavel de sessão usarios caso nao exista*/
        //    if (Session["usuarios"] == null)
        //    {
        //        this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
        //        this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
        //        Session["usuarios"] = usuario;
        //        Session["empresas"] = empresa;
        //    }
        //    else //se existir apenas atribui à empresa
        //    {
        //        this.empresa = (Empresa)Session["empresas"];
        //    }

        //    //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
        //    string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

        //    //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
        //    long codBarrasL = 0; //variavel tipada
        //    bool canConvert = long.TryParse(codBarras, out codBarrasL);

        //    //verifica se veio parametros
        //    procuraCEST = (procuraCEST != null) ? procuraCEST : null;
        //    procuraNCM = (procuraNCM != null) ? procuraNCM : null;

        //    //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
        //    ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;


        //    //parametro de ordenacao da tabela
        //    ViewBag.Ordenacao = ordenacao;

        //    //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
        //    ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

        //    /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
        //    TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
        //    opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

        //    //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
        //    TempData.Keep("opcao");

        //    //atribui 1 a pagina caso os parametreos nao sejam nulos
        //    page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


        //    //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
        //    procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
        //    procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
        //    procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


        //    /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
        //    //ViewBag.FiltroCorrente = procuraPor;
        //    ViewBag.FiltroCorrenteCest = procuraCEST;
        //    ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
        //    ViewBag.FiltroCorrente = procuraPor;



        //    //origem e destino

        //    //montar select estado origem e destino
        //    ViewBag.EstadosOrigem = db.Estados.ToList();
        //    ViewBag.EstadosDestinos = db.Estados.ToList();


        //    //verifica estados origem e destino
        //    VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


        //    //aplica estado origem e destino
        //    ViewBag.UfOrigem = this.ufOrigem;
        //    ViewBag.UfDestino = this.ufDestino;


        //    if (this.empresa.simples_nacional.Equals(1))
        //    {
        //        return RedirectToAction("EditClienteAliqIcmsVendaVarfCFMassaSn", new { opcao = opcao});

        //    }
        //    VerificaTempData();
        //        /*Switch da opção*/
        //        switch (opcao)
        //        {
        //            case "Maiores":
        //                //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
        //                ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

        //                switch (ViewBag.Filtro)
        //                {
        //                    case "1":
        //                        this.lstAnalise = this.lstAnalise.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL > a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.UF_Origem_INTERNO.Equals(this.ufOrigem) && a.UF_Destino_INTERNO.Equals(this.ufDestino));
        //                    break;
        //                    case "2":
        //                        this.lstAnalise = this.lstAnalise.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL < a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.UF_Origem_INTERNO.Equals(this.ufOrigem) && a.UF_Destino_INTERNO.Equals(this.ufDestino));
        //                    break;
        //                    case "3":
        //                        this.lstAnalise = this.lstAnalise.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.UF_Origem_INTERNO.Equals(this.ufOrigem) && a.UF_Destino_INTERNO.Equals(this.ufDestino));
        //                    break;
        //                    case "4":
        //                        this.lstAnalise = this.lstAnalise.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.UF_Origem_INTERNO.Equals(this.ufOrigem) && a.UF_Destino_INTERNO.Equals(this.ufDestino));
        //                    break;
        //                    case "5":
        //                        this.lstAnalise = this.lstAnalise.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.UF_Origem_INTERNO.Equals(this.ufOrigem) && a.UF_Destino_INTERNO.Equals(this.ufDestino));
        //                    break;

        //                }
        //                break;
        //            case "Menores":
        //                //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
        //                ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

        //                switch (ViewBag.Filtro)
        //                {
        //                case "1":
        //                    this.lstAnalise = this.lstAnalise.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL > a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.UF_Origem_INTERNO.Equals(this.ufOrigem) && a.UF_Destino_INTERNO.Equals(this.ufDestino));
        //                    break;
        //                case "2":
        //                    this.lstAnalise = this.lstAnalise.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL < a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.UF_Origem_INTERNO.Equals(this.ufOrigem) && a.UF_Destino_INTERNO.Equals(this.ufDestino));
        //                    break;
        //                case "3":
        //                    this.lstAnalise = this.lstAnalise.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.UF_Origem_INTERNO.Equals(this.ufOrigem) && a.UF_Destino_INTERNO.Equals(this.ufDestino));
        //                    break;
        //                case "4":
        //                    this.lstAnalise = this.lstAnalise.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.UF_Origem_INTERNO.Equals(this.ufOrigem) && a.UF_Destino_INTERNO.Equals(this.ufDestino));
        //                    break;
        //                case "5":
        //                    this.lstAnalise = this.lstAnalise.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.UF_Origem_INTERNO.Equals(this.ufOrigem) && a.UF_Destino_INTERNO.Equals(this.ufDestino));
        //                    break;
        //            }
        //                break;
        //            case "Iguais":
        //                //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
        //                ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

        //                switch (ViewBag.Filtro)
        //                {
        //                case "1":
        //                    this.lstAnalise = this.lstAnalise.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL > a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.UF_Origem_INTERNO.Equals(this.ufOrigem) && a.UF_Destino_INTERNO.Equals(this.ufDestino));
        //                    break;
        //                case "2":
        //                    this.lstAnalise = this.lstAnalise.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL < a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.UF_Origem_INTERNO.Equals(this.ufOrigem) && a.UF_Destino_INTERNO.Equals(this.ufDestino));
        //                    break;
        //                case "3":
        //                    this.lstAnalise = this.lstAnalise.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.UF_Origem_INTERNO.Equals(this.ufOrigem) && a.UF_Destino_INTERNO.Equals(this.ufDestino));
        //                    break;
        //                case "4":
        //                    this.lstAnalise = this.lstAnalise.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.UF_Origem_INTERNO.Equals(this.ufOrigem) && a.UF_Destino_INTERNO.Equals(this.ufDestino));
        //                    break;
        //                case "5":
        //                    this.lstAnalise = this.lstAnalise.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.UF_Origem_INTERNO.Equals(this.ufOrigem) && a.UF_Destino_INTERNO.Equals(this.ufDestino));
        //                    break;
        //            }
        //                break;
        //            case "Nulas Cliente":
        //                //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
        //                ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";


        //                switch (ViewBag.Filtro)
        //                {
        //                case "1":
        //                    this.lstAnalise = this.lstAnalise.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL > a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.UF_Origem_INTERNO.Equals(this.ufOrigem) && a.UF_Destino_INTERNO.Equals(this.ufDestino));
        //                    break;
        //                case "2":
        //                    this.lstAnalise = this.lstAnalise.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL < a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.UF_Origem_INTERNO.Equals(this.ufOrigem) && a.UF_Destino_INTERNO.Equals(this.ufDestino));
        //                    break;
        //                case "3":
        //                    this.lstAnalise = this.lstAnalise.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.UF_Origem_INTERNO.Equals(this.ufOrigem) && a.UF_Destino_INTERNO.Equals(this.ufDestino));
        //                    break;
        //                case "4":
        //                    this.lstAnalise = this.lstAnalise.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.UF_Origem_INTERNO.Equals(this.ufOrigem) && a.UF_Destino_INTERNO.Equals(this.ufDestino));
        //                    break;
        //                case "5":
        //                    this.lstAnalise = this.lstAnalise.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.UF_Origem_INTERNO.Equals(this.ufOrigem) && a.UF_Destino_INTERNO.Equals(this.ufDestino));
        //                    break;

        //            }
        //                break;
        //            case "Nulas MTX":
        //                //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
        //                ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

        //                switch (ViewBag.Filtro)
        //                {
        //                case "1":
        //                    this.lstAnalise = this.lstAnalise.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL > a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.UF_Origem_INTERNO.Equals(this.ufOrigem) && a.UF_Destino_INTERNO.Equals(this.ufDestino));

        //                    this.lstAnalise = this.lstAnalise.OrderBy(a => a.Id_Produto_INTERNO);


        //                    break;
        //                case "2":
        //                    this.lstAnalise = this.lstAnalise.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL < a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.UF_Origem_INTERNO.Equals(this.ufOrigem) && a.UF_Destino_INTERNO.Equals(this.ufDestino));
        //                    this.lstAnalise = this.lstAnalise.OrderBy(a => a.Id_Produto_INTERNO);
        //                    break;
        //                case "3":
        //                    this.lstAnalise = this.lstAnalise.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.UF_Origem_INTERNO.Equals(this.ufOrigem) && a.UF_Destino_INTERNO.Equals(this.ufDestino));
        //                    this.lstAnalise = this.lstAnalise.OrderBy(a => a.Id_Produto_INTERNO);
        //                    break;
        //                case "4":
        //                    this.lstAnalise = this.lstAnalise.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.UF_Origem_INTERNO.Equals(this.ufOrigem) && a.UF_Destino_INTERNO.Equals(this.ufDestino));
        //                    this.lstAnalise = this.lstAnalise.OrderBy(a => a.Id_Produto_INTERNO);
        //                    break;
        //                case "5":
        //                    this.lstAnalise = this.lstAnalise.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.UF_Origem_INTERNO.Equals(this.ufOrigem) && a.UF_Destino_INTERNO.Equals(this.ufDestino));
        //                    this.lstAnalise = this.lstAnalise.OrderBy(a => a.Id_Produto_INTERNO);
        //                    break;

        //            }
        //                break;


        //        }//fim do switche

        //        //Action para procurar
        //        this.lstAnalise = ProcuraPorII(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.lstAnalise);

        //        switch (ordenacao)
        //        {
        //            case "Produto_desc":
        //                this.lstAnalise = this.lstAnalise.OrderByDescending(s => s.PRODUTO_DESCRICAO);
        //                break;
        //            default:
        //                this.lstAnalise = this.lstAnalise.OrderBy(s => s.Id_Produto_INTERNO);
        //                break;
        //        }


        //        //montar a pagina
        //        int tamaanhoPagina = 0;

        //        //ternario para tamanho da pagina
        //        tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

        //        //Mensagens de retorno
        //        ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
        //        ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
        //        ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

        //        int numeroPagina = (page ?? 1);

        //    this.analise = null;
        //    this.analise = this.lstAnalise.ToList();
        //        return View(this.analise.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada


        //}




        [HttpGet]
        public ActionResult EditClienteAliqIcmsVendaVarfCFMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Alíquota ICMS Venda no Varejo para consumidor final no Cliente X  no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se for simples nacional direciona para essa action
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["tributacao"] = "SIMPLES";
                TempData.Keep("tributacao");
            }
            else
            {
                TempData["tributacao"] = "OUTROS";
                TempData.Keep("tributacao");
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            ////numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            //ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;


            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            // ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;
            if (numeroLinhas != null)
            {

                if (TempData["linhas"] != null)
                {
                    if (!numeroLinhas.Equals(int.Parse(TempData["linhas"].ToString())))
                    {
                        TempData["linhas"] = numeroLinhas;
                        TempData.Keep("linhas");
                        ViewBag.NumeroLinhas = numeroLinhas;
                    }
                    else
                    {
                        ViewBag.NumeroLinhas = numeroLinhas;
                    }

                }
                else
                {
                    TempData["linhas"] = numeroLinhas;
                    TempData.Keep("linhas");
                    ViewBag.NumeroLinhas = numeroLinhas;

                }


            }
            else
            {
                if (TempData["linhas"] == null)
                {
                    TempData["linhas"] = 10;
                    TempData.Keep("linhas");
                    ViewBag.NumeroLinhas = 10;
                }
                else
                {
                    ViewBag.NumeroLinhas = TempData["linhas"];
                }
            }




            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            if (filtroNulo != null)
            {
                switch (filtroNulo)
                {
                    case "1":
                        TempData["opcao"] = "Maiores";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "2":
                        TempData["opcao"] = "Menores";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "3":
                        TempData["opcao"] = "Iguais";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "4":
                        TempData["opcao"] = "Nulas Cliente";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "5":
                        TempData["opcao"] = "Nulas MTX";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "6":
                        TempData["opcao"] = "Nulas Ambos";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "7":
                        TempData["opcao"] = "Isentas";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "8":
                        TempData["opcao"] = "Não Tributadas";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "9":
                        TempData["opcao"] = "Uso Consumo";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "10":
                        TempData["opcao"] = "Subst. Tributária";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                }
            }
            else
            {

                TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
                opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                                                                               //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
                TempData.Keep("opcao");
            }



            ///*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            //TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            //opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            //TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;



            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            //aqui ele muda para simples nacional
            //if (this.empresa.simples_nacional.Equals(1))
            //{
            //    return RedirectToAction("EditClienteAliqIcmsVendaVarfCFMassaSn", new { opcao = opcao });

            //}
            //VerificaTempData();
            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao

            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                case "Alíquotas Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {
                        case "1": //MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL > a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL < a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

                            break;
                        case "3": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4": //NULA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); //onde nao for nulo no cliente mas no mtx sim
                            break;
                        case "6": //NULAS AMBAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //isenta
                            this.analise_NCM = this.analise_NCM.Where(a =>  a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 40 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "8": //nao tributada
                            this.analise_NCM = this.analise_NCM.Where(a =>  a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 41 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "9": //uso consumo
                            this.analise_NCM = this.analise_NCM.Where(a => a.PRODUTO_CATEGORIA == 21 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "10": //Subt Tributária
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Menores":
                case "Alíquotas Menores":

                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1": //MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL > a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL < a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

                            break;
                        case "3": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4": //NULA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); //onde nao for nulo no cliente mas no mtx sim
                            break;
                        case "6": //NULAS AMBAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //isenta
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 40 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "8": //nao tributada
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 41 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "9": //uso consumo
                            this.analise_NCM = this.analise_NCM.Where(a => a.PRODUTO_CATEGORIA == 21 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "10": //Subt Tributária
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Iguais":
                case "Alíquotas Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {
                        case "1": //MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL > a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL < a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

                            break;
                        case "3": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4": //NULA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); //onde nao for nulo no cliente mas no mtx sim
                            break;
                        case "6": //NULAS AMBAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //isenta
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 40 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "8": //nao tributada
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 41 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "9": //uso consumo
                            this.analise_NCM = this.analise_NCM.Where(a => a.PRODUTO_CATEGORIA == 21 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "10": //Subt Tributária
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Nulas Cliente":
                case "Alíquotas Nulas no Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";


                    switch (ViewBag.Filtro)
                    {
                        case "1": //MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL > a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL < a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

                            break;
                        case "3": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4": //NULA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); //onde nao for nulo no cliente mas no mtx sim
                            break;
                        case "6": //NULAS AMBAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //isenta
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 40 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "8": //nao tributada
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 41 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "9": //uso consumo
                            this.analise_NCM = this.analise_NCM.Where(a => a.PRODUTO_CATEGORIA == 21 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "10": //Subt Tributária
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulas MTX":
                case "Alíquotas Nulas no MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {
                        case "1": //MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL > a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL < a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

                            break;
                        case "3": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4": //NULA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); //onde nao for nulo no cliente mas no mtx sim
                            break;
                        case "6": //NULAS AMBAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //isenta
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 40 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "8": //nao tributada
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 41 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "9": //uso consumo
                            this.analise_NCM = this.analise_NCM.Where(a => a.PRODUTO_CATEGORIA == 21 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "10": //Subt Tributária
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;

                case "Nulas Ambos":
                case "Alíquotas Nulas em Ambos":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "6";

                    switch (ViewBag.Filtro)
                    {
                        case "1": //MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL > a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL < a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

                            break;
                        case "3": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4": //NULA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); //onde nao for nulo no cliente mas no mtx sim
                            break;
                        case "6": //NULAS AMBAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //isenta
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 40 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "8": //nao tributada
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 41 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "9": //uso consumo
                            this.analise_NCM = this.analise_NCM.Where(a => a.PRODUTO_CATEGORIA == 21 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "10": //Subt Tributária
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Isentas":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "7";

                    switch (ViewBag.Filtro)
                    {
                        case "1": //MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL > a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL < a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

                            break;
                        case "3": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4": //NULA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); //onde nao for nulo no cliente mas no mtx sim
                            break;
                        case "6": //NULAS AMBAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //isenta
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 40 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "8": //nao tributada
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 41 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "9": //uso consumo
                            this.analise_NCM = this.analise_NCM.Where(a => a.PRODUTO_CATEGORIA == 21 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "10": //Subt Tributária
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Não Tributadas":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "8";

                    switch (ViewBag.Filtro)
                    {
                        case "1": //MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL > a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL < a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

                            break;
                        case "3": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4": //NULA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); //onde nao for nulo no cliente mas no mtx sim
                            break;
                        case "6": //NULAS AMBAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //isenta
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 40 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "8": //nao tributada
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 41 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "9": //uso consumo
                            this.analise_NCM = this.analise_NCM.Where(a => a.PRODUTO_CATEGORIA == 21 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "10": //Subt Tributária
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Uso Consumo":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "9";

                    switch (ViewBag.Filtro)
                    {
                        case "1": //MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL > a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL < a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

                            break;
                        case "3": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4": //NULA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); //onde nao for nulo no cliente mas no mtx sim
                            break;
                        case "6": //NULAS AMBAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //isenta
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 40 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "8": //nao tributada
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 41 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "9": //uso consumo
                            this.analise_NCM = this.analise_NCM.Where(a => a.PRODUTO_CATEGORIA == 21 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "10": //Subt Tributária
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Subst. Tributária":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "10";

                    switch (ViewBag.Filtro)
                    {
                        case "1": //MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL > a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL < a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

                            break;
                        case "3": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4": //NULA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); //onde nao for nulo no cliente mas no mtx sim
                            break;
                        case "6": //NULAS AMBAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //isenta
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 40 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "8": //nao tributada
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 41 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "9": //uso consumo
                            this.analise_NCM = this.analise_NCM.Where(a => a.PRODUTO_CATEGORIA == 21 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "10": //Subt Tributária
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;

                    



            }//fim do switche

            //Action para procurar
            //this.analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analise);
            this.analise_NCM = ProcuraPorSnPorNCM(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analise_NCM);

            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analise_NCM = this.analise_NCM.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analise_NCM = this.analise_NCM.OrderBy(s => s.PRODUTO_NCM).ToList();
                    break;
            }


            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            //mandar a opção para que o javascript veja
            ViewBag.Opcao = opcao;

            int numeroPagina = (page ?? 1);

            return View(this.analise_NCM.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada


        }


        [HttpGet]
        public ActionResult EditClienteAliqIcmsVendaVarfCFMassaSn(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Alíquota ICMS Venda no Varejo para consumidor final no Cliente X  no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;



            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;


           
            VerificaTempDataSN();
            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL > a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL < a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL > a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL < a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL > a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL < a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";


                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL > a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL < a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL > a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL < a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;


            }//fim do switche

            //Action para procurar
            this.analiseSn = ProcuraPorSn(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analiseSn);

            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analiseSn = this.analiseSn.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analiseSn = this.analiseSn.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }


            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            int numeroPagina = (page ?? 1);

            return View(this.analiseSn.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada





        }


        [HttpGet]
        public ActionResult EditClienteAliqIcmsVenVarCFMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            
            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();

            //registros salvos
            int regSalv = 0;
            int regNsalv = 0;
            string analiseRetorno = "0";
            string analiseTrib = "0";

            string ufOrigem = TempData["UfOrigem"].ToString();
            string ufDestino = TempData["UfDestino"].ToString();

            try
            {

                //laço de repetição para percorrer o array com os registros
                for (int i = 0; i < idTrib.Length; i++)
                {
                    //converter em inteiro
                    int idTrb = int.Parse(idTrib[i]);

                    //faz a busca no objeto criado instanciando um so objeto
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    if (this.empresa.simples_nacional.Equals(1))
                    {
                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        //AnaliseTributariaSn analiseSn = (from a in db.Analise_TributariaSn where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

                        AnaliseTributariaNCM analiseNCM = (from a in db.Analise_TributariaNCM where a.PRODUTO_NCM == trib.PRODUTO_NCM && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino && a.SIMP_NACIONAL_BASE == 1 select a).First();

                        analiseRetorno = (analiseNCM.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == null) ? analiseRetorno : (analiseNCM.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE).ToString();

                        /*o mesmo acontece aqui, se for nulo ele permanece com valor 0.0*/
                        analiseTrib = (analiseNCM.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null) ? analiseTrib : (trib.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL);
                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL = null;
                            }
                            else
                            {
                                trib.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL = analiseNCM.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE.ToString().Replace(",", ".");

                            }
                            trib.DT_ALTERACAO = DateTime.Now;
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos

                        }

                    }
                    else 
                    {
                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        //AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino select a).First();
                        AnaliseTributariaNCM analiseNCM = (from a in db.Analise_TributariaNCM where a.PRODUTO_NCM == trib.PRODUTO_NCM && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino && a.SIMP_NACIONAL_BASE == 0 select a).First();

                        //pegar valores
                        //analiseRetorno = (decimal)analise.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO;
                        /*Motivo da mudança:
                            caso o valor esteja nulo e o usuário quer que permaneça assim, quando
                            vier nulo do mtx obviamente vai atribuir nulo ao cliente e o usuário
                            tem a consciencia disso e quer que seja nulo mesmo, o sistema avalia
                            a variavel, caso ela esteja nula ele atribui o valor presente na 
                            variavel analisereorno que neste momento é 0.0, dai o fluxo segue*/
                        //analiseRetorno = (analise.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO == null) ? analiseRetorno : (analise.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO).ToString();
                        analiseRetorno = (analiseNCM.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == null) ? analiseRetorno : (analiseNCM.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE).ToString();

                        /*o mesmo acontece aqui, se for nulo ele permanece com valor 0.0*/
                        analiseTrib = (analiseNCM.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null) ? analiseTrib : (trib.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL);
                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL = null;
                            }
                            else
                            {
                                //trib.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL = analise.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO.ToString().Replace(",", ".");
                                trib.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL = analiseNCM.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE.ToString().Replace(",", ".");


                            }
                            trib.DT_ALTERACAO =  DateTime.Now;
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos

                        }

                    }



                    
                }
                if (this.empresa.simples_nacional.Equals(1)) 
                {
                    TempData["analiseSN"] = null;
                    TempData["analise_NCM"] = null;

                }
                else 
                {
                    TempData["analise"] = null;
                    TempData["analise_NCM"] = null;
                }
               
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                string erro = e.ToString();
                resultado = "Problemas ao salvar o registro: " + erro;

            }

            if (this.empresa.simples_nacional.Equals(1))
            {
                return RedirectToAction("EditClienteAliqIcmsVendaVarfCFMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });
                

            }
            else
            {
                return RedirectToAction("EditClienteAliqIcmsVendaVarfCFMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }


            //Redirecionar para a tela de graficos


        }

        [HttpGet]
        public ActionResult EditClienteAliqIcmsVenVarCFMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();

            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);
                              
                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }

            return View(trib);
        }

        [HttpGet]
        public ActionResult EditClienteAliqIcmsVenVarCFMassaManualModalPost(string strDados, string aliqIcmsVenVarCFClienteManual)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];

            //trocando o ponto por virgula
            aliqIcmsVenVarCFClienteManual = aliqIcmsVenVarCFClienteManual.Replace(",", ".");

            //separar a String em um array
            string[] idTrib = strDados.Split(',');
            string resultado = "";
            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();
            int regSalvos = 0;
            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL = (aliqIcmsVenVarCFClienteManual != "") ? trib.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL = aliqIcmsVenVarCFClienteManual : null;

                    db.SaveChanges();
                    regSalvos++;

                }

                TempData["analise"] = null;
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }

            

            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EditClienteAliqIcmsVendaVarfCFMassaSn", new { param = resultado, qtdSalvos = regSalvos });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EditClienteAliqIcmsVendaVarfCFMassa", new { param = resultado, qtdSalvos = regSalvos });

            }
            
        }




        [HttpGet]
        public ActionResult EditClienteAliqIcmsVendaVarfCFMassaTODOS(string opcao)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            string ufOrigem = TempData["UfOrigem"].ToString();
            string ufDestino = TempData["UfDestino"].ToString();

            ViewBag.Tributacao = TempData["tributacao"].ToString();

            //VerificaTempData();
            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao
            TributacaoEmpresa trib = new TributacaoEmpresa();

            if (opcao == "Alíquotas Maiores")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL > a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }
            
            if (opcao == "Alíquotas Menores")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL < a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }
           
            if (opcao == "Alíquotas Nulas no Cliente")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 60 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 40 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }
            if(opcao == "Subst. Tributária")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60  && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) &&  a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }

            if (opcao == "Não Tributadas")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 41 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }
            if (opcao == "Isentas")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 40 && (a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL == null || a.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }

            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            string resultado = ""; //variavel auxiliar;
            //pega todos os ID para serem alterados
            //this.analiseSn.Count()
            for (int i = 0; i < this.analise_NCM.Count(); i++)
            {

                //converter em inteiro
                int? idTrb = (this.analise_NCM[i].TE_ID);
                trib = db.TributacaoEmpresas.Find(idTrb);//busca o registro
                trib.ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL = this.analise_NCM[i].ALIQ_ICMS_VENDA_VAREJO_CONS_FINAL_BASE.ToString().Replace(",", ".");
                trib.DT_ALTERACAO = DateTime.Now;
                try
                {

                    db.SaveChanges();
                    regSalv++; //contagem de registros salvos
                               //toda vez que salvar, gravar uma nova lista e mandar para action


                }
                catch (Exception e)
                {
                    resultado = "Problemas ao salvar o registro: " + e.ToString();
                    regNsalv++;
                }

            }
            resultado = "Registro Salvo com Sucesso!!";


            //TempData["analise"] = null;

            TempData["analise_NCM"] = null;
            TempData.Keep("analise_NCM");
            //string[] idTrib = this.alanliseSN.
            //a analise vai me dar todos os ids


            return RedirectToAction("EditClienteAliqIcmsVendaVarfCFMassa", new { param = resultado, qtdSalvos = regSalv, opcao = opcao });


        }





        /// <summary>
        /// Edição Venda Varejo ST Consumidor Final
        /// </summary>

        [HttpGet]
        public ActionResult EditClienteAliqIcmsVendaVarSTCFMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Alíquota ICMS ST Venda no Varejo para consumidor final no Cliente X  no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //VERIFICA A TRIBUTAÇÃO PARA BUSCA NA TABELA CORRETA (0-NAO SIMPLES | 1-SIMPLES)
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["tributacao"] = "SIMPLES";
                TempData.Keep("tributacao");
            }
            else
            {
                TempData["tributacao"] = "OUTROS";
                TempData.Keep("tributacao");
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            //ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;
            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            // ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;
            if (numeroLinhas != null)
            {

                if (TempData["linhas"] != null)
                {
                    if (!numeroLinhas.Equals(int.Parse(TempData["linhas"].ToString())))
                    {
                        TempData["linhas"] = numeroLinhas;
                        TempData.Keep("linhas");
                        ViewBag.NumeroLinhas = numeroLinhas;
                    }
                    else
                    {
                        ViewBag.NumeroLinhas = numeroLinhas;
                    }

                }
                else
                {
                    TempData["linhas"] = numeroLinhas;
                    TempData.Keep("linhas");
                    ViewBag.NumeroLinhas = numeroLinhas;

                }


            }
            else
            {
                if (TempData["linhas"] == null)
                {
                    TempData["linhas"] = 10;
                    TempData.Keep("linhas");
                    ViewBag.NumeroLinhas = 10;
                }
                else
                {
                    ViewBag.NumeroLinhas = TempData["linhas"];
                }
            }




            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            ///*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            //TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            //opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            ////persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            //TempData.Keep("opcao");


            if (filtroNulo != null)
            {
                switch (filtroNulo)
                {
                    case "1":
                        TempData["opcao"] = "Maiores";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "2":
                        TempData["opcao"] = "Menores";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "3":
                        TempData["opcao"] = "Iguais";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "4":
                        TempData["opcao"] = "Nulas Cliente";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "5":
                        TempData["opcao"] = "Nulas MTX";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "6":
                        TempData["opcao"] = "Nulas Ambos";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "7":
                        TempData["opcao"] = "Isentas";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "8":
                        TempData["opcao"] = "Não Tributadas";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "9":
                        TempData["opcao"] = "Uso Consumo";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;

                }
            }
            else
            {

                TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
                opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                                                                               //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
                TempData.Keep("opcao");
            }



            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
           
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();

            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //if (this.empresa.simples_nacional.Equals(1))
            //{
            //    return RedirectToAction("EditClienteAliqIcmsVendaVarSTCFMassaSn", new { opcao = opcao });

            //}

            //VerificaTempData();


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;


            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao


            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                case "Alíquotas Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {
                        case "1": //MAIORES
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL > a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENORES
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL < a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE &&  a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE  && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null).ToList();
                            break;
                        case "4": //NULAS NO CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULAS MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULAS EM AMBOX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                      

                    }
                    break;
                case "Menores":
                case "Alíquotas Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1": //MAIORES
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL > a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENORES
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL < a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null).ToList();
                            break;
                        case "4": //NULAS NO CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULAS MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULAS EM AMBOX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Iguais":
                case "Alíquotas Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {
                        case "1": //MAIORES
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL > a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENORES
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL < a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null).ToList();
                            break;
                        case "4": //NULAS NO CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULAS MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULAS EM AMBOX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulas Cliente":
                case "Alíquotas Nulas no Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1": //MAIORES
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL > a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENORES
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL < a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null).ToList();
                            break;
                        case "4": //NULAS NO CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULAS MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULAS EM AMBOX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulas MTX":
                case "Alíquotas Nulas no MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {
                        case "1": //MAIORES
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL > a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENORES
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL < a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null).ToList();
                            break;
                        case "4": //NULAS NO CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULAS MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULAS EM AMBOX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulas Ambos":
                case "Alíquotas Nulas em Ambos":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "6";

                    switch (ViewBag.Filtro)
                    {
                        case "1": //MAIORES
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL > a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENORES
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL < a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null).ToList();
                            break;
                        case "4": //NULAS NO CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULAS MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULAS EM AMBOX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
              

            }//fim do switche

            //Action para procurar
            //analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);
            this.analise_NCM = ProcuraPorSnPorNCM(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analise_NCM);


            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analise_NCM = this.analise_NCM.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analise_NCM = this.analise_NCM.OrderBy(s => s.PRODUTO_NCM).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            //mandar a opção para que o javascript veja
            ViewBag.Opcao = opcao;


            ViewBag.CstGeral = db.CstIcmsGerais.AsNoTracking(); //para montar a descrição da cst na view
            int numeroPagina = (page ?? 1);

            return View(this.analise_NCM.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }

        [HttpGet]
        public ActionResult EditClienteAliqIcmsVendaVarSTCFMassaSn(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Alíquota ICMS ST Venda no Varejo para consumidor final no Cliente X  no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;



            VerificaTempDataSN();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL > a.Aliq_Icms_ST_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL < a.Aliq_Icms_ST_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == a.Aliq_Icms_ST_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.Aliq_Icms_ST_Venda_Varejo_Cons_Final_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL > a.Aliq_Icms_ST_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL < a.Aliq_Icms_ST_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == a.Aliq_Icms_ST_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.Aliq_Icms_ST_Venda_Varejo_Cons_Final_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL > a.Aliq_Icms_ST_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL < a.Aliq_Icms_ST_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == a.Aliq_Icms_ST_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.Aliq_Icms_ST_Venda_Varejo_Cons_Final_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL > a.Aliq_Icms_ST_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL < a.Aliq_Icms_ST_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == a.Aliq_Icms_ST_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.Aliq_Icms_ST_Venda_Varejo_Cons_Final_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL > a.Aliq_Icms_ST_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL < a.Aliq_Icms_ST_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == a.Aliq_Icms_ST_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.Aliq_Icms_ST_Venda_Varejo_Cons_Final_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;


            }//fim do switche

            //Action para procurar
            this.analiseSn = ProcuraPorSn(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analiseSn);

            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analiseSn = this.analiseSn.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analiseSn = this.analiseSn.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            int numeroPagina = (page ?? 1);

            return View(this.analiseSn.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }
     


        [HttpGet]
        public ActionResult EditClienteAliqIcmsSTVenVarCFMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();


            //registros salvos
            int regSalv = 0;
            int regNsalv = 0;
            string analiseRetorno = "0";
            string analiseTrib = "0";

            string ufOrigem = TempData["UfOrigem"].ToString();
            string ufDestino = TempData["UfDestino"].ToString();
            //verifica estados origem e destino
            //VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 

            try
            {

                //laço de repetição para percorrer o array com os registros
                for (int i = 0; i < idTrib.Length; i++)
                {
                    //converter em inteiro
                    int idTrb = int.Parse(idTrib[i]);

                    //faz a busca no objeto criado instanciando um so objeto
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    if (this.empresa.simples_nacional.Equals(1))
                    {
                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        //AnaliseTributariaSn analiseSn = (from a in db.Analise_TributariaSn where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

                        AnaliseTributariaNCM analiseNCM = (from a in db.Analise_TributariaNCM where a.PRODUTO_NCM == trib.PRODUTO_NCM && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino && a.SIMP_NACIONAL_BASE == 1 select a).First();

                        analiseRetorno = (analiseNCM.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE == null) ? analiseRetorno : (analiseNCM.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE).ToString();
                       
                        /*o mesmo acontece aqui, se for nulo ele permanece com valor 0.0*/
                        analiseTrib = (analiseNCM.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null) ? analiseTrib : (trib.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL);
                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL = null;
                            }
                            else
                            {
                                trib.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL = analiseNCM.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE.ToString().Replace(",", ".");

                            }
                            trib.DT_ALTERACAO = DateTime.Now;
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos

                        }

                    }
                    else
                    {
                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        //AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino select a).First();
                        AnaliseTributariaNCM analiseNCM = (from a in db.Analise_TributariaNCM where a.PRODUTO_NCM == trib.PRODUTO_NCM && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino && a.SIMP_NACIONAL_BASE == 0 select a).First();

                        //pegar valores
                        //analiseRetorno = (decimal)analise.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO;
                        /*Motivo da mudança:
                            caso o valor esteja nulo e o usuário quer que permaneça assim, quando
                            vier nulo do mtx obviamente vai atribuir nulo ao cliente e o usuário
                            tem a consciencia disso e quer que seja nulo mesmo, o sistema avalia
                            a variavel, caso ela esteja nula ele atribui o valor presente na 
                            variavel analisereorno que neste momento é 0.0, dai o fluxo segue*/
                        //analiseRetorno = (analise.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO == null) ? analiseRetorno : (analise.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO).ToString();
                        analiseRetorno = (analiseNCM.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE == null) ? analiseRetorno : (analiseNCM.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE).ToString();

                        /*o mesmo acontece aqui, se for nulo ele permanece com valor 0.0*/
                        analiseTrib = (analiseNCM.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null) ? analiseTrib : (trib.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL);
                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL = null;
                            }
                            else
                            {
                                trib.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL = analiseNCM.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE.ToString().Replace(",", ".");

                            }
                            trib.DT_ALTERACAO = DateTime.Now;
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos

                        }

                    }




                }
                if (this.empresa.simples_nacional.Equals(1))
                {
                    TempData["analiseSN"] = null;
                    TempData["analise_NCM"] = null;

                }
                else
                {
                    TempData["analise"] = null;
                    TempData["analise_NCM"] = null;
                }

                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                string erro = e.ToString();
                resultado = "Problemas ao salvar o registro: " + erro;

            }

            //try
            //{
            //    if (this.empresa.simples_nacional.Equals(1))
            //    {
            //        //laço de repetição para percorrer o array com os registros
            //        for (int i = 0; i < idTrib.Length; i++)
            //        {
            //            //converter em inteiro
            //            int idTrb = int.Parse(idTrib[i]);

            //            //faz a busca no objeto criado instanciando um so objeto
            //            trib = db.TributacaoEmpresas.Find(idTrb);

            //            //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
            //            AnaliseTributariaSn analiseSn = (from a in db.Analise_TributariaSn where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();
            //            //pegar valores que esta na analise
            //            analiseRetorno = (analiseSn.Aliq_Icms_ST_Venda_Varejo_Cons_Final_INTERNO == null) ? analiseRetorno : analiseSn.Aliq_Icms_ST_Venda_Varejo_Cons_Final_INTERNO.ToString();

            //            //pega valor que esta na tributação do produto na empresa
            //            analiseTrib = (analiseSn.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null) ? analiseTrib : (trib.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL);



            //            //analisar se já são iguais
            //            if (analiseTrib == analiseRetorno)
            //            {
            //                regNsalv++;
            //            }
            //            else
            //            {

            //                //verificar se a variavel veio 0.0
            //                if (analiseRetorno == "0")
            //                {
            //                    //se veio 0.0 o valor deve ser atribuido nulo
            //                    trib.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL = null;
            //                }
            //                else
            //                {
            //                    trib.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL = analiseSn.Aliq_Icms_ST_Venda_Varejo_Cons_Final_INTERNO.ToString().Replace(",", ".");

            //                }
            //                db.SaveChanges();
            //                regSalv++; //contagem de registros salvos


            //            }


            //        }

            //    }
            //    else
            //    {
            //        //laço de repetição para percorrer o array com os registros
            //        for (int i = 0; i < idTrib.Length; i++)
            //        {
            //            //converter em inteiro
            //            int idTrb = int.Parse(idTrib[i]);

            //            //faz a busca no objeto criado instanciando um so objeto
            //            trib = db.TributacaoEmpresas.Find(idTrb);

            //            //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
            //            AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();
            //            //pegar valores que esta na analise
            //            analiseRetorno = (analise.Aliq_Icms_ST_Venda_Varejo_Cons_Final_INTERNO == null) ? analiseRetorno : analise.Aliq_Icms_ST_Venda_Varejo_Cons_Final_INTERNO.ToString();

            //            //pega valor que esta na tributação do produto na empresa
            //            analiseTrib = (analise.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null) ? analiseTrib : (trib.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL);



            //            //analisar se já são iguais
            //            if (analiseTrib == analiseRetorno)
            //            {
            //                regNsalv++;
            //            }
            //            else
            //            {

            //                //verificar se a variavel veio 0.0
            //                if (analiseRetorno == "0")
            //                {
            //                    //se veio 0.0 o valor deve ser atribuido nulo
            //                    trib.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL = null;
            //                }
            //                else
            //                {
            //                    trib.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL = analise.Aliq_Icms_ST_Venda_Varejo_Cons_Final_INTERNO.ToString().Replace(",", ".");

            //                }
            //                db.SaveChanges();
            //                regSalv++; //contagem de registros salvos


            //            }


            //        }
            //    }


            //    resultado = "Registro Salvo com Sucesso!!";

            //}
            //catch (Exception e)
            //{
            //    resultado = "Problemas ao salvar o registro: " + e.ToString();

            //}

            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EditClienteAliqIcmsVendaVarSTCFMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EditClienteAliqIcmsVendaVarSTCFMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }

            
        }

        [HttpGet]
        public ActionResult EditClienteAliqIcmsSTVenVarCFMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();

            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }

            return View(trib);

        }

        [HttpGet]
        public ActionResult EditClienteAliqIcmsSTVenVarCFMassaManualModalPost(string strDados, string aliqIcmsSTVenVarCFClienteManual)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];

            //trocando o ponto por virgula
            aliqIcmsSTVenVarCFClienteManual = aliqIcmsSTVenVarCFClienteManual.Replace(",", ".");

            //separar a String em um array
            string[] idTrib = strDados.Split(',');
            string resultado = "";
            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();
            int regSalvos = 0;
            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL = (aliqIcmsSTVenVarCFClienteManual != "") ? trib.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL = aliqIcmsSTVenVarCFClienteManual : null;

                    db.SaveChanges();
                    regSalvos++;

                }

                TempData["analise"] = null;
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }

            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EditClienteAliqIcmsVendaVarSTCFMassaSn", new { param = resultado, qtdSalvos = regSalvos });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EditClienteAliqIcmsVendaVarSTCFMassa", new { param = resultado, qtdSalvos = regSalvos });

            }
          
        }



        [HttpGet]          
        public ActionResult EditClienteAliqIcmsVendaVarSTCFMassaTODOS(string opcao)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            string ufOrigem = TempData["UfOrigem"].ToString();
            string ufDestino = TempData["UfDestino"].ToString();

            //VerificaTempData();
            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao
            TributacaoEmpresa trib = new TributacaoEmpresa();


            if (opcao == "Alíquotas Maiores")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL > a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }

            if (opcao == "Alíquotas Menores")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL < a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }

            if (opcao == "Alíquotas Nulas no Cliente")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 60 && a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }

            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            string resultado = ""; //variavel auxiliar;
            //pega todos os ID para serem alterados
            //this.analiseSn.Count()
            for (int i = 0; i < this.analise_NCM.Count(); i++)
            {

                //converter em inteiro
                int? idTrb = (this.analise_NCM[i].TE_ID);
                trib = db.TributacaoEmpresas.Find(idTrb);//busca o registro
                trib.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL = this.analise_NCM[i].ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE.ToString().Replace(",", ".");

                try
                {

                    db.SaveChanges();
                    regSalv++; //contagem de registros salvos
                               //toda vez que salvar, gravar uma nova lista e mandar para action



                }
                catch (Exception e)
                {
                    resultado = "Problemas ao salvar o registro: " + e.ToString();
                    regNsalv++;
                }

            }
            resultado = "Registro Salvo com Sucesso!!";


            //TempData["analise"] = null;
            TempData["analise_NCM"] = null;
            TempData.Keep("analise_NCM");
            //string[] idTrib = this.alanliseSN.
            //a analise vai me dar todos os ids


            return RedirectToAction("EditClienteAliqIcmsVendaVarSTCFMassa", new { param = resultado, qtdSalvos = regSalv, opcao = opcao });
        }



        /// <summary>
        /// Edição ICMS Venda Varejo para Contribuinte
        /// </summary>
        /// <returns></returns>

        [HttpGet]
        public ActionResult EditClienteAliqIcmsVendaVarContMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Alíquota ICMS  Venda no Varejo para CONTRIBUINTE no Cliente X  no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["tributacao"] = "SIMPLES";
                TempData.Keep("tributacao");
            }
            else
            {
                TempData["tributacao"] = "OUTROS";
                TempData.Keep("tributacao");
            }

            ViewBag.Tributacao = TempData["tributacao"].ToString();


            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            //ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;
            VerificarLinhas(numeroLinhas);

            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            ///*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            //TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            //opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            ////persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            //TempData.Keep("opcao");

            VerificarOpcaoAliq(filtroNulo, opcao);

            opcao = TempData["opcao"].ToString();

           


            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;


            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();

            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 
  
            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;


            if (this.empresa.simples_nacional.Equals(1))
            {
                return RedirectToAction("EditClienteAliqIcmsVendaVarContMassaSn", new { opcao = opcao });

            }


            //VerificaTempData();

            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao




         
            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                case "Alíquotas Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1": //MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT > a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT < a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE  && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAL
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE && a.ALIQ_ICMS_VENDA_VAREJO_CONT != null  && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4": //NULLA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == null && a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE != null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULLA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT != null && a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULLO EM AMBOS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == null && a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //isenta
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT_BASE == 40 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;                                    
                        case "8": //nao tributada
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT_BASE == 41 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "9": //uso consumo
                            this.analise_NCM = this.analise_NCM.Where(a => a.PRODUTO_CATEGORIA == 21 &&(a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "10": //SUBST TRIBUTÁRIA
                            this.analise_NCM = this.analise_NCM.Where(a =>  a.CST_VENDA_VAREJO_CONT_BASE == 60 &&( a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null)  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Menores":
                case "Alíquotas Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1": //MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT > a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT < a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAL
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE && a.ALIQ_ICMS_VENDA_VAREJO_CONT != null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4": //NULLA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == null && a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE != null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULLA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT != null && a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULLO EM AMBOS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == null && a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //isenta
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT_BASE == 40 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "8": //nao tributada
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT_BASE == 41 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "9": //uso consumo
                            this.analise_NCM = this.analise_NCM.Where(a => a.PRODUTO_CATEGORIA == 21 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "10": //SUBST TRIBUTÁRIA
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT_BASE == 60 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Iguais":
                case "Alíquotas Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {
                        case "1": //MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT > a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT < a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAL
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE && a.ALIQ_ICMS_VENDA_VAREJO_CONT != null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4": //NULLA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == null && a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE != null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULLA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT != null && a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULLO EM AMBOS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == null && a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //isenta
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT_BASE == 40 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "8": //nao tributada
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT_BASE == 41 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "9": //uso consumo
                            this.analise_NCM = this.analise_NCM.Where(a => a.PRODUTO_CATEGORIA == 21 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "10": //SUBST TRIBUTÁRIA
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT_BASE == 60 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Cliente":
                case "Alíquotas Nulas no Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1": //MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT > a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT < a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAL
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE && a.ALIQ_ICMS_VENDA_VAREJO_CONT != null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4": //NULLA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == null && a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE != null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULLA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT != null && a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULLO EM AMBOS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == null && a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //isenta
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT_BASE == 40 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "8": //nao tributada
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT_BASE == 41 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "9": //uso consumo
                            this.analise_NCM = this.analise_NCM.Where(a => a.PRODUTO_CATEGORIA == 21 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "10": //SUBST TRIBUTÁRIA
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT_BASE == 60 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas MTX":
                case "Alíquotas Nulas no MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {
                        case "1": //MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT > a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT < a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAL
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE && a.ALIQ_ICMS_VENDA_VAREJO_CONT != null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4": //NULLA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == null && a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE != null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULLA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT != null && a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULLO EM AMBOS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == null && a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //isenta
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT_BASE == 40 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "8": //nao tributada
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT_BASE == 41 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "9": //uso consumo
                            this.analise_NCM = this.analise_NCM.Where(a => a.PRODUTO_CATEGORIA == 21 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "10": //SUBST TRIBUTÁRIA
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT_BASE == 60 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulas Ambos":
                case "Alíquotas Nulas em Ambos":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "6";

                    switch (ViewBag.Filtro)
                    {
                        case "1": //MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT > a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT < a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAL
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE && a.ALIQ_ICMS_VENDA_VAREJO_CONT != null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4": //NULLA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == null && a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE != null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULLA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT != null && a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULLO EM AMBOS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == null && a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //isenta
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT_BASE == 40 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "8": //nao tributada
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT_BASE == 41 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "9": //uso consumo
                            this.analise_NCM = this.analise_NCM.Where(a => a.PRODUTO_CATEGORIA == 21 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "10": //SUBST TRIBUTÁRIA
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT_BASE == 60 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Isentas":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "7";

                    switch (ViewBag.Filtro)
                    {
                        case "1": //MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT > a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT < a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAL
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE && a.ALIQ_ICMS_VENDA_VAREJO_CONT != null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4": //NULLA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == null && a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE != null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULLA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT != null && a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULLO EM AMBOS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == null && a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //isenta
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT_BASE == 40 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "8": //nao tributada
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT_BASE == 41 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "9": //uso consumo
                            this.analise_NCM = this.analise_NCM.Where(a => a.PRODUTO_CATEGORIA == 21 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "10": //SUBST TRIBUTÁRIA
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT_BASE == 60 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Não Tributadas":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "8";

                    switch (ViewBag.Filtro)
                    {
                        case "1": //MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT > a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT < a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAL
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE && a.ALIQ_ICMS_VENDA_VAREJO_CONT != null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4": //NULLA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == null && a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE != null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULLA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT != null && a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULLO EM AMBOS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == null && a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //isenta
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT_BASE == 40 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "8": //nao tributada
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT_BASE == 41 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "9": //uso consumo
                            this.analise_NCM = this.analise_NCM.Where(a => a.PRODUTO_CATEGORIA == 21 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "10": //SUBST TRIBUTÁRIA
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT_BASE == 60 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Uso Consumo":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "9";

                    switch (ViewBag.Filtro)
                    {
                        case "1": //MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT > a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT < a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAL
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE && a.ALIQ_ICMS_VENDA_VAREJO_CONT != null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4": //NULLA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == null && a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE != null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULLA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT != null && a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULLO EM AMBOS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == null && a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //isenta
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT_BASE == 40 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "8": //nao tributada
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT_BASE == 41 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "9": //uso consumo
                            this.analise_NCM = this.analise_NCM.Where(a => a.PRODUTO_CATEGORIA == 21 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "10": //SUBST TRIBUTÁRIA
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT_BASE == 60 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Subst. Tributária":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "10";

                    switch (ViewBag.Filtro)
                    {
                        case "1": //MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT > a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT < a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAL
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE && a.ALIQ_ICMS_VENDA_VAREJO_CONT != null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4": //NULLA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == null && a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE != null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULLA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT != null && a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULLO EM AMBOS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == null && a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //isenta
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT_BASE == 40 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "8": //nao tributada
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT_BASE == 41 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "9": //uso consumo
                            this.analise_NCM = this.analise_NCM.Where(a => a.PRODUTO_CATEGORIA == 21 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "10": //SUBST TRIBUTÁRIA
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT_BASE == 60 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;



            }//fim do switche

            //Action para procurar
            //analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);
            this.analise_NCM = ProcuraPorSnPorNCM(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analise_NCM);

            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analise_NCM = this.analise_NCM.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analise_NCM = this.analise_NCM.OrderBy(s => s.PRODUTO_NCM).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            //mandar a opção para que o javascript veja
            ViewBag.Opcao = opcao;

            int numeroPagina = (page ?? 1);

            return View(this.analise_NCM.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }
                
        [HttpGet]
        public ActionResult EditClienteAliqIcmsVendaVarContMassaSn(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Alíquota ICMS  Venda no Varejo para CONTRIBUINTE no Cliente X  no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;





            VerificaTempDataSN();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT > a.Aliq_Icms_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT < a.Aliq_Icms_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == a.Aliq_Icms_Venda_Varejo_Cont_INTERNO && a.ALIQ_ICMS_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT != null && a.Aliq_Icms_Venda_Varejo_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT > a.Aliq_Icms_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT < a.Aliq_Icms_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == a.Aliq_Icms_Venda_Varejo_Cont_INTERNO && a.ALIQ_ICMS_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT != null && a.Aliq_Icms_Venda_Varejo_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT > a.Aliq_Icms_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT < a.Aliq_Icms_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == a.Aliq_Icms_Venda_Varejo_Cont_INTERNO && a.ALIQ_ICMS_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT != null && a.Aliq_Icms_Venda_Varejo_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT > a.Aliq_Icms_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT < a.Aliq_Icms_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == a.Aliq_Icms_Venda_Varejo_Cont_INTERNO && a.ALIQ_ICMS_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT != null && a.Aliq_Icms_Venda_Varejo_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT > a.Aliq_Icms_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT < a.Aliq_Icms_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == a.Aliq_Icms_Venda_Varejo_Cont_INTERNO && a.ALIQ_ICMS_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT != null && a.Aliq_Icms_Venda_Varejo_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;


            }//fim do switche

            //Action para procurar
            this.analiseSn = ProcuraPorSn(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analiseSn);

            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analiseSn = this.analiseSn.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analiseSn = this.analiseSn.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            int numeroPagina = (page ?? 1);

            return View(this.analiseSn.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }


        [HttpGet]
        public ActionResult EditClienteAliqIcmsVenVarContMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();


            //registros salvos
            int regSalv = 0;
            int regNsalv = 0;

            string analiseRetorno = "0";
            string analiseTrib = "0";

            string ufOrigem = TempData["UfOrigem"].ToString();
            string ufDestino = TempData["UfDestino"].ToString();

            try
            {
                //laço de repetição para percorrer o array com os registros
                for (int i = 0; i < idTrib.Length; i++)
                {
                    //converter em inteiro
                    int idTrb = int.Parse(idTrib[i]);

                    //faz a busca no objeto criado instanciando um so objeto
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    //condicional para simples nacional
                    if (this.empresa.simples_nacional.Equals(1))
                    {
                        AnaliseTributariaNCM analiseNCM = (from a in db.Analise_TributariaNCM where a.PRODUTO_NCM == trib.PRODUTO_NCM && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino && a.SIMP_NACIONAL_BASE == 1 select a).First();

                        analiseRetorno = (analiseNCM.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE == null) ? analiseRetorno : (analiseNCM.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE).ToString();
                        /*o mesmo acontece aqui, se for nulo ele permanece com valor 0.0*/
                        analiseTrib = (analiseNCM.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE == null) ? analiseTrib : (trib.ALIQ_ICMS_VENDA_VAREJO_CONT);
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.ALIQ_ICMS_VENDA_VAREJO_CONT = null;
                            }
                            else
                            {
                                trib.ALIQ_ICMS_VENDA_VAREJO_CONT = analiseNCM.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE.ToString().Replace(",", ".");

                            }
                            trib.DT_ALTERACAO = DateTime.Now;
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos

                        }
                    }
                    else
                    {
                        AnaliseTributariaNCM analiseNCM = (from a in db.Analise_TributariaNCM where a.PRODUTO_NCM == trib.PRODUTO_NCM && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino && a.SIMP_NACIONAL_BASE == 0 select a).First();

                        analiseRetorno = (analiseNCM.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE == null) ? analiseRetorno : (analiseNCM.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE).ToString();
                        /*o mesmo acontece aqui, se for nulo ele permanece com valor 0.0*/
                        analiseTrib = (analiseNCM.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE == null) ? analiseTrib : (trib.ALIQ_ICMS_VENDA_VAREJO_CONT);
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.ALIQ_ICMS_VENDA_VAREJO_CONT = null;
                            }
                            else
                            {
                                trib.ALIQ_ICMS_VENDA_VAREJO_CONT = analiseNCM.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE.ToString().Replace(",", ".");

                            }
                            trib.DT_ALTERACAO = DateTime.Now;
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos

                        }
                    }//fim else se é simples nacional
                }

                if (this.empresa.simples_nacional.Equals(1))
                {
                    TempData["analiseSN"] = null;
                    TempData["analise_NCM"] = null;

                }
                else
                {
                    TempData["analise"] = null;
                    TempData["analise_NCM"] = null;
                }

                resultado = "Registro Salvo com Sucesso!!";
            }
            catch (Exception e)
            {
                string erro = e.ToString();
                resultado = "Problemas ao salvar o registro: " + erro;

            }


            //try
            //{
            //    if (this.empresa.simples_nacional.Equals(1)) 
            //    {
            //        //laço de repetição para percorrer o array com os registros
            //        for (int i = 0; i < idTrib.Length; i++)
            //        {
            //            //converter em inteiro
            //            int idTrb = int.Parse(idTrib[i]);

            //            //faz a busca no objeto criado instanciando um so objeto
            //            trib = db.TributacaoEmpresas.Find(idTrb);

            //            //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
            //            AnaliseTributariaSn analiseSn = (from a in db.Analise_TributariaSn where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();
            //            //pegar valores

            //            analiseRetorno = (analiseSn.Aliq_Icms_Venda_Varejo_Cont_INTERNO == null) ? analiseRetorno : analiseSn.Aliq_Icms_Venda_Varejo_Cont_INTERNO.ToString();

            //            analiseTrib = (analiseSn.ALIQ_ICMS_VENDA_VAREJO_CONT == null) ? analiseTrib : (trib.ALIQ_ICMS_VENDA_VAREJO_CONT);
            //            //analisar se já são iguais
            //            if (analiseTrib == analiseRetorno)
            //            {
            //                regNsalv++;
            //            }
            //            else
            //            {
            //                //verificar se a variavel veio 0.0
            //                if (analiseRetorno == "0")
            //                {
            //                    //se veio 0.0 o valor deve ser atribuido nulo
            //                    trib.ALIQ_ICMS_VENDA_VAREJO_CONT = null;
            //                }
            //                else
            //                {
            //                    trib.ALIQ_ICMS_VENDA_VAREJO_CONT = analiseSn.Aliq_Icms_Venda_Varejo_Cont_INTERNO.ToString().Replace(",", ".");

            //                }
            //                db.SaveChanges();
            //                regSalv++; //contagem de registros salvos
            //            }


            //        }

            //    }
            //    else
            //    {
            //        //laço de repetição para percorrer o array com os registros
            //        for (int i = 0; i < idTrib.Length; i++)
            //        {
            //            //converter em inteiro
            //            int idTrb = int.Parse(idTrib[i]);

            //            //faz a busca no objeto criado instanciando um so objeto
            //            trib = db.TributacaoEmpresas.Find(idTrb);

            //            //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
            //            AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();
            //            //pegar valores

            //            analiseRetorno = (analise.Aliq_Icms_Venda_Varejo_Cont_INTERNO == null) ? analiseRetorno : analise.Aliq_Icms_Venda_Varejo_Cont_INTERNO.ToString();

            //            analiseTrib = (analise.ALIQ_ICMS_VENDA_VAREJO_CONT == null) ? analiseTrib : (trib.ALIQ_ICMS_VENDA_VAREJO_CONT);
            //            //analisar se já são iguais
            //            if (analiseTrib == analiseRetorno)
            //            {
            //                regNsalv++;
            //            }
            //            else
            //            {
            //                //verificar se a variavel veio 0.0
            //                if (analiseRetorno == "0")
            //                {
            //                    //se veio 0.0 o valor deve ser atribuido nulo
            //                    trib.ALIQ_ICMS_VENDA_VAREJO_CONT = null;
            //                }
            //                else
            //                {
            //                    trib.ALIQ_ICMS_VENDA_VAREJO_CONT = analise.Aliq_Icms_Venda_Varejo_Cont_INTERNO.ToString().Replace(",", ".");

            //                }
            //                db.SaveChanges();
            //                regSalv++; //contagem de registros salvos
            //            }


            //        }

            //    }





            //    resultado = "Registro Salvo com Sucesso!!";

            //}
            //catch (Exception e)
            //{
            //    resultado = "Problemas ao salvar o registro: " + e.ToString();

            //}
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EditClienteAliqIcmsVendaVarContMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EditClienteAliqIcmsVendaVarContMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }

            
        }

        [HttpGet]
        public ActionResult EditClienteAliqIcmsVenVarContMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();

            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }

            return View(trib);
        }

        [HttpGet]
        public ActionResult EditClienteAliqIcmsVenVarContMassaManualModalPost(string strDados, string aliqIcmsVenVarContClienteManual)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //trocando o ponto por virgula
            aliqIcmsVenVarContClienteManual = aliqIcmsVenVarContClienteManual.Replace(",", ".");

            //separar a String em um array
            string[] idTrib = strDados.Split(',');
            string resultado = "";
            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();
            int regSalvos = 0;
            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.ALIQ_ICMS_VENDA_VAREJO_CONT = (aliqIcmsVenVarContClienteManual != "") ? trib.ALIQ_ICMS_VENDA_VAREJO_CONT = aliqIcmsVenVarContClienteManual : null;

                    db.SaveChanges();
                    regSalvos++;

                }

              
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EditClienteAliqIcmsVendaVarContMassaSn", new { param = resultado, qtdSalvos = regSalvos });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EditClienteAliqIcmsVendaVarContMassa", new { param = resultado, qtdSalvos = regSalvos });

            }

           
        }




        [HttpGet]
        public ActionResult EditClienteAliqIcmsVendaVarContMassaTODOS(string opcao)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            string ufOrigem = TempData["UfOrigem"].ToString();
            string ufDestino = TempData["UfDestino"].ToString();

            //VerificaTempData();
            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao

            TributacaoEmpresa trib = new TributacaoEmpresa();

            if (opcao == "Alíquotas Maiores")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT > a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }

            if (opcao == "Alíquotas Menores")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT < a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }

            if (opcao == "Alíquotas Nulas no Cliente")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_VAREJO_CONT == null && a.ALIQ_ICMS_VENDA_VAREJO_CONT_BASE != null && a.CST_VENDA_VAREJO_CONT_BASE != 60 && a.CST_VENDA_VAREJO_CONT_BASE != 40 && a.CST_VENDA_VAREJO_CONT_BASE != 41 && a.PRODUTO_CATEGORIA != 21 && a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }
            if (opcao == "Subst. Tributária")
            {
                this.analise_NCM = this.analise_NCM.Where(a =>  a.CST_VENDA_VAREJO_CONT_BASE == 60 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }
            if (opcao == "Não Tributadas")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT_BASE == 41 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }
            if (opcao == "Isentas")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT_BASE == 40 && (a.ALIQ_ICMS_VENDA_VAREJO_CONT == null || a.ALIQ_ICMS_VENDA_VAREJO_CONT != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }

            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            string resultado = ""; //variavel auxiliar;
            //pega todos os ID para serem alterados
            //this.analiseSn.Count()
            for (int i = 0; i < this.analise_NCM.Count(); i++)
            {

                //converter em inteiro
                int? idTrb = (this.analise_NCM[i].TE_ID);
                trib = db.TributacaoEmpresas.Find(idTrb);//busca o registro
                trib.ALIQ_ICMS_VENDA_VAREJO_CONT = this.analise_NCM[i].ALIQ_ICMS_VENDA_VAREJO_CONT_BASE.ToString().Replace(",", ".");
                trib.DT_ALTERACAO = DateTime.Now;
                try
                {

                    db.SaveChanges();
                    regSalv++; //contagem de registros salvos
                               //toda vez que salvar, gravar uma nova lista e mandar para action

                }
                catch (Exception e)
                {
                    resultado = "Problemas ao salvar o registro: " + e.ToString();
                    regNsalv++;
                }

            }
            resultado = "Registro Salvo com Sucesso!!";


            //TempData["analise"] = null;
            TempData["analise_NCM"] = null;
            //string[] idTrib = this.alanliseSN.
            //a analise vai me dar todos os ids


            return RedirectToAction("EditClienteAliqIcmsVendaVarContMassa", new { param = resultado, qtdSalvos = regSalv, opcao = opcao });

        }


        /*Edição ICMS ST Venda varejo para contribuinte*/

        [HttpGet]
        public ActionResult EditClienteAliqIcmsSTVendaVarContMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Alíquota ICMS ST Venda no Varejo para CONTRIBUINTE no Cliente X  no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se for simples nacional direciona para essa action
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["tributacao"] = "SIMPLES";
                TempData.Keep("tributacao");
            }
            else
            {
                TempData["tributacao"] = "OUTROS";
                TempData.Keep("tributacao");
            }
            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            //ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;

            VerificarLinhas(numeroLinhas);

            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            ///*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            //TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            //opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            ////persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            //TempData.Keep("opcao");
            if (filtroNulo != null)
            {
                switch (filtroNulo)
                {
                    case "1":
                        TempData["opcao"] = "Maiores";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "2":
                        TempData["opcao"] = "Menores";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "3":
                        TempData["opcao"] = "Iguais";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "4":
                        TempData["opcao"] = "Nulas Cliente";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "5":
                        TempData["opcao"] = "Nulas MTX";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "6":
                        TempData["opcao"] = "Nulas Ambos";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "7":
                        TempData["opcao"] = "Isentas";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "8":
                        TempData["opcao"] = "Não Tributadas";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "9":
                        TempData["opcao"] = "Uso Consumo";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                }
            }
            else
            {

                TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
                opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                                                                               //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
                TempData.Keep("opcao");
            }


            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;


            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();

            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 
                                                  //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;


            if (this.empresa.simples_nacional.Equals(1))
            {
                return RedirectToAction("EditClienteAliqIcmsSTVendaVarContMassaSn", new { opcao = opcao });

            }

            //VerificaTempData();
            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao
                      
            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                case "Alíquotas Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1": //MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT > a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE &&  a.CST_VENDA_VAREJO_CONT_BASE == 60  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT < a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 60  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAL
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT == a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 60  && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4"://NULLA NO CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT == null &&  a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE != null && a.CST_VENDA_VAREJO_CONT_BASE == 60  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULLA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT != null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE == 60  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULLA AMBOS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT == null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE == 60  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                       


                    }
                    break;
                case "Menores":
                case "Alíquotas Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {

                        case "1": //MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT > a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT < a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAL
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT == a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 60 && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4"://NULLA NO CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT == null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE != null && a.CST_VENDA_VAREJO_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULLA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT != null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULLA AMBOS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT == null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Iguais":
                case "Alíquotas Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {

                        case "1": //MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT > a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT < a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAL
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT == a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 60 && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4"://NULLA NO CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT == null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE != null && a.CST_VENDA_VAREJO_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULLA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT != null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULLA AMBOS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT == null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Cliente":
                case "Alíquotas Nulas no Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {

                        case "1": //MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT > a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT < a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAL
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT == a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 60 && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4"://NULLA NO CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT == null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE != null && a.CST_VENDA_VAREJO_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULLA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT != null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULLA AMBOS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT == null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas MTX":
                case "Alíquotas Nulas no MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {

                        case "1": //MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT > a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT < a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAL
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT == a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 60 && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4"://NULLA NO CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT == null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE != null && a.CST_VENDA_VAREJO_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULLA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT != null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULLA AMBOS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT == null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Ambos":
                case "Alíquotas Nulas em Ambos":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "6";

                    switch (ViewBag.Filtro)
                    {

                        case "1": //MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT > a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT < a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAL
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT == a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 60 && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4"://NULLA NO CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT == null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE != null && a.CST_VENDA_VAREJO_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULLA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT != null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULLA AMBOS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT == null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
              
              


            }//fim do switche

            //Action para procurar
            //analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);
            this.analise_NCM = ProcuraPorSnPorNCM(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analise_NCM);


            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analise_NCM = this.analise_NCM.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analise_NCM = this.analise_NCM.OrderBy(s => s.PRODUTO_NCM).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            //mandar a opção para que o javascript veja
            ViewBag.Opcao = opcao;

            int numeroPagina = (page ?? 1);

            return View(analise_NCM.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }

        [HttpGet]
        public ActionResult EditClienteAliqIcmsSTVendaVarContMassaSn(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Alíquota ICMS ST Venda no Varejo para CONTRIBUINTE no Cliente X  no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;



            VerificaTempDataSN();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT > a.Aliq_Icms_ST_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT < a.Aliq_Icms_ST_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT == a.Aliq_Icms_ST_Venda_Varejo_Cont_INTERNO && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT != null && a.Aliq_Icms_ST_Venda_Varejo_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT > a.Aliq_Icms_ST_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT < a.Aliq_Icms_ST_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT == a.Aliq_Icms_ST_Venda_Varejo_Cont_INTERNO && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT != null && a.Aliq_Icms_ST_Venda_Varejo_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT > a.Aliq_Icms_ST_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT < a.Aliq_Icms_ST_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT == a.Aliq_Icms_ST_Venda_Varejo_Cont_INTERNO && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT != null && a.Aliq_Icms_ST_Venda_Varejo_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT > a.Aliq_Icms_ST_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT < a.Aliq_Icms_ST_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT == a.Aliq_Icms_ST_Venda_Varejo_Cont_INTERNO && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT != null && a.Aliq_Icms_ST_Venda_Varejo_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT > a.Aliq_Icms_ST_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT < a.Aliq_Icms_ST_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT == a.Aliq_Icms_ST_Venda_Varejo_Cont_INTERNO && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT != null && a.Aliq_Icms_ST_Venda_Varejo_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;


            }//fim do switche

            //Action para procurar
            this.analiseSn = ProcuraPorSn(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analiseSn);

            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analiseSn = this.analiseSn.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analiseSn = this.analiseSn.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            int numeroPagina = (page ?? 1);

            return View(this.analiseSn.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }


        [HttpGet]
        public ActionResult EditClienteAliqIcmsSTVenVarContMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];

            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();


            //registros salvos
            int regSalv = 0;
            int regNsalv = 0;
            string analiseRetorno = "0";
            string analiseTrib = "0";


            string ufOrigem = TempData["UfOrigem"].ToString();
            string ufDestino = TempData["UfDestino"].ToString();

            try
            {

                //laço de repetição para percorrer o array com os registros
                for (int i = 0; i < idTrib.Length; i++)
                {
                    //converter em inteiro
                    int idTrb = int.Parse(idTrib[i]);

                    //faz a busca no objeto criado instanciando um so objeto
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    if (this.empresa.simples_nacional.Equals(1))
                    {
                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        //AnaliseTributariaSn analiseSn = (from a in db.Analise_TributariaSn where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

                        AnaliseTributariaNCM analiseNCM = (from a in db.Analise_TributariaNCM where a.PRODUTO_NCM == trib.PRODUTO_NCM && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino && a.SIMP_NACIONAL_BASE == 1 select a).First();

                        analiseRetorno = (analiseNCM.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE == null) ? analiseRetorno : (analiseNCM.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE).ToString();

                        /*o mesmo acontece aqui, se for nulo ele permanece com valor 0.0*/
                        analiseTrib = (analiseNCM.ALIQ_ICMS_ST_VENDA_VAREJO_CONT == null) ? analiseTrib : (trib.ALIQ_ICMS_ST_VENDA_VAREJO_CONT);
                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.ALIQ_ICMS_ST_VENDA_VAREJO_CONT = null;
                            }
                            else
                            {
                                trib.ALIQ_ICMS_ST_VENDA_VAREJO_CONT = analiseNCM.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE.ToString().Replace(",", ".");

                            }
                            trib.DT_ALTERACAO = DateTime.Now;
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos

                        }

                    }
                    else
                    {
                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        //AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino select a).First();
                        AnaliseTributariaNCM analiseNCM = (from a in db.Analise_TributariaNCM where a.PRODUTO_NCM == trib.PRODUTO_NCM && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino && a.SIMP_NACIONAL_BASE == 0 select a).First();

                       
                        analiseRetorno = (analiseNCM.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE == null) ? analiseRetorno : (analiseNCM.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE).ToString();

                        /*o mesmo acontece aqui, se for nulo ele permanece com valor 0.0*/
                        analiseTrib = (analiseNCM.ALIQ_ICMS_ST_VENDA_VAREJO_CONT == null) ? analiseTrib : (trib.ALIQ_ICMS_ST_VENDA_VAREJO_CONT);
                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.ALIQ_ICMS_ST_VENDA_VAREJO_CONT = null;
                            }
                            else
                            {
                                trib.ALIQ_ICMS_ST_VENDA_VAREJO_CONT = analiseNCM.ALIQ_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE.ToString().Replace(",", ".");

                            }
                            trib.DT_ALTERACAO = DateTime.Now;
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos

                        }

                    }




                }
                if (this.empresa.simples_nacional.Equals(1))
                {
                    TempData["analiseSN"] = null;
                    TempData["analise_NCM"] = null;

                }
                else
                {
                    TempData["analise"] = null;
                    TempData["analise_NCM"] = null;
                }

                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                string erro = e.ToString();
                resultado = "Problemas ao salvar o registro: " + erro;

            }

           

            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EditClienteAliqIcmsSTVendaVarContMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EditClienteAliqIcmsSTVendaVarContMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }

            
        }

        [HttpGet]
        public ActionResult EditClienteAliqIcmsSTVenVarContMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();

            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }

            return View(trib);
        }

        [HttpGet]
        public ActionResult EditClienteAliqIcmsSTVenVarContMassaManualModalPost(string strDados, string aliqIcmsSTVenVarContClienteManual)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }

            this.empresa = (Empresa)Session["empresas"];


            //trocando o ponto por virgula
            aliqIcmsSTVenVarContClienteManual = aliqIcmsSTVenVarContClienteManual.Replace(",", ".");

            //separar a String em um array
            string[] idTrib = strDados.Split(',');
            string resultado = "";
            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();
            int regSalvos = 0;
            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.ALIQ_ICMS_ST_VENDA_VAREJO_CONT = (aliqIcmsSTVenVarContClienteManual != "") ? trib.ALIQ_ICMS_ST_VENDA_VAREJO_CONT = aliqIcmsSTVenVarContClienteManual : null;

                    db.SaveChanges();
                    regSalvos++;

                }

               
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EditClienteAliqIcmsSTVendaVarContMassaSn", new { param = resultado, qtdSalvos = regSalvos });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EditClienteAliqIcmsSTVendaVarContMassa", new { param = resultado, qtdSalvos = regSalvos });

            }

            
        }



        [HttpGet]
        public ActionResult EditClienteAliqIcmsSTVendaVarContMassaTODOS(string opcao)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            this.ufOrigem = TempData["UfOrigem"].ToString();
            this.ufDestino = TempData["UfDestino"].ToString();

            //VerificaTempData();
            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao

            TributacaoEmpresa trib = new TributacaoEmpresa();

            if (opcao == "Alíquotas Maiores")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT > a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 60  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }

            if (opcao == "Alíquotas Menores")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT < a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 60   && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }

            if (opcao == "Alíquotas Nulas no Cliente")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT == null && a.ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE != null && a.CST_VENDA_VAREJO_CONT_BASE == 60  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }

            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            string resultado = ""; //variavel auxiliar;
            //pega todos os ID para serem alterados
            //this.analiseSn.Count()
            for (int i = 0; i < this.analise_NCM.Count(); i++)
            {

                //converter em inteiro
                int? idTrb = (this.analise_NCM[i].TE_ID);
                trib = db.TributacaoEmpresas.Find(idTrb);//busca o registro
                trib.ALIQ_ICMS_ST_VENDA_VAREJO_CONT = this.analise_NCM[i].ALIQ_ICMS_ST_VENDA_VAREJO_CONT_BASE.ToString().Replace(",", ".");
                trib.DT_ALTERACAO = DateTime.Now;
                try
                {

                    db.SaveChanges();
                    regSalv++; //contagem de registros salvos
                               //toda vez que salvar, gravar uma nova lista e mandar para action



                }
                catch (Exception e)
                {
                    resultado = "Problemas ao salvar o registro: " + e.ToString();
                    regNsalv++;
                }

            }
            resultado = "Registro Salvo com Sucesso!!";


            //TempData["analise"] = null;
            TempData["analise_NCM"] = null;
            //string[] idTrib = this.alanliseSN.
            //a analise vai me dar todos os ids


            return RedirectToAction("EditClienteAliqIcmsSTVendaVarContMassa", new { param = resultado, qtdSalvos = regSalv, opcao = opcao });

        }




        /*Edição ICMS Venda Atacado para Contribuinte*/
        [HttpGet]
        public ActionResult EditClienteAliqIcmsVendaAtaContMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Alíquota ICMS  Venda no Atacado para CONTRIBUINTE no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se for simples nacional direciona para essa action
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["tributacao"] = "SIMPLES";
                TempData.Keep("tributacao");
            }
            else
            {
                TempData["tributacao"] = "OUTROS";
                TempData.Keep("tributacao");
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            //ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;
            VerificarLinhas(numeroLinhas);

            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            ///*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            //TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            //opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            ////persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            //TempData.Keep("opcao");
            //if (filtroNulo != null)
            //{
            //    switch (filtroNulo)
            //    {
            //        case "1":
            //            TempData["opcao"] = "Maiores";
            //            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
            //            TempData.Keep("opcao");
            //            break;
            //        case "2":
            //            TempData["opcao"] = "Menores";
            //            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
            //            TempData.Keep("opcao");
            //            break;
            //        case "3":
            //            TempData["opcao"] = "Iguais";
            //            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
            //            TempData.Keep("opcao");
            //            break;
            //        case "4":
            //            TempData["opcao"] = "Nulas Cliente";
            //            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
            //            TempData.Keep("opcao");
            //            break;
            //        case "5":
            //            TempData["opcao"] = "Nulas MTX";
            //            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
            //            TempData.Keep("opcao");
            //            break;
            //        case "6":
            //            TempData["opcao"] = "Nulas Ambos";
            //            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
            //            TempData.Keep("opcao");
            //            break;
            //        case "7":
            //            TempData["opcao"] = "Isentas";
            //            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
            //            TempData.Keep("opcao");
            //            break;
            //        case "8":
            //            TempData["opcao"] = "Não Tributadas";
            //            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
            //            TempData.Keep("opcao");
            //            break;
            //        case "9":
            //            TempData["opcao"] = "Uso Consumo";
            //            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
            //            TempData.Keep("opcao");
            //            break;
            //    }
            //}
            //else
            //{

            //    TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            //    opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
            //                                                                   //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            //    TempData.Keep("opcao");
            //}
            VerificarOpcaoAliq(filtroNulo, opcao);
            opcao = TempData["opcao"].ToString();

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();


            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;


            if (this.empresa.simples_nacional.Equals(1))
            {
                return RedirectToAction("EditClienteAliqIcmsVendaAtaContMassaSn", new { opcao = opcao });

            }


            //VerificaTempData();
            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao


            

            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                case "Alíquotas Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1": //MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA > a.ALIQ_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENORES
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA < a.ALIQ_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA == a.ALIQ_ICMS_VENDA_ATA_CONT_BASE && a.ALIQ_ICMS_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4": //NULAS NO CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA == null && a.ALIQ_ICMS_VENDA_ATA_CONT_BASE != null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULLAS NO MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA != null && a.ALIQ_ICMS_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULLAS EM AMBOX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA == null && a.ALIQ_ICMS_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //ISENTAS
                            this.analise_NCM = this.analise_NCM.Where(a =>a.CST_VENDA_ATA_CONT_BASE == 40 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "8": //NÃO TRIBUTADA
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == 41 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "9": //USO CONSUMO
                            this.analise_NCM = this.analise_NCM.Where(a => a.PRODUTO_CATEGORIA == 21 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "10": //SUBS TRIBUTARIA
                            this.analise_NCM = this.analise_NCM.Where(a =>  a.CST_VENDA_ATA_CONT_BASE == 60 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Menores":
                case "Alíquotas Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1": //MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA > a.ALIQ_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENORES
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA < a.ALIQ_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA == a.ALIQ_ICMS_VENDA_ATA_CONT_BASE && a.ALIQ_ICMS_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4": //NULAS NO CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA == null && a.ALIQ_ICMS_VENDA_ATA_CONT_BASE != null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULLAS NO MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA != null && a.ALIQ_ICMS_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULLAS EM AMBOX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA == null && a.ALIQ_ICMS_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //ISENTAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == 40 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "8": //NÃO TRIBUTADA
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == 41 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "9": //USO CONSUMO
                            this.analise_NCM = this.analise_NCM.Where(a => a.PRODUTO_CATEGORIA == 21 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "10": //SUBS TRIBUTARIA
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == 60 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Iguais":
                case "Alíquotas Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {
                        case "1": //MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA > a.ALIQ_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENORES
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA < a.ALIQ_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA == a.ALIQ_ICMS_VENDA_ATA_CONT_BASE && a.ALIQ_ICMS_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4": //NULAS NO CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA == null && a.ALIQ_ICMS_VENDA_ATA_CONT_BASE != null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULLAS NO MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA != null && a.ALIQ_ICMS_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULLAS EM AMBOX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA == null && a.ALIQ_ICMS_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //ISENTAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == 40 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "8": //NÃO TRIBUTADA
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == 41 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "9": //USO CONSUMO
                            this.analise_NCM = this.analise_NCM.Where(a => a.PRODUTO_CATEGORIA == 21 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "10": //SUBS TRIBUTARIA
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == 60 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Cliente":
                case "Alíquotas Nulas no Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1": //MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA > a.ALIQ_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENORES
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA < a.ALIQ_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA == a.ALIQ_ICMS_VENDA_ATA_CONT_BASE && a.ALIQ_ICMS_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4": //NULAS NO CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA == null && a.ALIQ_ICMS_VENDA_ATA_CONT_BASE != null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULLAS NO MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA != null && a.ALIQ_ICMS_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULLAS EM AMBOX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA == null && a.ALIQ_ICMS_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //ISENTAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == 40 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "8": //NÃO TRIBUTADA
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == 41 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "9": //USO CONSUMO
                            this.analise_NCM = this.analise_NCM.Where(a => a.PRODUTO_CATEGORIA == 21 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "10": //SUBS TRIBUTARIA
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == 60 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas MTX":
                case "Alíquotas Nulas no MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {
                        case "1": //MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA > a.ALIQ_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENORES
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA < a.ALIQ_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA == a.ALIQ_ICMS_VENDA_ATA_CONT_BASE && a.ALIQ_ICMS_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4": //NULAS NO CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA == null && a.ALIQ_ICMS_VENDA_ATA_CONT_BASE != null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULLAS NO MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA != null && a.ALIQ_ICMS_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULLAS EM AMBOX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA == null && a.ALIQ_ICMS_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //ISENTAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == 40 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "8": //NÃO TRIBUTADA
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == 41 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "9": //USO CONSUMO
                            this.analise_NCM = this.analise_NCM.Where(a => a.PRODUTO_CATEGORIA == 21 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "10": //SUBS TRIBUTARIA
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == 60 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulas Ambos":
                case "Alíquotas Nulas em Ambos":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "6";

                    switch (ViewBag.Filtro)
                    {
                        case "1": //MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA > a.ALIQ_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENORES
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA < a.ALIQ_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA == a.ALIQ_ICMS_VENDA_ATA_CONT_BASE && a.ALIQ_ICMS_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4": //NULAS NO CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA == null && a.ALIQ_ICMS_VENDA_ATA_CONT_BASE != null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULLAS NO MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA != null && a.ALIQ_ICMS_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULLAS EM AMBOX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA == null && a.ALIQ_ICMS_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //ISENTAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == 40 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "8": //NÃO TRIBUTADA
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == 41 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "9": //USO CONSUMO
                            this.analise_NCM = this.analise_NCM.Where(a => a.PRODUTO_CATEGORIA == 21 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "10": //SUBS TRIBUTARIA
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == 60 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Isentas":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "7";

                    switch (ViewBag.Filtro)
                    {
                        case "1": //MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA > a.ALIQ_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENORES
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA < a.ALIQ_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA == a.ALIQ_ICMS_VENDA_ATA_CONT_BASE && a.ALIQ_ICMS_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4": //NULAS NO CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA == null && a.ALIQ_ICMS_VENDA_ATA_CONT_BASE != null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULLAS NO MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA != null && a.ALIQ_ICMS_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULLAS EM AMBOX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA == null && a.ALIQ_ICMS_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //ISENTAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == 40 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "8": //NÃO TRIBUTADA
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == 41 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "9": //USO CONSUMO
                            this.analise_NCM = this.analise_NCM.Where(a => a.PRODUTO_CATEGORIA == 21 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "10": //SUBS TRIBUTARIA
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == 60 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Não Tributadas":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "8";

                    switch (ViewBag.Filtro)
                    {
                        case "1": //MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA > a.ALIQ_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENORES
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA < a.ALIQ_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA == a.ALIQ_ICMS_VENDA_ATA_CONT_BASE && a.ALIQ_ICMS_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4": //NULAS NO CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA == null && a.ALIQ_ICMS_VENDA_ATA_CONT_BASE != null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULLAS NO MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA != null && a.ALIQ_ICMS_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULLAS EM AMBOX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA == null && a.ALIQ_ICMS_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //ISENTAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == 40 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "8": //NÃO TRIBUTADA
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == 41 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "9": //USO CONSUMO
                            this.analise_NCM = this.analise_NCM.Where(a => a.PRODUTO_CATEGORIA == 21 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "10": //SUBS TRIBUTARIA
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == 60 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Uso Consumo":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "9";

                    switch (ViewBag.Filtro)
                    {
                        case "1": //MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA > a.ALIQ_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENORES
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA < a.ALIQ_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA == a.ALIQ_ICMS_VENDA_ATA_CONT_BASE && a.ALIQ_ICMS_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4": //NULAS NO CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA == null && a.ALIQ_ICMS_VENDA_ATA_CONT_BASE != null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULLAS NO MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA != null && a.ALIQ_ICMS_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULLAS EM AMBOX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA == null && a.ALIQ_ICMS_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //ISENTAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == 40 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "8": //NÃO TRIBUTADA
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == 41 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "9": //USO CONSUMO
                            this.analise_NCM = this.analise_NCM.Where(a => a.PRODUTO_CATEGORIA == 21 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "10": //SUBS TRIBUTARIA
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == 60 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Subst. Tributária":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "10";

                    switch (ViewBag.Filtro)
                    {
                        case "1": //MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA > a.ALIQ_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENORES
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA < a.ALIQ_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA == a.ALIQ_ICMS_VENDA_ATA_CONT_BASE && a.ALIQ_ICMS_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4": //NULAS NO CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA == null && a.ALIQ_ICMS_VENDA_ATA_CONT_BASE != null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULLAS NO MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA != null && a.ALIQ_ICMS_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULLAS EM AMBOX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA == null && a.ALIQ_ICMS_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //ISENTAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == 40 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "8": //NÃO TRIBUTADA
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == 41 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "9": //USO CONSUMO
                            this.analise_NCM = this.analise_NCM.Where(a => a.PRODUTO_CATEGORIA == 21 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "10": //SUBS TRIBUTARIA
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == 60 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;


            }//fim do switche

            //Action para procurar
            //analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);
            this.analise_NCM = ProcuraPorSnPorNCM(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analise_NCM);

            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analise_NCM = this.analise_NCM.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analise_NCM = this.analise_NCM.OrderBy(s => s.PRODUTO_NCM).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";


            //mandar a opção para que o javascript veja
            ViewBag.Opcao = opcao;
            int numeroPagina = (page ?? 1);

            return View(this.analise_NCM.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }


       

        [HttpGet]
        public ActionResult EditClienteAliqIcmsVendaAtaContMassaSn(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Alíquota ICMS ST  Venda no Atacado para CONTRIBUINTE no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;





            VerificaTempDataSN();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA > a.Aliq_Icms_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA < a.Aliq_Icms_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA == a.Aliq_Icms_Venda_Ata_Cont_INTERNO && a.ALIQ_ICMS_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA != null && a.Aliq_Icms_Venda_Ata_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA > a.Aliq_Icms_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA < a.Aliq_Icms_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA == a.Aliq_Icms_Venda_Ata_Cont_INTERNO && a.ALIQ_ICMS_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA != null && a.Aliq_Icms_Venda_Ata_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA > a.Aliq_Icms_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA < a.Aliq_Icms_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA == a.Aliq_Icms_Venda_Ata_Cont_INTERNO && a.ALIQ_ICMS_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA != null && a.Aliq_Icms_Venda_Ata_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA > a.Aliq_Icms_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA < a.Aliq_Icms_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA == a.Aliq_Icms_Venda_Ata_Cont_INTERNO && a.ALIQ_ICMS_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA != null && a.Aliq_Icms_Venda_Ata_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA > a.Aliq_Icms_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA < a.Aliq_Icms_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA == a.Aliq_Icms_Venda_Ata_Cont_INTERNO && a.ALIQ_ICMS_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA != null && a.Aliq_Icms_Venda_Ata_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;


            }//fim do switche

            //Action para procurar
            this.analiseSn = ProcuraPorSn(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analiseSn);

            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analiseSn = this.analiseSn.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analiseSn = this.analiseSn.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            int numeroPagina = (page ?? 1);

            return View(this.analiseSn.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }


        [HttpGet]
        public ActionResult EditClienteAliqIcmsVenAtaContMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();


            //registros salvos
            int regSalv = 0;
            int regNsalv = 0;
            string analiseRetorno = "0";
            string analiseTrib = "0";

            string ufOrigem = TempData["UfOrigem"].ToString();
            string ufDestino = TempData["UfDestino"].ToString();

            try
            {

                //laço de repetição para percorrer o array com os registros
                for (int i = 0; i < idTrib.Length; i++)
                {
                    //converter em inteiro
                    int idTrb = int.Parse(idTrib[i]);

                    //faz a busca no objeto criado instanciando um so objeto
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    if (this.empresa.simples_nacional.Equals(1))
                    {
                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        //AnaliseTributariaSn analiseSn = (from a in db.Analise_TributariaSn where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

                        AnaliseTributariaNCM analiseNCM = (from a in db.Analise_TributariaNCM where a.PRODUTO_NCM == trib.PRODUTO_NCM && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino && a.SIMP_NACIONAL_BASE == 1 select a).First();

                        analiseRetorno = (analiseNCM.ALIQ_ICMS_VENDA_ATA_CONT_BASE == null) ? analiseRetorno : (analiseNCM.ALIQ_ICMS_VENDA_ATA_CONT_BASE).ToString();

                        /*o mesmo acontece aqui, se for nulo ele permanece com valor 0.0*/
                        analiseTrib = (analiseNCM.ALIQ_ICMS_VENDA_ATA == null) ? analiseTrib : (trib.ALIQ_ICMS_VENDA_ATA);
                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.ALIQ_ICMS_VENDA_ATA = null;
                            }
                            else
                            {
                                trib.ALIQ_ICMS_VENDA_ATA = analiseNCM.ALIQ_ICMS_VENDA_ATA_CONT_BASE.ToString().Replace(",", ".");

                            }
                            trib.DT_ALTERACAO = DateTime.Now;
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos

                        }

                    }
                    else
                    {
                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        //AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino select a).First();
                        AnaliseTributariaNCM analiseNCM = (from a in db.Analise_TributariaNCM where a.PRODUTO_NCM == trib.PRODUTO_NCM && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino && a.SIMP_NACIONAL_BASE == 0 select a).First();

                        //pegar valores
                        //analiseRetorno = (decimal)analise.Aliq_Icms_Venda_Varejo_Cons_Final_INTERNO;
                        /*Motivo da mudança:
                            caso o valor esteja nulo e o usuário quer que permaneça assim, quando
                            vier nulo do mtx obviamente vai atribuir nulo ao cliente e o usuário
                            tem a consciencia disso e quer que seja nulo mesmo, o sistema avalia
                            a variavel, caso ela esteja nula ele atribui o valor presente na 
                            variavel analisereorno que neste momento é 0.0, dai o fluxo segue*/
                        analiseRetorno = (analiseNCM.ALIQ_ICMS_VENDA_ATA_CONT_BASE == null) ? analiseRetorno : (analiseNCM.ALIQ_ICMS_VENDA_ATA_CONT_BASE).ToString();

                        /*o mesmo acontece aqui, se for nulo ele permanece com valor 0.0*/
                        analiseTrib = (analiseNCM.ALIQ_ICMS_VENDA_ATA == null) ? analiseTrib : (trib.ALIQ_ICMS_VENDA_ATA);
                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.ALIQ_ICMS_VENDA_ATA = null;
                            }
                            else
                            {
                                trib.ALIQ_ICMS_VENDA_ATA = analiseNCM.ALIQ_ICMS_VENDA_ATA_CONT_BASE.ToString().Replace(",", ".");

                            }
                            trib.DT_ALTERACAO = DateTime.Now;
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos

                        }

                    }




                }
                if (this.empresa.simples_nacional.Equals(1))
                {
                    TempData["analiseSN"] = null;
                    TempData["analise_NCM"] = null;

                }
                else
                {
                    TempData["analise"] = null;
                    TempData["analise_NCM"] = null;
                }

                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                string erro = e.ToString();
                resultado = "Problemas ao salvar o registro: " + erro;

            }



          
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                TempData["analise_NCM"] = null;
                return RedirectToAction("EditClienteAliqIcmsVendaAtaContMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });


            }
            else
            {
                TempData["analise"] = null;
                TempData["analise_NCM"] = null;
                return RedirectToAction("EditClienteAliqIcmsVendaAtaContMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }

           
        }

        [HttpGet]
        public ActionResult EditClienteAliqIcmsVenAtaContMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();

            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }

            return View(trib);

        }

        [HttpGet]
        public ActionResult EditClienteAliqIcmsVenAtaContMassaManualModalPost(string strDados, string aliqIcmsVenAtaContClienteManual)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //trocando o ponto por virgula
            aliqIcmsVenAtaContClienteManual = aliqIcmsVenAtaContClienteManual.Replace(",", ".");

            //separar a String em um array
            string[] idTrib = strDados.Split(',');
            string resultado = "";
            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();
            int regSalvos = 0;
            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.ALIQ_ICMS_VENDA_ATA = (aliqIcmsVenAtaContClienteManual != "") ? trib.ALIQ_ICMS_VENDA_ATA = aliqIcmsVenAtaContClienteManual : null;

                    db.SaveChanges();
                    regSalvos++;

                }

              
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }

            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EditClienteAliqIcmsVendaAtaContMassaSn", new { param = resultado, qtdSalvos = regSalvos });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EditClienteAliqIcmsVendaAtaContMassa", new { param = resultado, qtdSalvos = regSalvos });

            }

        }


        [HttpGet]
        public ActionResult EditClienteAliqIcmsVendaAtaContMassaTODOS(string opcao)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
           
            string ufOrigem = TempData["UfOrigem"].ToString();
            string ufDestino = TempData["UfDestino"].ToString();


            //VerificaTempData();
            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao

            TributacaoEmpresa trib = new TributacaoEmpresa();

            if (opcao == "Alíquotas Maiores")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA > a.ALIQ_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }

            if (opcao == "Alíquotas Menores")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA < a.ALIQ_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41 && a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }

            if (opcao == "Alíquotas Nulas no Cliente")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA == null && a.ALIQ_ICMS_VENDA_ATA_CONT_BASE !=null && a.CST_VENDA_ATA_CONT_BASE != 60 && a.CST_VENDA_ATA_CONT_BASE != 40 && a.CST_VENDA_ATA_CONT_BASE != 41  && a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }
            if (opcao == "Subst. Tributária")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == 60 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA_CONT_BASE != null)&& a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }
            if (opcao == "Não Tributadas")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == 41 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }
            if (opcao == "Isentas")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == 40 && (a.ALIQ_ICMS_VENDA_ATA == null || a.ALIQ_ICMS_VENDA_ATA != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }


            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            string resultado = ""; //variavel auxiliar;
            //pega todos os ID para serem alterados
            //this.analiseSn.Count()
            for (int i = 0; i < this.analise_NCM.Count(); i++)
            {

                //converter em inteiro
                int? idTrb = (this.analise_NCM[i].TE_ID);
                trib = db.TributacaoEmpresas.Find(idTrb);//busca o registro
                trib.ALIQ_ICMS_VENDA_ATA = this.analise_NCM[i].ALIQ_ICMS_VENDA_ATA_CONT_BASE.ToString().Replace(",", ".");
                trib.DT_ALTERACAO = DateTime.Now;
                try
                {

                    db.SaveChanges();
                    regSalv++; //contagem de registros salvos
                               //toda vez que salvar, gravar uma nova lista e mandar para action



                }
                catch (Exception e)
                {
                    resultado = "Problemas ao salvar o registro: " + e.ToString();
                    regNsalv++;
                }

            }
            resultado = "Registro Salvo com Sucesso!!";


            //TempData["analise"] = null;
            TempData["analise_NCM"] = null;
            TempData.Keep("analise_NCM");
            //string[] idTrib = this.alanliseSN.
            //a analise vai me dar todos os ids


            return RedirectToAction("EditClienteAliqIcmsVendaAtaContMassa", new { param = resultado, qtdSalvos = regSalv, opcao = opcao });

        }




        /*Edição ICMS ST Venda Atacado para Contribuinte*/
        [HttpGet]
        public ActionResult EditClienteAliqIcmsSTVendaAtaContMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Alíquota ICMS ST  Venda no Atacado para CONTRIBUINTE no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }
            //se for simples nacional direciona para essa action
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["tributacao"] = "SIMPLES";
                TempData.Keep("tributacao");
            }
            else
            {
                TempData["tributacao"] = "OUTROS";
                TempData.Keep("tributacao");
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            //ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;
            VerificarLinhas(numeroLinhas);



            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            ///*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            //TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            //opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            ////persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            //TempData.Keep("opcao");
            VerificarOpcaoAliq(filtroNulo, opcao);
            opcao = TempData["opcao"].ToString();

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;
            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();

            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            if (this.empresa.simples_nacional.Equals(1))
            {
                return RedirectToAction("EditClienteAliqIcmsSTVendaAtaContMassaSn", new { opcao = opcao });

            }

            //VerificaTempData();
            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao


            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                case "Alíquotas Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1"://MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA > a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA < a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 60  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3"://IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA == a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 60  && a.ALIQ_ICMS_ST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4"://NULA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA == null && a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE != null && a.CST_VENDA_ATA_CONT_BASE == 60  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5"://NULA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA != null && a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE == 60  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULAS AMBAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA == null && a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                       

                    }
                    break;
                case "Menores":
                case "Alíquotas Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1"://MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA > a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA < a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3"://IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA == a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 60 && a.ALIQ_ICMS_ST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4"://NULA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA == null && a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE != null && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5"://NULA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA != null && a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULAS AMBAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA == null && a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        

                    }
                    break;
                case "Iguais":
                case "Alíquotas Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {
                        case "1"://MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA > a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA < a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3"://IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA == a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 60 && a.ALIQ_ICMS_ST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4"://NULA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA == null && a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE != null && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5"://NULA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA != null && a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULAS AMBAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA == null && a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                      

                    }
                    break;
                case "Nulas Cliente":
                case "Alíquotas Nulas no Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1"://MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA > a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA < a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3"://IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA == a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 60 && a.ALIQ_ICMS_ST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4"://NULA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA == null && a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE != null && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5"://NULA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA != null && a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULAS AMBAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA == null && a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                   

                    }
                    break;
                case "Nulas MTX":
                case "Alíquotas Nulas no MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {
                        case "1"://MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA > a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA < a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3"://IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA == a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 60 && a.ALIQ_ICMS_ST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4"://NULA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA == null && a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE != null && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5"://NULA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA != null && a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULAS AMBAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA == null && a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                      

                    }
                    break;
                case "Nulas Ambos":
                case "Alíquotas Nulas em Ambos":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "6";

                    switch (ViewBag.Filtro)
                    {
                        case "1"://MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA > a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA < a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3"://IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA == a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 60 && a.ALIQ_ICMS_ST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4"://NULA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA == null && a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE != null && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5"://NULA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA != null && a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULAS AMBAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA == null && a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                      

                    }
                    break;
                case "Isentas":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "7";

                    switch (ViewBag.Filtro)
                    {
                        case "1"://MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA > a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA < a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3"://IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA == a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 60 && a.ALIQ_ICMS_ST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4"://NULA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA == null && a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE != null && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5"://NULA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA != null && a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULAS AMBAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA == null && a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                     


                    }
                    break;
                case "Não Tributadas":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "8";

                    switch (ViewBag.Filtro)
                    {
                        case "1"://MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA > a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA < a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3"://IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA == a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 60 && a.ALIQ_ICMS_ST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4"://NULA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA == null && a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE != null && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5"://NULA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA != null && a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULAS AMBAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA == null && a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    

                    }
                    break;
                case "Uso Consumo":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "9";

                    switch (ViewBag.Filtro)
                    {
                        case "1"://MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA > a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA < a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3"://IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA == a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 60 && a.ALIQ_ICMS_ST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4"://NULA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA == null && a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE != null && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5"://NULA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA != null && a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULAS AMBAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA == null && a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                      


                    }
                    break;


            }//fim do switche

            //Action para procurar
            //analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);
            this.analise_NCM = ProcuraPorSnPorNCM(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analise_NCM);

            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analise_NCM = this.analise_NCM.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analise_NCM = this.analise_NCM.OrderBy(s => s.PRODUTO_NCM).ToList();
                    break;
            }


            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";


            //mandar a opção para que o javascript veja
            ViewBag.Opcao = opcao;

            int numeroPagina = (page ?? 1);

            return View(this.analise_NCM.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }


        [HttpGet]
        public ActionResult EditClienteAliqIcmsSTVendaAtaContMassaSn(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Alíquota ICMS ST  Venda no Atacado para CONTRIBUINTE no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;



            VerificaTempDataSN();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA > a.Aliq_Icms_ST_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA < a.Aliq_Icms_ST_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA == a.Aliq_Icms_ST_Venda_Ata_Cont_INTERNO && a.ALIQ_ICMS_ST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA != null && a.Aliq_Icms_ST_Venda_Ata_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA > a.Aliq_Icms_ST_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA < a.Aliq_Icms_ST_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA == a.Aliq_Icms_ST_Venda_Ata_Cont_INTERNO && a.ALIQ_ICMS_ST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA != null && a.Aliq_Icms_ST_Venda_Ata_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA > a.Aliq_Icms_ST_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA < a.Aliq_Icms_ST_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA == a.Aliq_Icms_ST_Venda_Ata_Cont_INTERNO && a.ALIQ_ICMS_ST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA != null && a.Aliq_Icms_ST_Venda_Ata_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA > a.Aliq_Icms_ST_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA < a.Aliq_Icms_ST_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA == a.Aliq_Icms_ST_Venda_Ata_Cont_INTERNO && a.ALIQ_ICMS_ST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA != null && a.Aliq_Icms_ST_Venda_Ata_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA > a.Aliq_Icms_ST_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA < a.Aliq_Icms_ST_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA == a.Aliq_Icms_ST_Venda_Ata_Cont_INTERNO && a.ALIQ_ICMS_ST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA != null && a.Aliq_Icms_ST_Venda_Ata_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;


            }//fim do switche

            //Action para procurar
            this.analiseSn = ProcuraPorSn(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analiseSn);

            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analiseSn = this.analiseSn.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analiseSn = this.analiseSn.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            int numeroPagina = (page ?? 1);

            return View(this.analiseSn.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }


        [HttpGet]
        public ActionResult EditClienteAliqIcmsSTVenAtaContMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();


            //registros salvos
            int regSalv = 0;
            int regNsalv = 0;
            string analiseRetorno = "";
            string analiseTrib = "";

            string ufOrigem = TempData["UfOrigem"].ToString();
            string ufDestino = TempData["UfDestino"].ToString();
            try
            {

                //laço de repetição para percorrer o array com os registros
                for (int i = 0; i < idTrib.Length; i++)
                {
                    //converter em inteiro
                    int idTrb = int.Parse(idTrib[i]);

                    //faz a busca no objeto criado instanciando um so objeto
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    if (this.empresa.simples_nacional.Equals(1))
                    {
                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        //AnaliseTributariaSn analiseSn = (from a in db.Analise_TributariaSn where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

                        AnaliseTributariaNCM analiseNCM = (from a in db.Analise_TributariaNCM where a.PRODUTO_NCM == trib.PRODUTO_NCM && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino && a.SIMP_NACIONAL_BASE == 1 select a).First();

                        analiseRetorno = (analiseNCM.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE == null) ? analiseRetorno : (analiseNCM.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE).ToString();

                        /*o mesmo acontece aqui, se for nulo ele permanece com valor 0.0*/
                        analiseTrib = (analiseNCM.ALIQ_ICMS_ST_VENDA_ATA == null) ? analiseTrib : (trib.ALIQ_ICMS_ST_VENDA_ATA);
                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.ALIQ_ICMS_ST_VENDA_ATA = "0.000";
                            }
                            else
                            {
                                trib.ALIQ_ICMS_ST_VENDA_ATA = analiseNCM.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE.ToString().Replace(",", ".");

                            }
                            trib.DT_ALTERACAO = DateTime.Now;
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos

                        }

                    }
                    else
                    {
                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        //AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino select a).First();
                        AnaliseTributariaNCM analiseNCM = (from a in db.Analise_TributariaNCM where a.PRODUTO_NCM == trib.PRODUTO_NCM && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino && a.SIMP_NACIONAL_BASE == 0 select a).First();

                        analiseRetorno = (analiseNCM.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE == null) ? analiseRetorno : (analiseNCM.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE).ToString();

                        /*o mesmo acontece aqui, se for nulo ele permanece com valor 0.0*/
                        analiseTrib = (analiseNCM.ALIQ_ICMS_ST_VENDA_ATA == null) ? analiseTrib : (trib.ALIQ_ICMS_ST_VENDA_ATA);
                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.ALIQ_ICMS_ST_VENDA_ATA = "0.000";
                            }
                            else
                            {
                                trib.ALIQ_ICMS_ST_VENDA_ATA = analiseNCM.ALIQ_ICMS_ST_VENDA_ATA.ToString().Replace(",", ".");

                            }
                            trib.DT_ALTERACAO = DateTime.Now;
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos

                        }

                    }




                }
                if (this.empresa.simples_nacional.Equals(1))
                {
                    TempData["analiseSN"] = null;
                    TempData["analise_NCM"] = null;

                }
                else
                {
                    TempData["analise"] = null;
                    TempData["analise_NCM"] = null;
                }

                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                string erro = e.ToString();
                resultado = "Problemas ao salvar o registro: " + erro;

            }






            //try
            //{
            //    if (this.empresa.simples_nacional.Equals(1))
            //    {
            //        //laço de repetição para percorrer o array com os registros
            //        for (int i = 0; i < idTrib.Length; i++)
            //        {
            //            //converter em inteiro
            //            int idTrb = int.Parse(idTrib[i]);

            //            //faz a busca no objeto criado instanciando um so objeto
            //            trib = db.TributacaoEmpresas.Find(idTrb);

            //            //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
            //            AnaliseTributariaSn analiseSn = (from a in db.Analise_TributariaSn where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();
            //            //pegar valores

            //            analiseRetorno = (analiseSn.Aliq_Icms_ST_Venda_Ata_Cont_INTERNO == null) ? analiseRetorno : analiseSn.Aliq_Icms_ST_Venda_Ata_Cont_INTERNO.ToString();

            //            analiseTrib = (analiseSn.ALIQ_ICMS_ST_VENDA_ATA == null) ? analiseTrib : (trib.ALIQ_ICMS_ST_VENDA_ATA);

            //            //analisar se já são iguais
            //            if (analiseTrib == analiseRetorno)
            //            {
            //                regNsalv++;
            //            }
            //            else
            //            {
            //                //verificar se a variavel veio 0.0
            //                if (analiseRetorno == "0")
            //                {
            //                    //se veio 0.0 o valor deve ser atribuido nulo
            //                    trib.ALIQ_ICMS_ST_VENDA_ATA = null;
            //                }
            //                else
            //                {
            //                    trib.ALIQ_ICMS_ST_VENDA_ATA = analiseSn.Aliq_Icms_ST_Venda_Ata_Cont_INTERNO.ToString().Replace(",", ".");

            //                }
            //                db.SaveChanges();
            //                regSalv++; //contagem de registros salvos
            //            }


            //        }
            //    }
            //    else
            //    {
            //        //laço de repetição para percorrer o array com os registros
            //        for (int i = 0; i < idTrib.Length; i++)
            //        {
            //            //converter em inteiro
            //            int idTrb = int.Parse(idTrib[i]);

            //            //faz a busca no objeto criado instanciando um so objeto
            //            trib = db.TributacaoEmpresas.Find(idTrb);

            //            //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
            //            AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();
            //            //pegar valores

            //            analiseRetorno = (analise.Aliq_Icms_ST_Venda_Ata_Cont_INTERNO == null) ? analiseRetorno : analise.Aliq_Icms_ST_Venda_Ata_Cont_INTERNO.ToString();

            //            analiseTrib = (analise.ALIQ_ICMS_ST_VENDA_ATA == null) ? analiseTrib : (trib.ALIQ_ICMS_ST_VENDA_ATA);

            //            //analisar se já são iguais
            //            if (analiseTrib == analiseRetorno)
            //            {
            //                regNsalv++;
            //            }
            //            else
            //            {
            //                //verificar se a variavel veio 0.0
            //                if (analiseRetorno == "0")
            //                {
            //                    //se veio 0.0 o valor deve ser atribuido nulo
            //                    trib.ALIQ_ICMS_ST_VENDA_ATA = null;
            //                }
            //                else
            //                {
            //                    trib.ALIQ_ICMS_ST_VENDA_ATA = analise.Aliq_Icms_ST_Venda_Ata_Cont_INTERNO.ToString().Replace(",", ".");

            //                }
            //                db.SaveChanges();
            //                regSalv++; //contagem de registros salvos
            //            }


            //        }
            //    }

                    


                
            //    resultado = "Registro Salvo com Sucesso!!";

            //}
            //catch (Exception e)
            //{
            //    resultado = "Problemas ao salvar o registro: " + e.ToString();

            //}
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EditClienteAliqIcmsSTVendaAtaContMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EditClienteAliqIcmsSTVendaAtaContMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }

          
        }
        
        [HttpGet]
        public ActionResult EditClienteAliqIcmsSTVenAtaContMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();

            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }

            return View(trib);
        }

        [HttpGet]
        public ActionResult EditClienteAliqIcmsSTVenAtaContMassaManualModalPost(string strDados, string aliqIcmsSTVenAtaContClienteManual)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //trocando o ponto por virgula
            aliqIcmsSTVenAtaContClienteManual = aliqIcmsSTVenAtaContClienteManual.Replace(",", ".");

            //separar a String em um array
            string[] idTrib = strDados.Split(',');
            string resultado = "";
            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();
            int regSalvos = 0;
            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.ALIQ_ICMS_ST_VENDA_ATA = (aliqIcmsSTVenAtaContClienteManual != "") ? trib.ALIQ_ICMS_ST_VENDA_ATA = aliqIcmsSTVenAtaContClienteManual : null;

                    db.SaveChanges();
                    regSalvos++;

                }

              
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }

            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EditClienteAliqIcmsSTVendaAtaContMassaSn", new { param = resultado, qtdSalvos = regSalvos });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EditClienteAliqIcmsSTVendaAtaContMassa", new { param = resultado, qtdSalvos = regSalvos });

            }
           
        }

        [HttpGet]
        public ActionResult EditClienteAliqIcmsSTVendaAtaContMassaTODOS(string opcao)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            this.ufOrigem = TempData["UfOrigem"].ToString();
            this.ufDestino = TempData["UfDestino"].ToString();

            //VerificaTempData();
            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao

            TributacaoEmpresa trib = new TributacaoEmpresa();

            if (opcao == "Alíquotas Maiores")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA > a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 60  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }

            if (opcao == "Alíquotas Menores")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA < a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 60  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }

            if (opcao == "Alíquotas Nulas no Cliente")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA == null && a.ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE != null && a.CST_VENDA_ATA_CONT_BASE == 60  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }

            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            string resultado = ""; //variavel auxiliar;
            //pega todos os ID para serem alterados
            //this.analiseSn.Count()
            for (int i = 0; i < this.analise_NCM.Count(); i++)
            {

                //converter em inteiro
                int? idTrb = (this.analise_NCM[i].TE_ID);
                trib = db.TributacaoEmpresas.Find(idTrb);//busca o registro
                trib.ALIQ_ICMS_ST_VENDA_ATA = this.analise_NCM[i].ALIQ_ICMS_ST_VENDA_ATA_CONT_BASE.ToString().Replace(",", ".");
                trib.DT_ALTERACAO = DateTime.Now;
                try
                {

                    db.SaveChanges();
                    regSalv++; //contagem de registros salvos
                               //toda vez que salvar, gravar uma nova lista e mandar para action



                }
                catch (Exception e)
                {
                    resultado = "Problemas ao salvar o registro: " + e.ToString();
                    regNsalv++;
                }

            }
            resultado = "Registro Salvo com Sucesso!!";


            //TempData["analise"] = null;
            TempData["analise_NCM"] = null;
            TempData.Keep("analise_NCM");
            //string[] idTrib = this.alanliseSN.
            //a analise vai me dar todos os ids


            return RedirectToAction("EditClienteAliqIcmsSTVendaAtaContMassa", new { param = resultado, qtdSalvos = regSalv, opcao = opcao });

        }
        
       
        /*Edição ICMS Venda Atacado para Simples Nacional*/
        [HttpGet]
        public ActionResult EditClienteAliqIcmsVendaAtaSNMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Alíquota ICMS  Venda no Atacado para SIMPLES NACIONAL no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }
            //se for simples nacional direciona para essa action
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["tributacao"] = "SIMPLES";
                TempData.Keep("tributacao");
            }
            else
            {
                TempData["tributacao"] = "OUTROS";
                TempData.Keep("tributacao");
            }
            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            //ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;
            VerificarLinhas(numeroLinhas);


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            ///*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            //TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            //opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            ////persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            //TempData.Keep("opcao");

            VerificarOpcaoAliq(filtroNulo, opcao);
            opcao = TempData["opcao"].ToString();


            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;
            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;
            if (this.empresa.simples_nacional.Equals(1))
            {
                return RedirectToAction("EditClienteAliqIcmsVendaAtaSNMassaSn", new { opcao = opcao });

            }


            //VerificaTempData();
            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao



            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                case "Alíquotas Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1"://MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL > a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2"://MENOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL < a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4"://NULA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5"://NULA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6"://NULAS AMBAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //isenta
                            this.analise_NCM = this.analise_NCM.Where(a =>a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 40 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "8": //nao tributada
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 41 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "9": //uso consumo
                            this.analise_NCM = this.analise_NCM.Where(a => a.PRODUTO_CATEGORIA == 21 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "10": //SUBST-TRIBUTARIA
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Menores":
                case "Alíquotas Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1"://MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL > a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2"://MENOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL < a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4"://NULA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5"://NULA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6"://NULAS AMBAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //isenta
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 40 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "8": //nao tributada
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 41 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "9": //uso consumo
                            this.analise_NCM = this.analise_NCM.Where(a => a.PRODUTO_CATEGORIA == 21 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "10": //SUBST-TRIBUTARIA
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Iguais":
                case "Alíquotas Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {
                        case "1"://MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL > a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2"://MENOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL < a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4"://NULA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5"://NULA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6"://NULAS AMBAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //isenta
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 40 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "8": //nao tributada
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 41 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "9": //uso consumo
                            this.analise_NCM = this.analise_NCM.Where(a => a.PRODUTO_CATEGORIA == 21 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "10": //SUBST-TRIBUTARIA
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Cliente":
                case "Alíquotas Nulas no Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1"://MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL > a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2"://MENOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL < a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4"://NULA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5"://NULA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6"://NULAS AMBAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //isenta
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 40 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "8": //nao tributada
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 41 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "9": //uso consumo
                            this.analise_NCM = this.analise_NCM.Where(a => a.PRODUTO_CATEGORIA == 21 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "10": //SUBST-TRIBUTARIA
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas MTX":
                case "Alíquotas Nulas no MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {
                        case "1"://MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL > a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2"://MENOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL < a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4"://NULA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5"://NULA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6"://NULAS AMBAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //isenta
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 40 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "8": //nao tributada
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 41 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "9": //uso consumo
                            this.analise_NCM = this.analise_NCM.Where(a => a.PRODUTO_CATEGORIA == 21 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "10": //SUBST-TRIBUTARIA
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulas Ambos":
                case "Alíquotas Nulas em Ambos":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "6";

                    switch (ViewBag.Filtro)
                    {
                        case "1"://MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL > a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2"://MENOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL < a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4"://NULA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5"://NULA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6"://NULAS AMBAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //isenta
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 40 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "8": //nao tributada
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 41 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "9": //uso consumo
                            this.analise_NCM = this.analise_NCM.Where(a => a.PRODUTO_CATEGORIA == 21 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "10": //SUBST-TRIBUTARIA
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Isentas":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "7";

                    switch (ViewBag.Filtro)
                    {
                        case "1"://MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL > a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2"://MENOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL < a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4"://NULA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5"://NULA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6"://NULAS AMBAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //isenta
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 40 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "8": //nao tributada
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 41 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "9": //uso consumo
                            this.analise_NCM = this.analise_NCM.Where(a => a.PRODUTO_CATEGORIA == 21 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "10": //SUBST-TRIBUTARIA
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Não Tributadas":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "8";

                    switch (ViewBag.Filtro)
                    {
                        case "1"://MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL > a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2"://MENOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL < a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4"://NULA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5"://NULA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6"://NULAS AMBAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //isenta
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 40 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "8": //nao tributada
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 41 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "9": //uso consumo
                            this.analise_NCM = this.analise_NCM.Where(a => a.PRODUTO_CATEGORIA == 21 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "10": //SUBST-TRIBUTARIA
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Uso Consumo":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "9";

                    switch (ViewBag.Filtro)
                    {
                        case "1"://MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL > a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2"://MENOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL < a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4"://NULA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5"://NULA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6"://NULAS AMBAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //isenta
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 40 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "8": //nao tributada
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 41 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "9": //uso consumo
                            this.analise_NCM = this.analise_NCM.Where(a => a.PRODUTO_CATEGORIA == 21 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "10": //SUBST-TRIBUTARIA
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Subst. Tributária":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "10";

                    switch (ViewBag.Filtro)
                    {
                        case "1"://MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL > a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2"://MENOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL < a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4"://NULA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5"://NULA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6"://NULAS AMBAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //isenta
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 40 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "8": //nao tributada
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 41 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "9": //uso consumo
                            this.analise_NCM = this.analise_NCM.Where(a => a.PRODUTO_CATEGORIA == 21 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "10": //SUBST-TRIBUTARIA
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;


            }//fim do switche

            //Action para procurar
            //analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);
            this.analise_NCM = ProcuraPorSnPorNCM(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analise_NCM);

            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analise_NCM = this.analise_NCM.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analise_NCM = this.analise_NCM.OrderBy(s => s.PRODUTO_NCM).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            //mandar a opção para que o javascript veja
            ViewBag.Opcao = opcao;

            int numeroPagina = (page ?? 1);

            return View(this.analise_NCM.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }


        /*Edição ICMS Venda Atacado para Simples Nacional*/
        [HttpGet]
        public ActionResult EditClienteAliqIcmsVendaAtaSNMassaSn(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Alíquota ICMS  Venda no Atacado para SIMPLES NACIONAL no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;


            VerificaTempDataSN();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL > a.Aliq_Icms_Venda_Ata_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL < a.Aliq_Icms_Venda_Ata_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == a.Aliq_Icms_Venda_Ata_Simp_Nacional_INTERNO && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.Aliq_Icms_Venda_Ata_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL > a.Aliq_Icms_Venda_Ata_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL < a.Aliq_Icms_Venda_Ata_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == a.Aliq_Icms_Venda_Ata_Simp_Nacional_INTERNO && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.Aliq_Icms_Venda_Ata_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL > a.Aliq_Icms_Venda_Ata_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL < a.Aliq_Icms_Venda_Ata_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == a.Aliq_Icms_Venda_Ata_Simp_Nacional_INTERNO && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.Aliq_Icms_Venda_Ata_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL > a.Aliq_Icms_Venda_Ata_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL < a.Aliq_Icms_Venda_Ata_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == a.Aliq_Icms_Venda_Ata_Simp_Nacional_INTERNO && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.Aliq_Icms_Venda_Ata_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL > a.Aliq_Icms_Venda_Ata_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL < a.Aliq_Icms_Venda_Ata_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == a.Aliq_Icms_Venda_Ata_Simp_Nacional_INTERNO && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.Aliq_Icms_Venda_Ata_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;


            }//fim do switche

            //Action para procurar
            this.analiseSn = ProcuraPorSn(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analiseSn);

            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analiseSn = this.analiseSn.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analiseSn = this.analiseSn.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            int numeroPagina = (page ?? 1);

            return View(this.analiseSn.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }

        [HttpGet]
        public ActionResult EditClienteAliqIcmsVenAtaSNMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];

            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();


            //registros salvos
            int regSalv = 0;
            int regNsalv = 0;
            string analiseRetorno = "";
            string analiseTrib = "";

            string ufOrigem = TempData["UfOrigem"].ToString();
            string ufDestino = TempData["UfDestino"].ToString();

            try
            {

                //laço de repetição para percorrer o array com os registros
                for (int i = 0; i < idTrib.Length; i++)
                {
                    //converter em inteiro
                    int idTrb = int.Parse(idTrib[i]);

                    //faz a busca no objeto criado instanciando um so objeto
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    if (this.empresa.simples_nacional.Equals(1))
                    {
                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        //AnaliseTributariaSn analiseSn = (from a in db.Analise_TributariaSn where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

                        AnaliseTributariaNCM analiseNCM = (from a in db.Analise_TributariaNCM where a.PRODUTO_NCM == trib.PRODUTO_NCM && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino && a.SIMP_NACIONAL_BASE == 1 select a).First();

                        analiseRetorno = (analiseNCM.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null) ? analiseRetorno : (analiseNCM.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE).ToString();

                        /*o mesmo acontece aqui, se for nulo ele permanece com valor 0.0*/
                        analiseTrib = (analiseNCM.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null) ? analiseTrib : (trib.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL);
                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL = "0.000";
                            }
                            else
                            {
                                trib.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL = analiseNCM.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE.ToString().Replace(",", ".");

                            }
                            trib.DT_ALTERACAO = DateTime.Now;
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos

                        }

                    }
                    else
                    {
                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        //AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino select a).First();
                        AnaliseTributariaNCM analiseNCM = (from a in db.Analise_TributariaNCM where a.PRODUTO_NCM == trib.PRODUTO_NCM && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino && a.SIMP_NACIONAL_BASE == 0 select a).First();

                        analiseRetorno = (analiseNCM.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null) ? analiseRetorno : (analiseNCM.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE).ToString();

                        /*o mesmo acontece aqui, se for nulo ele permanece com valor 0.0*/
                        analiseTrib = (analiseNCM.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null) ? analiseTrib : (trib.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL);
                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL = "0.000";
                            }
                            else
                            {
                                trib.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL = analiseNCM.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE.ToString().Replace(",", ".");

                            }
                            trib.DT_ALTERACAO = DateTime.Now;
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos

                        }

                    }




                }
                if (this.empresa.simples_nacional.Equals(1))
                {
                    TempData["analiseSN"] = null;
                    TempData["analise_NCM"] = null;

                }
                else
                {
                    TempData["analise"] = null;
                    TempData["analise_NCM"] = null;
                }

                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                string erro = e.ToString();
                resultado = "Problemas ao salvar o registro: " + erro;

            }


                       

            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EditClienteAliqIcmsVendaAtaSNMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EditClienteAliqIcmsVendaAtaSNMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }
            
        }

        [HttpGet]
        public ActionResult EditClienteAliqIcmsVenAtaSNMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();

            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }

            return View(trib);

        }

        [HttpGet]
        public ActionResult EditClienteAliqIcmsVenAtaSNMassaManualModalPost(string strDados, string aliqIcmsVenAtaSNClienteManual)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //trocando o ponto por virgula
            aliqIcmsVenAtaSNClienteManual = aliqIcmsVenAtaSNClienteManual.Replace(",", ".");

            //separar a String em um array
            string[] idTrib = strDados.Split(',');
            string resultado = "";
            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();
            int regSalvos = 0;
            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL = (aliqIcmsVenAtaSNClienteManual != "") ? trib.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL = aliqIcmsVenAtaSNClienteManual : null;

                    db.SaveChanges();
                    regSalvos++;

                }

               
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }


            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EditClienteAliqIcmsVendaAtaSNMassaSn", new { param = resultado, qtdSalvos = regSalvos });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EditClienteAliqIcmsVendaAtaSNMassa", new { param = resultado, qtdSalvos = regSalvos });

            }

        }

        [HttpGet]
        public ActionResult EditClienteAliqIcmsVendaAtaSNMassaTODOS(string opcao)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            this.ufOrigem = TempData["UfOrigem"].ToString();
            this.ufDestino = TempData["UfDestino"].ToString();

            //VerificaTempData();
            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao

            TributacaoEmpresa trib = new TributacaoEmpresa();

            if (opcao == "Alíquotas Maiores")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL > a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }

            if (opcao == "Alíquotas Menores")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL < a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }

            if (opcao == "Alíquotas Nulas no Cliente")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 60 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 40 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 41 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }
           
            if (opcao == "Subst.Tributária")
            {
                this.analise_NCM = this.analise_NCM.Where(a =>a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }
            if (opcao == "Não Tributadas")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 41 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }
            if (opcao == "Isentas")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 40 && (a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL == null || a.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL != null) && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }


            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            string resultado = ""; //variavel auxiliar;
            //pega todos os ID para serem alterados
            //this.analiseSn.Count()
            for (int i = 0; i < this.analise_NCM.Count(); i++)
            {

                //converter em inteiro
                int? idTrb = (this.analise_NCM[i].TE_ID);
                trib = db.TributacaoEmpresas.Find(idTrb);//busca o registro
                trib.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL = this.analise_NCM[i].ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE.ToString().Replace(",", ".");
                trib.DT_ALTERACAO = DateTime.Now;
                try
                {

                    db.SaveChanges();
                    regSalv++; //contagem de registros salvos
                               //toda vez que salvar, gravar uma nova lista e mandar para action



                }
                catch (Exception e)
                {
                    resultado = "Problemas ao salvar o registro: " + e.ToString();
                    regNsalv++;
                }

            }
            resultado = "Registro Salvo com Sucesso!!";


            //TempData["analise"] = null;
            TempData["analise_NCM"] = null;
            TempData.Keep("analise_NCM");
            //string[] idTrib = this.alanliseSN.
            //a analise vai me dar todos os ids


            return RedirectToAction("EditClienteAliqIcmsVendaAtaSNMassa", new { param = resultado, qtdSalvos = regSalv, opcao = opcao });

        }

                            


        /*Edição ICMS ST Venda Atacado para Simples Nacional*/
        [HttpGet]
        public ActionResult EditClienteAliqIcmsSTVendaAtaSNMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Alíquota ICMS ST Venda no Atacado para SIMPLES NACIONAL no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }
            //se for simples nacional direciona para essa action
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["tributacao"] = "SIMPLES";
                TempData.Keep("tributacao");
            }
            else
            {
                TempData["tributacao"] = "OUTROS";
                TempData.Keep("tributacao");
            }
            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            //ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;
            VerificarLinhas(numeroLinhas);


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            ///*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            //TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            //opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            ////persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            //TempData.Keep("opcao");
            VerificarOpcaoAliq(filtroNulo, opcao);
            opcao = TempData["opcao"].ToString();
            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;
            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 
            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;


            if (this.empresa.simples_nacional.Equals(1))
            {
                return RedirectToAction("EditClienteAliqIcmsSTVendaAtaSNMassaSn", new { opcao = opcao });

            }
            //VerificaTempData();

           

            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao


            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                case "Alíquotas Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1"://MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL > a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL < a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4"://NULA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5"://NULA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULAS AMBAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                      



                    }
                    break;
                case "Menores":
                case "Alíquotas Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1"://MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL > a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL < a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4"://NULA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5"://NULA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULAS AMBAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Iguais":
                case "Alíquotas Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {
                        case "1"://MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL > a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL < a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4"://NULA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5"://NULA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULAS AMBAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulas Cliente":
                case "Alíquotas Nulas no Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1"://MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL > a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL < a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4"://NULA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5"://NULA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULAS AMBAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulas MTX":
                case "Alíquotas Nulas no MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {
                        case "1"://MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL > a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL < a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4"://NULA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5"://NULA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULAS AMBAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Nulas Ambos":
                case "Alíquotas Nulas em Ambos":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "6";

                    switch (ViewBag.Filtro)
                    {
                        case "1"://MAIOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL > a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //MENOR
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL < a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4"://NULA CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5"://NULA MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //NULAS AMBAS
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
       



            }//fim do switche

            //Action para procurar
            //analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);
            this.analise_NCM = ProcuraPorSnPorNCM(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analise_NCM);


            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analise_NCM = this.analise_NCM.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analise_NCM = this.analise_NCM.OrderBy(s => s.PRODUTO_NCM).ToList();
                    break;
            }
            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";


            //mandar a opção para que o javascript veja
            ViewBag.Opcao = opcao;

            int numeroPagina = (page ?? 1);

            return View(this.analise_NCM.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }


      
        /*Edição ICMS ST Venda Atacado para Simples Nacional*/
        [HttpGet]
        public ActionResult EditClienteAliqIcmsSTVendaAtaSNMassaSn(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Alíquota ICMS ST Venda no Atacado para SIMPLES NACIONAL no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;



            VerificaTempDataSN();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL > a.Aliq_Icms_ST_Venda_Ata_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL < a.Aliq_Icms_ST_Venda_Ata_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == a.Aliq_Icms_ST_Venda_Ata_Simp_Nacional_INTERNO && a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.Aliq_Icms_ST_Venda_Ata_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL > a.Aliq_Icms_ST_Venda_Ata_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL < a.Aliq_Icms_ST_Venda_Ata_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == a.Aliq_Icms_ST_Venda_Ata_Simp_Nacional_INTERNO && a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.Aliq_Icms_ST_Venda_Ata_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL > a.Aliq_Icms_ST_Venda_Ata_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL < a.Aliq_Icms_ST_Venda_Ata_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == a.Aliq_Icms_ST_Venda_Ata_Simp_Nacional_INTERNO && a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.Aliq_Icms_ST_Venda_Ata_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL > a.Aliq_Icms_ST_Venda_Ata_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL < a.Aliq_Icms_ST_Venda_Ata_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == a.Aliq_Icms_ST_Venda_Ata_Simp_Nacional_INTERNO && a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.Aliq_Icms_ST_Venda_Ata_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL > a.Aliq_Icms_ST_Venda_Ata_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL < a.Aliq_Icms_ST_Venda_Ata_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == a.Aliq_Icms_ST_Venda_Ata_Simp_Nacional_INTERNO && a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.Aliq_Icms_ST_Venda_Ata_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;


            }//fim do switche

            //Action para procurar
            this.analiseSn = ProcuraPorSn(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analiseSn);

            switch (ordenacao)
            {
                case "Produto_desc":
                    analise = analise.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    analise = analise.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            int numeroPagina = (page ?? 1);

            return View(this.analiseSn.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }


        [HttpGet]
        public ActionResult EditClienteAliqIcmsSTVenAtaSNMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();


            //registros salvos
            int regSalv = 0;
            int regNsalv = 0;
            string analiseRetorno = "";
            string analiseTrib = "";

            string ufOrigem = TempData["UfOrigem"].ToString();
            string ufDestino = TempData["UfDestino"].ToString();

            try
            {

                //laço de repetição para percorrer o array com os registros
                for (int i = 0; i < idTrib.Length; i++)
                {
                    //converter em inteiro
                    int idTrb = int.Parse(idTrib[i]);

                    //faz a busca no objeto criado instanciando um so objeto
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    if (this.empresa.simples_nacional.Equals(1))
                    {
                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        //AnaliseTributariaSn analiseSn = (from a in db.Analise_TributariaSn where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

                        AnaliseTributariaNCM analiseNCM = (from a in db.Analise_TributariaNCM where a.PRODUTO_NCM == trib.PRODUTO_NCM && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino && a.SIMP_NACIONAL_BASE == 1 select a).First();

                        analiseRetorno = (analiseNCM.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE == null) ? analiseRetorno : (analiseNCM.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE).ToString();

                        /*o mesmo acontece aqui, se for nulo ele permanece com valor 0.0*/
                        analiseTrib = (analiseNCM.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null) ? analiseTrib : (trib.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL);
                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL = "0.000";
                            }
                            else
                            {
                                trib.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL = analiseNCM.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE.ToString().Replace(",", ".");

                            }
                            trib.DT_ALTERACAO = DateTime.Now;
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos

                        }

                    }
                    else
                    {
                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        //AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino select a).First();
                        AnaliseTributariaNCM analiseNCM = (from a in db.Analise_TributariaNCM where a.PRODUTO_NCM == trib.PRODUTO_NCM && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino && a.SIMP_NACIONAL_BASE == 0 select a).First();


                        analiseRetorno = (analiseNCM.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE == null) ? analiseRetorno : (analiseNCM.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE).ToString();

                        /*o mesmo acontece aqui, se for nulo ele permanece com valor 0.0*/
                        analiseTrib = (analiseNCM.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null) ? analiseTrib : (trib.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL);
                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.ALIQ_ICMS_VENDA_ATA_SIMP_NACIONAL = "0.000";
                            }
                            else
                            {
                                trib.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL = analiseNCM.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE.ToString().Replace(",", ".");

                            }
                            trib.DT_ALTERACAO = DateTime.Now;
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos

                        }

                    }




                }
                if (this.empresa.simples_nacional.Equals(1))
                {
                    TempData["analiseSN"] = null;
                    TempData["analise_NCM"] = null;

                }
                else
                {
                    TempData["analise"] = null;
                    TempData["analise_NCM"] = null;
                }

                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                string erro = e.ToString();
                resultado = "Problemas ao salvar o registro: " + erro;

            }



            

            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EditClienteAliqIcmsSTVendaAtaSNMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EditClienteAliqIcmsSTVendaAtaSNMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }
            
        }

        [HttpGet]
        public ActionResult EditClienteAliqIcmsSTVenAtaSNMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();

            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }

            return View(trib);
        }

        [HttpGet]
        public ActionResult EditClienteAliqIcmsSTVenAtaSNMassaManualModalPost(string strDados, string aliqIcmsSTVenAtaSNClienteManual)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //trocando o ponto por virgula
            aliqIcmsSTVenAtaSNClienteManual = aliqIcmsSTVenAtaSNClienteManual.Replace(",", ".");

            //separar a String em um array
            string[] idTrib = strDados.Split(',');
            string resultado = "";
            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();
            int regSalvos = 0;
            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL = (aliqIcmsSTVenAtaSNClienteManual != "") ? trib.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL = aliqIcmsSTVenAtaSNClienteManual : null;

                    db.SaveChanges();
                    regSalvos++;

                }

                TempData["analise"] = null;
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }

            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EditClienteAliqIcmsSTVendaAtaSNMassaSn", new { param = resultado, qtdSalvos = regSalvos });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EditClienteAliqIcmsSTVendaAtaSNMassa", new { param = resultado, qtdSalvos = regSalvos });

            }

         
        }


        [HttpGet]
        public ActionResult EditClienteAliqIcmsSTVendaAtaSNMassaTODOS(string opcao)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            this.ufOrigem = TempData["UfOrigem"].ToString();
            this.ufDestino = TempData["UfDestino"].ToString();

            //VerificaTempData();
            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao

            TributacaoEmpresa trib = new TributacaoEmpresa();

            if (opcao == "Alíquotas Maiores")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL > a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }

            if (opcao == "Alíquotas Menores")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL < a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }

            if (opcao == "Alíquotas Nulas no Cliente")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 60  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }

            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            string resultado = ""; //variavel auxiliar;
            //pega todos os ID para serem alterados
            //this.analiseSn.Count()
            for (int i = 0; i < this.analise_NCM.Count(); i++)
            {

                //converter em inteiro
                int? idTrb = (this.analise_NCM[i].TE_ID);
                trib = db.TributacaoEmpresas.Find(idTrb);//busca o registro
                trib.ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL = this.analise_NCM[i].ALIQ_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE.ToString().Replace(",", ".");
                trib.DT_ALTERACAO = DateTime.Now;
                try
                {

                    db.SaveChanges();
                    regSalv++; //contagem de registros salvos
                               //toda vez que salvar, gravar uma nova lista e mandar para action



                }
                catch (Exception e)
                {
                    resultado = "Problemas ao salvar o registro: " + e.ToString();
                    regNsalv++;
                }

            }
            resultado = "Registro Salvo com Sucesso!!";


            //TempData["analise"] = null;
            TempData["analise_NCM"] = null;
            TempData.Keep("analise_NCM");
            //string[] idTrib = this.alanliseSN.
            //a analise vai me dar todos os ids


            return RedirectToAction("EditClienteAliqIcmsSTVendaAtaSNMassa", new { param = resultado, qtdSalvos = regSalv, opcao = opcao });
        }



        /*Edição Red Base de Calc ICMS Venda Consumidor Final*/
        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsVenVarCFMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Redução Base de Calc. ICMS Venda para CONSUMIDOR FINAL no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }
            //se for simples nacional direciona para essa action
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["tributacao"] = "SIMPLES";
                TempData.Keep("tributacao");
            }
            else
            {
                TempData["tributacao"] = "OUTROS";
                TempData.Keep("tributacao");
            }
            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            //ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;
            VerificarLinhas(numeroLinhas);


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            ///*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            //TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            //opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            ////persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            //TempData.Keep("opcao");


            VerificarOpcaoRed(filtroNulo, opcao);
            opcao = TempData["opcao"].ToString();

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            if (this.empresa.simples_nacional.Equals(1))
            {
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsVenVarCFMassaSn", new { opcao = opcao });

            }

            //VerificaTempData();

            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao



            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                case "Alíquotas Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL > a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL < a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //ambos
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //ambos
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 20 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 70).ToList();
                            break;

                    }
                    break;
                case "Menores":
                case "Alíquotas Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL > a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL < a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == 0.00 && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE != 0.00 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL != 0.00 && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == 0.00 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //ambos
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == 0.00 && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == 0.00 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //ambos
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 20 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 70).ToList();
                            break;

                    }
                    break;
                case "Iguais":
                case "Alíquotas Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL > a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL < a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == 0.00 && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE != 0.00 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL != 0.00 && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == 0.00 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //ambos
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == 0.00 && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == 0.00 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //ambos
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 20 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 70).ToList();
                            break;
                    }
                    break;
                case "Nulas Cliente":
                case "Alíquotas Nulas no Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL > a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL < a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == 0.00 && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE != 0.00 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL != 0.00 && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == 0.00 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //ambos
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == 0.00 && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == 0.00 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //ambos
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 20 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 70).ToList();
                            break;
                    }
                    break;
                case "Nulas MTX":
                case "Alíquotas Nulas no MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL > a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL < a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == 0.00 && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE != 0.00 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL != 0.00 && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == 0.00 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //ambos
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == 0.00 && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == 0.00 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //ambos
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 20 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 70).ToList();
                            break;

                    }
                    break;
                case "Nulas Ambos":
                case "Alíquotas Nulas em Ambos":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "6";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL > a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL < a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == 0.00 && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE != 0.00 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL != 0.00 && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == 0.00 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //ambos
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == 0.00 && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == 0.00 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //ambos
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 20 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 70).ToList();
                            break;

                    }
                    break;
                case "Sem Redução":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "7";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL > a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL < a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == 0.00 && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE != 0.00 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL != 0.00 && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == 0.00 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //ambos
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == 0.00 && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == 0.00 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //ambos
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 20 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 70).ToList();
                            break;

                    }
                    break;


            }//fim do switche

            //Action para procurar
            //analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);
            this.analise_NCM = ProcuraPorSnPorNCM(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analise_NCM);

            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analise_NCM = this.analise_NCM.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analise_NCM = this.analise_NCM.OrderBy(s => s.PRODUTO_NCM).ToList();
                    break;
            }


            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";


            //mandar a opção para que o javascript veja
            ViewBag.Opcao = opcao;

            int numeroPagina = (page ?? 1);

            return View(this.analise_NCM.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }




        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsVenVarCFMassaSn(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas) 
        {

            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Redução Base de Calc. ICMS Venda para CONSUMIDOR FINAL no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;

            VerificaTempDataSN();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                           this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL > a.Red_Base_Calc_Icms_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL < a.Red_Base_Calc_Icms_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == a.Red_Base_Calc_Icms_Venda_Varejo_Cons_Final_INTERNO && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.Red_Base_Calc_Icms_Venda_Varejo_Cons_Final_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL > a.Red_Base_Calc_Icms_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL < a.Red_Base_Calc_Icms_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == a.Red_Base_Calc_Icms_Venda_Varejo_Cons_Final_INTERNO && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.Red_Base_Calc_Icms_Venda_Varejo_Cons_Final_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL > a.Red_Base_Calc_Icms_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL < a.Red_Base_Calc_Icms_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == a.Red_Base_Calc_Icms_Venda_Varejo_Cons_Final_INTERNO && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.Red_Base_Calc_Icms_Venda_Varejo_Cons_Final_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL > a.Red_Base_Calc_Icms_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL < a.Red_Base_Calc_Icms_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == a.Red_Base_Calc_Icms_Venda_Varejo_Cons_Final_INTERNO && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.Red_Base_Calc_Icms_Venda_Varejo_Cons_Final_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL > a.Red_Base_Calc_Icms_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL < a.Red_Base_Calc_Icms_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == a.Red_Base_Calc_Icms_Venda_Varejo_Cons_Final_INTERNO && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.Red_Base_Calc_Icms_Venda_Varejo_Cons_Final_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;


            }//fim do switche

            //Action para procurar
            this.analiseSn = ProcuraPorSn(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analiseSn);

            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analiseSn = this.analiseSn.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analiseSn = this.analiseSn.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            int numeroPagina = (page ?? 1);

            return View(this.analiseSn.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada

        }
        
        
        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsVenVarCFMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();


            //registros salvos
            int regSalv = 0;
            int regNsalv = 0;
            string analiseRetorno = "";
            string analiseTrib = "";

            string ufOrigem = TempData["UfOrigem"].ToString();
            string ufDestino = TempData["UfDestino"].ToString();

            try
            {

                //laço de repetição para percorrer o array com os registros
                for (int i = 0; i < idTrib.Length; i++)
                {
                    //converter em inteiro
                    int idTrb = int.Parse(idTrib[i]);

                    //faz a busca no objeto criado instanciando um so objeto
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    if (this.empresa.simples_nacional.Equals(1))
                    {
                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        //AnaliseTributariaSn analiseSn = (from a in db.Analise_TributariaSn where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

                        AnaliseTributariaNCM analiseNCM = (from a in db.Analise_TributariaNCM where a.PRODUTO_NCM == trib.PRODUTO_NCM && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino && a.SIMP_NACIONAL_BASE == 1 select a).First();

                        analiseRetorno = (analiseNCM.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == null) ? analiseRetorno : (analiseNCM.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE).ToString();
                      
                        /*o mesmo acontece aqui, se for nulo ele permanece com valor 0.0*/
                        analiseTrib = (analiseNCM.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == null) ? analiseTrib : (trib.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL);
                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL = "0.000";
                            }
                            else
                            {
                                trib.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL = analiseNCM.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL.ToString().Replace(",", ".");

                            }
                            trib.DT_ALTERACAO = DateTime.Now;
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos

                        }

                    }
                    else
                    {
                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        //AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino select a).First();
                        AnaliseTributariaNCM analiseNCM = (from a in db.Analise_TributariaNCM where a.PRODUTO_NCM == trib.PRODUTO_NCM && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino && a.SIMP_NACIONAL_BASE == 0 select a).First();

                        analiseRetorno = (analiseNCM.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == null) ? analiseRetorno : (analiseNCM.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE).ToString();

                        /*o mesmo acontece aqui, se for nulo ele permanece com valor 0.0*/
                        analiseTrib = (analiseNCM.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == null) ? analiseTrib : (trib.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL);
                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL = "0.000";
                            }
                            else
                            {
                                trib.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL = analiseNCM.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE.ToString().Replace(",", ".");

                            }
                            trib.DT_ALTERACAO = DateTime.Now;
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos

                        }

                    }




                }
                if (this.empresa.simples_nacional.Equals(1))
                {
                    TempData["analiseSN"] = null;
                    TempData["analise_NCM"] = null;

                }
                else
                {
                    TempData["analise"] = null;
                    TempData["analise_NCM"] = null;
                }

                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                string erro = e.ToString();
                resultado = "Problemas ao salvar o registro: " + erro;

            }


         
            if (this.empresa.simples_nacional.Equals(1))
            {
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsVenVarCFMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });


            }
            else
            {
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsVenVarCFMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }

           
        }

        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsVenVarCFMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();

            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }

            return View(trib);
        }

        [HttpGet] 
        public ActionResult EdtCliAliqRedBasCalcIcmsVenVarCFMassaManualModalPost(string strDados, string redBasCalcAliqIcmsVenVarCF)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //trocando o ponto por virgula
            redBasCalcAliqIcmsVenVarCF = redBasCalcAliqIcmsVenVarCF.Replace(",", ".");

            //separar a String em um array
            string[] idTrib = strDados.Split(',');
            string resultado = "";
            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();
            int regSalvos = 0;
            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL = (redBasCalcAliqIcmsVenVarCF != "") ? trib.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL = redBasCalcAliqIcmsVenVarCF : null;

                    db.SaveChanges();
                    regSalvos++;

                }

                TempData["analise"] = null;
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsVenVarCFMassaSn", new { param = resultado, qtdSalvos = regSalvos });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsVenVarCFMassa", new { param = resultado, qtdSalvos = regSalvos });

            }

           
        }




        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsVenVarCFMassaTODOS(string opcao)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            this.ufOrigem = TempData["UfOrigem"].ToString();
            this.ufDestino = TempData["UfDestino"].ToString();

            //VerificaTempData();
            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao

            TributacaoEmpresa trib = new TributacaoEmpresa();

            if (opcao == "Alíquotas Maiores")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL > a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }

            if (opcao == "Alíquotas Menores")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL < a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }

            if (opcao == "Alíquotas Nulas no Cliente")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == null && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }

            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            string resultado = ""; //variavel auxiliar;
            //pega todos os ID para serem alterados
            //this.analiseSn.Count()
            for (int i = 0; i < this.analise_NCM.Count(); i++)
            {
                //TO-DO
                //converter em inteiro
                int? idTrb = (this.analise_NCM[i].TE_ID);
                trib = db.TributacaoEmpresas.Find(idTrb);//busca o registro
                trib.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL = this.analise_NCM[i].RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE.ToString().Replace(",", ".");
                trib.DT_ALTERACAO = DateTime.Now;
                try
                {

                    db.SaveChanges();
                    regSalv++; //contagem de registros salvos
                               //toda vez que salvar, gravar uma nova lista e mandar para action



                }
                catch (Exception e)
                {
                    resultado = "Problemas ao salvar o registro: " + e.ToString();
                    regNsalv++;
                }

            }
            resultado = "Registro Salvo com Sucesso!!";


         
            TempData["analise_NCM"] = null;
            TempData.Keep("analise_NCM");
           

            return RedirectToAction("EdtCliAliqRedBasCalcIcmsVenVarCFMassa", new { param = resultado, qtdSalvos = regSalv, opcao = opcao });
        }



        /*Edição Red Base de Calc ICMS ST Venda Consumidor Final*/
        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsSTVenVarCFMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Redução Base de Calc. ICMS ST Venda para CONSUMIDOR FINAL no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }
            //se for simples nacional direciona para essa action
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["tributacao"] = "SIMPLES";
                TempData.Keep("tributacao");
            }
            else
            {
                TempData["tributacao"] = "OUTROS";
                TempData.Keep("tributacao");
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            //ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;
            VerificarLinhas(numeroLinhas);


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            ///*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            //TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            //opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            ////persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            //TempData.Keep("opcao");

            VerificarOpcaoRed(filtroNulo, opcao);
            opcao = TempData["opcao"].ToString();

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();

            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            if (this.empresa.simples_nacional.Equals(1))
            {
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsSTVenVarCFMassaSn", new { opcao = opcao });

            }
            //VerificaTempData();
            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao


            

            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                case "Alíquotas Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL > a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL < a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL == a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //ambos
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //Sem Redução
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Menores":
                case "Alíquotas Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL > a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL < a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL == a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //ambos
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //Sem Redução
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Iguais":
                case "Alíquotas Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL > a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL < a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL == a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //ambos
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //Sem Redução
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulas Cliente":
                case "Alíquotas Nulas no Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL > a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL < a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL == a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //ambos
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //Sem Redução
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulas MTX":
                case "Alíquotas Nulas no MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL > a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL < a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL == a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //ambos
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //Sem Redução
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Ambos":
                case "Alíquotas Nulas em Ambos":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "6";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL > a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL < a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL == a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //ambos
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //Sem Redução
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Sem Redução":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "7";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL > a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL < a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL == a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //ambos
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //Sem Redução
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;


            }//fim do switche

            //Action para procurar
            //analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);
            this.analise_NCM = ProcuraPorSnPorNCM(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analise_NCM);


            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analise_NCM = this.analise_NCM.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analise_NCM = this.analise_NCM.OrderBy(s => s.PRODUTO_NCM).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            //mandar a opção para que o javascript veja
            ViewBag.Opcao = opcao;

            int numeroPagina = (page ?? 1);

            return View(this.analise_NCM.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }


        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsSTVenVarCFMassaSn(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Redução Base de Calc. ICMS ST Venda para CONSUMIDOR FINAL no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;



            VerificaTempDataSN();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL > a.Red_Base_Calc_Icms_ST_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL < a.Red_Base_Calc_Icms_ST_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL == a.Red_Base_Calc_Icms_ST_Venda_Varejo_Cons_Final_INTERNO && a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.Red_Base_Calc_Icms_ST_Venda_Varejo_Cons_Final_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL > a.Red_Base_Calc_Icms_ST_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL < a.Red_Base_Calc_Icms_ST_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL == a.Red_Base_Calc_Icms_ST_Venda_Varejo_Cons_Final_INTERNO && a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.Red_Base_Calc_Icms_ST_Venda_Varejo_Cons_Final_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL > a.Red_Base_Calc_Icms_ST_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL < a.Red_Base_Calc_Icms_ST_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL == a.Red_Base_Calc_Icms_ST_Venda_Varejo_Cons_Final_INTERNO && a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.Red_Base_Calc_Icms_ST_Venda_Varejo_Cons_Final_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL > a.Red_Base_Calc_Icms_ST_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL < a.Red_Base_Calc_Icms_ST_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL == a.Red_Base_Calc_Icms_ST_Venda_Varejo_Cons_Final_INTERNO && a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.Red_Base_Calc_Icms_ST_Venda_Varejo_Cons_Final_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL > a.Red_Base_Calc_Icms_ST_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL < a.Red_Base_Calc_Icms_ST_Venda_Varejo_Cons_Final_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL == a.Red_Base_Calc_Icms_ST_Venda_Varejo_Cons_Final_INTERNO && a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL != null && a.Red_Base_Calc_Icms_ST_Venda_Varejo_Cons_Final_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;


            }//fim do switche

            //Action para procurar
            this.analiseSn = ProcuraPorSn(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analiseSn);

            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analiseSn = this.analiseSn.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analiseSn = this.analiseSn.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            int numeroPagina = (page ?? 1);

            return View(this.analiseSn.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }


        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsSTVenVarCFMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();


            //registros salvos
            int regSalv = 0;
            int regNsalv = 0;
            string analiseRetorno = "";
            string analiseTrib = "";

            string ufOrigem = TempData["UfOrigem"].ToString();
            string ufDestino = TempData["UfDestino"].ToString();


            try
            {

                //laço de repetição para percorrer o array com os registros
                for (int i = 0; i < idTrib.Length; i++)
                {
                    //converter em inteiro
                    int idTrb = int.Parse(idTrib[i]);

                    //faz a busca no objeto criado instanciando um so objeto
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    if (this.empresa.simples_nacional.Equals(1))
                    {
                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        //AnaliseTributariaSn analiseSn = (from a in db.Analise_TributariaSn where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

                        AnaliseTributariaNCM analiseNCM = (from a in db.Analise_TributariaNCM where a.PRODUTO_NCM == trib.PRODUTO_NCM && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino && a.SIMP_NACIONAL_BASE == 1 select a).First();

                        analiseRetorno = (analiseNCM.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE == null) ? analiseRetorno : (analiseNCM.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE).ToString();

                        /*o mesmo acontece aqui, se for nulo ele permanece com valor 0.0*/
                        analiseTrib = (analiseNCM.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null) ? analiseTrib : (trib.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL);
                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL = "0.000";
                            }
                            else
                            {
                                trib.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL = analiseNCM.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE.ToString().Replace(",", ".");

                            }
                            trib.DT_ALTERACAO = DateTime.Now;
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos

                        }

                    }
                    else
                    {
                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        //AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino select a).First();
                        AnaliseTributariaNCM analiseNCM = (from a in db.Analise_TributariaNCM where a.PRODUTO_NCM == trib.PRODUTO_NCM && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino && a.SIMP_NACIONAL_BASE == 0 select a).First();

                        analiseRetorno = (analiseNCM.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE == null) ? analiseRetorno : (analiseNCM.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE).ToString();

                        /*o mesmo acontece aqui, se for nulo ele permanece com valor 0.0*/
                        analiseTrib = (analiseNCM.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null) ? analiseTrib : (trib.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL);
                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL = "0.000";
                            }
                            else
                            {
                                trib.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL = analiseNCM.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE.ToString().Replace(",", ".");

                            }
                            trib.DT_ALTERACAO = DateTime.Now;
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos

                        }

                    }




                }
                if (this.empresa.simples_nacional.Equals(1))
                {
                    TempData["analiseSN"] = null;
                    TempData["analise_NCM"] = null;

                }
                else
                {
                    TempData["analise"] = null;
                    TempData["analise_NCM"] = null;
                }

                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                string erro = e.ToString();
                resultado = "Problemas ao salvar o registro: " + erro;

            }





            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsSTVenVarCFMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsSTVenVarCFMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }
            
        }

        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsSTVenVarCFMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();

            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }

            return View(trib);
        }

        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsSTVenVarCFMassaManualModalPost(string strDados, string redBasCalcAliqIcmsSTVenVarCF)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //trocando o ponto por virgula
            redBasCalcAliqIcmsSTVenVarCF = redBasCalcAliqIcmsSTVenVarCF.Replace(",", ".");

            //separar a String em um array
            string[] idTrib = strDados.Split(',');
            string resultado = "";
            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();
            int regSalvos = 0;
            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL = (redBasCalcAliqIcmsSTVenVarCF != "") ? trib.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL = redBasCalcAliqIcmsSTVenVarCF : null;

                    db.SaveChanges();
                    regSalvos++;

                }

                TempData["analise"] = null;
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }

            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsSTVenVarCFMassaSn", new { param = resultado, qtdSalvos = regSalvos });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsSTVenVarCFMassa", new { param = resultado, qtdSalvos = regSalvos });

            }

           
        }




        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsSTVenVarCFMassaTODOS(string opcao)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            this.ufOrigem = TempData["UfOrigem"].ToString();
            this.ufDestino = TempData["UfDestino"].ToString();

            //VerificaTempData();
            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao

            TributacaoEmpresa trib = new TributacaoEmpresa();

            if (opcao == "Alíquotas Maiores")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL > a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }

            if (opcao == "Alíquotas Menores")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL < a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }

            if (opcao == "Alíquotas Nulas no Cliente")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL == null && a.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }

            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            string resultado = ""; //variavel auxiliar;
            //pega todos os ID para serem alterados
            //this.analiseSn.Count()
            for (int i = 0; i < this.analise_NCM.Count(); i++)
            {

                //converter em inteiro
                int? idTrb = (this.analise_NCM[i].TE_ID);
                trib = db.TributacaoEmpresas.Find(idTrb);//busca o registro
                trib.RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL = this.analise_NCM[i].RED_BASE_CALC_ICMS_ST_VENDA_VAREJO_CONS_FINAL_BASE.ToString().Replace(",", ".");
                trib.DT_ALTERACAO = DateTime.Now;
                try
                {

                    db.SaveChanges();
                    regSalv++; //contagem de registros salvos
                               //toda vez que salvar, gravar uma nova lista e mandar para action



                }
                catch (Exception e)
                {
                    resultado = "Problemas ao salvar o registro: " + e.ToString();
                    regNsalv++;
                }

            }
            resultado = "Registro Salvo com Sucesso!!";


            //TempData["analise"] = null;
            TempData["analise_NCM"] = null;
            TempData.Keep("analise_NCM");
            //string[] idTrib = this.alanliseSN.
            //a analise vai me dar todos os ids


            return RedirectToAction("EdtCliAliqRedBasCalcIcmsSTVenVarCFMassa", new { param = resultado, qtdSalvos = regSalv, opcao = opcao });
        }



        /*Edição Red Base de Calc ICMS Venda varejo para contrbuinte*/
        [HttpGet]
       public ActionResult EdtCliAliqRedBasCalcIcmsVenVarContMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Redução Base de Calc. ICMS Venda para CONTRIBUINTE no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }
            //se for simples nacional direciona para essa action
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["tributacao"] = "SIMPLES";
                TempData.Keep("tributacao");
            }
            else
            {
                TempData["tributacao"] = "OUTROS";
                TempData.Keep("tributacao");
            }
            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            //ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;
            VerificarLinhas(numeroLinhas);


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            ///*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            //TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            //opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            ////persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            //TempData.Keep("opcao");

            VerificarOpcaoRed(filtroNulo, opcao);
            opcao = TempData["opcao"].ToString();

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;


            //origem e destino
            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;


            if (this.empresa.simples_nacional.Equals(1))
            {
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsVenVarContMassaSn", new { opcao = opcao });

            }
            //VerificaTempData();
            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao


          

            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                case "Alíquotas Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {
                        
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT > a.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT < a.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 20  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT == a.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 20  && a.RED_BASE_CALC_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT == null && a.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE != null && a.CST_VENDA_VAREJO_CONT_BASE == 20  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT != null && a.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE == 20  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT == null && a.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE == 20  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT != null && a.CST_VENDA_VAREJO_CONT_BASE != 20 && a.CST_VENDA_VAREJO_CONT_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Menores":
                case "Alíquotas Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT > a.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT < a.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT == a.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 20 && a.RED_BASE_CALC_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT == null && a.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE != null && a.CST_VENDA_VAREJO_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT != null && a.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT == null && a.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT != null && a.CST_VENDA_VAREJO_CONT_BASE != 20 && a.CST_VENDA_VAREJO_CONT_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Iguais":
                case "Alíquotas Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT > a.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT < a.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT == a.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 20 && a.RED_BASE_CALC_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT == null && a.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE != null && a.CST_VENDA_VAREJO_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT != null && a.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT == null && a.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT != null && a.CST_VENDA_VAREJO_CONT_BASE != 20 && a.CST_VENDA_VAREJO_CONT_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Nulas Cliente":
                case "Alíquotas Nulas no Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT > a.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT < a.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT == a.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 20 && a.RED_BASE_CALC_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT == null && a.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE != null && a.CST_VENDA_VAREJO_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT != null && a.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT == null && a.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT != null && a.CST_VENDA_VAREJO_CONT_BASE != 20 && a.CST_VENDA_VAREJO_CONT_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Nulas MTX":
                case "Alíquotas Nulas no MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT > a.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT < a.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT == a.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 20 && a.RED_BASE_CALC_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT == null && a.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE != null && a.CST_VENDA_VAREJO_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT != null && a.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT == null && a.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT != null && a.CST_VENDA_VAREJO_CONT_BASE != 20 && a.CST_VENDA_VAREJO_CONT_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulas Ambos":
                case "Alíquotas Nulas em Ambos":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "6";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL > a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL < a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == 0.00 && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE != 0.00 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL != 0.00 && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == 0.00 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //ambos
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == 0.00 && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == 0.00 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //ambos
                            this.analise_NCM = this.analise_NCM.Where(a => a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 20 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 70).ToList();
                            break;

                    }
                    break;
                case "Sem Redução":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "7";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL > a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL < a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == 0.00 && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE != 0.00 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL != 0.00 && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == 0.00 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6": //ambos
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL == 0.00 && a.RED_BASE_CALC_ICMS_VENDA_VAREJO_CONS_FINAL_BASE == 0.00 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //ambos
                            this.analise_NCM = this.analise_NCM.Where(a => a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino) && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 20 && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != 70).ToList();
                            break;

                    }
                    break;


            }//fim do switche

            //Action para procurar
            //analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);
            this.analise_NCM = ProcuraPorSnPorNCM(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analise_NCM);

            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analise_NCM = this.analise_NCM.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analise_NCM = this.analise_NCM.OrderBy(s => s.PRODUTO_NCM).ToList();
                    break;
            }



            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            //mandar a opção para que o javascript veja
            ViewBag.Opcao = opcao;

            int numeroPagina = (page ?? 1);

           
            return View(this.analise_NCM.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }



        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsVenVarContMassaSn(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Redução Base de Calc. ICMS Venda para CONTRIBUINTE no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;



            VerificaTempDataSN();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT > a.Red_Base_Calc_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT < a.Red_Base_Calc_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT == a.Red_Base_Calc_Venda_Varejo_Cont_INTERNO && a.RED_BASE_CALC_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT != null && a.Red_Base_Calc_Venda_Varejo_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT > a.Red_Base_Calc_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT < a.Red_Base_Calc_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT == a.Red_Base_Calc_Venda_Varejo_Cont_INTERNO && a.RED_BASE_CALC_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT != null && a.Red_Base_Calc_Venda_Varejo_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT > a.Red_Base_Calc_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT < a.Red_Base_Calc_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT == a.Red_Base_Calc_Venda_Varejo_Cont_INTERNO && a.RED_BASE_CALC_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT != null && a.Red_Base_Calc_Venda_Varejo_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT > a.Red_Base_Calc_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT < a.Red_Base_Calc_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT == a.Red_Base_Calc_Venda_Varejo_Cont_INTERNO && a.RED_BASE_CALC_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT != null && a.Red_Base_Calc_Venda_Varejo_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT > a.Red_Base_Calc_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT < a.Red_Base_Calc_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT == a.Red_Base_Calc_Venda_Varejo_Cont_INTERNO && a.RED_BASE_CALC_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT != null && a.Red_Base_Calc_Venda_Varejo_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;


            }//fim do switche

            //Action para procurar
            this.analiseSn = ProcuraPorSn(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analiseSn);

            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analiseSn = this.analiseSn.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analiseSn = this.analiseSn.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            int numeroPagina = (page ?? 1);

            return View(this.analiseSn.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }



        [HttpGet]
       public ActionResult EdtCliAliqRedBasCalcIcmsVenVarContMassaModal(string strDados)
       {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();


            //registros salvos
            int regSalv = 0;
            int regNsalv = 0;
            string analiseRetorno = "";
            string analiseTrib = "";

            string ufOrigem = TempData["UfOrigem"].ToString();
            string ufDestino = TempData["UfDestino"].ToString();

            try
            {

                //laço de repetição para percorrer o array com os registros
                for (int i = 0; i < idTrib.Length; i++)
                {
                    //converter em inteiro
                    int idTrb = int.Parse(idTrib[i]);

                    //faz a busca no objeto criado instanciando um so objeto
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    if (this.empresa.simples_nacional.Equals(1))
                    {
                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        //AnaliseTributariaSn analiseSn = (from a in db.Analise_TributariaSn where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

                        AnaliseTributariaNCM analiseNCM = (from a in db.Analise_TributariaNCM where a.PRODUTO_NCM == trib.PRODUTO_NCM && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino && a.SIMP_NACIONAL_BASE == 1 select a).First();

                        analiseRetorno = (analiseNCM.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE == null) ? analiseRetorno : (analiseNCM.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE).ToString();

                        /*o mesmo acontece aqui, se for nulo ele permanece com valor 0.0*/
                        analiseTrib = (analiseNCM.RED_BASE_CALC_VENDA_VAREJO_CONT == null) ? analiseTrib : (trib.RED_BASE_CALC_VENDA_VAREJO_CONT);
                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.RED_BASE_CALC_VENDA_VAREJO_CONT = "0.000";
                            }
                            else
                            {
                                trib.RED_BASE_CALC_VENDA_VAREJO_CONT = analiseNCM.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE.ToString().Replace(",", ".");

                            }
                            trib.DT_ALTERACAO = DateTime.Now;
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos

                        }

                    }
                    else
                    {
                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        //AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino select a).First();
                        AnaliseTributariaNCM analiseNCM = (from a in db.Analise_TributariaNCM where a.PRODUTO_NCM == trib.PRODUTO_NCM && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino && a.SIMP_NACIONAL_BASE == 0 select a).First();

                        analiseRetorno = (analiseNCM.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE == null) ? analiseRetorno : (analiseNCM.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE).ToString();

                        /*o mesmo acontece aqui, se for nulo ele permanece com valor 0.0*/
                        analiseTrib = (analiseNCM.RED_BASE_CALC_VENDA_VAREJO_CONT == null) ? analiseTrib : (trib.RED_BASE_CALC_VENDA_VAREJO_CONT);
                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.RED_BASE_CALC_VENDA_VAREJO_CONT = "0.000";
                            }
                            else
                            {
                                trib.RED_BASE_CALC_VENDA_VAREJO_CONT = analiseNCM.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE.ToString().Replace(",", ".");

                            }
                            trib.DT_ALTERACAO = DateTime.Now;
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos

                        }

                    }




                }
                if (this.empresa.simples_nacional.Equals(1))
                {
                    TempData["analiseSN"] = null;
                    TempData["analise_NCM"] = null;

                }
                else
                {
                    TempData["analise"] = null;
                    TempData["analise_NCM"] = null;
                }

                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                string erro = e.ToString();
                resultado = "Problemas ao salvar o registro: " + erro;

            }


          


            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsVenVarContMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsVenVarContMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }

            
        }

        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsVenVarContMassaManualModalPost(string strDados, string redBasCalcAliqIcmsVenVarCont)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }

            this.empresa = (Empresa)Session["empresas"];
            //trocando o ponto por virgula
            redBasCalcAliqIcmsVenVarCont = redBasCalcAliqIcmsVenVarCont.Replace(",", ".");

            //separar a String em um array
            string[] idTrib = strDados.Split(',');
            string resultado = "";
            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();
            int regSalvos = 0;
            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.RED_BASE_CALC_VENDA_VAREJO_CONT = (redBasCalcAliqIcmsVenVarCont != "") ? trib.RED_BASE_CALC_VENDA_VAREJO_CONT = redBasCalcAliqIcmsVenVarCont : null;

                    db.SaveChanges();
                    regSalvos++;

                }

                
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsVenVarContMassaSn", new { param = resultado, qtdSalvos = regSalvos });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsVenVarContMassa", new { param = resultado, qtdSalvos = regSalvos });

            }

        }

        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsVenVarContMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();

            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }

            return View(trib);
        }



        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsVenVarContMassaTODOS(string opcao)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            this.ufOrigem = TempData["UfOrigem"].ToString();
            this.ufDestino = TempData["UfDestino"].ToString();

            //VerificaTempData();
            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao

            TributacaoEmpresa trib = new TributacaoEmpresa();

            if (opcao == "Alíquotas Maiores")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT > a.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }

            if (opcao == "Alíquotas Menores")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT < a.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }

            if (opcao == "Alíquotas Nulas no Cliente")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_VENDA_VAREJO_CONT == null && a.RED_BASE_CALC_VENDA_VAREJO_CONT_BASE != null && a.CST_VENDA_VAREJO_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }

            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            string resultado = ""; //variavel auxiliar;
            //pega todos os ID para serem alterados
            //this.analiseSn.Count()
            for (int i = 0; i < this.analise_NCM.Count(); i++)
            {

                //converter em inteiro
                int? idTrb = (this.analise_NCM[i].TE_ID);
                trib = db.TributacaoEmpresas.Find(idTrb);//busca o registro
                trib.RED_BASE_CALC_VENDA_VAREJO_CONT = this.analise_NCM[i].RED_BASE_CALC_VENDA_VAREJO_CONT_BASE.ToString().Replace(",", ".");
                trib.DT_ALTERACAO = DateTime.Now;
                try
                {

                    db.SaveChanges();
                    regSalv++; //contagem de registros salvos
                               //toda vez que salvar, gravar uma nova lista e mandar para action



                }
                catch (Exception e)
                {
                    resultado = "Problemas ao salvar o registro: " + e.ToString();
                    regNsalv++;
                }

            }
            resultado = "Registro Salvo com Sucesso!!";


            TempData["analise_NCM"] = null;
            TempData.Keep("analise_NCM");
            //string[] idTrib = this.alanliseSN.
            //a analise vai me dar todos os ids


            return RedirectToAction("EdtCliAliqRedBasCalcIcmsVenVarContMassa", new { param = resultado, qtdSalvos = regSalv, opcao = opcao });
        }


        /*Edição Red Base de Calc ICMS ST Venda varejo para contrbuinte*/
        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsSTVenVarContMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Redução Base de Calc. ICMS ST Venda Varejo para CONTRIBUINTE no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }
            //se for simples nacional direciona para essa action
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["tributacao"] = "SIMPLES";
                TempData.Keep("tributacao");
            }
            else
            {
                TempData["tributacao"] = "OUTROS";
                TempData.Keep("tributacao");
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            //ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;
            VerificarLinhas(numeroLinhas);


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            ///*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            //TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            //opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            ////persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            //TempData.Keep("opcao");


            VerificarOpcaoRed(filtroNulo, opcao);
            opcao = TempData["opcao"].ToString();


            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;

            //origem e destino
            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            if (this.empresa.simples_nacional.Equals(1))
            {
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsSTVenVarContMassaSn", new { opcao = opcao });

            }

            //VerificaTempData();
            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao



            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                case "Alíquotas Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {
                      
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT > a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT < a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT == a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT == null && a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE != null && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT != null && a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT == null && a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //sem redução
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT != null && a.CST_VENDA_VAREJO_CONT_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Menores":
                case "Alíquotas Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT > a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT < a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT == a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT == null && a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE != null && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT != null && a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT == null && a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //sem redução
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT != null && a.CST_VENDA_VAREJO_CONT_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Iguais":
                case "Alíquotas Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT > a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT < a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT == a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT == null && a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE != null && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT != null && a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT == null && a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //sem redução
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT != null && a.CST_VENDA_VAREJO_CONT_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulas Cliente":
                case "Alíquotas Nulas no Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT > a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT < a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT == a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT == null && a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE != null && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT != null && a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT == null && a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //sem redução
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT != null && a.CST_VENDA_VAREJO_CONT_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulas MTX":
                case "Alíquotas Nulas no MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT > a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT < a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT == a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT == null && a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE != null && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT != null && a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT == null && a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //sem redução
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT != null && a.CST_VENDA_VAREJO_CONT_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Ambos":
                case "Alíquotas Nulas em Ambos":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "6";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT > a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT < a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT == a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT == null && a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE != null && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT != null && a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT == null && a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //sem redução
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT != null && a.CST_VENDA_VAREJO_CONT_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Sem Redução":
                     //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "7";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT > a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT < a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT == a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT == null && a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE != null && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT != null && a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT == null && a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //sem redução
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT != null && a.CST_VENDA_VAREJO_CONT_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;


            }//fim do switche

            //Action para procurar
            //analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);
            this.analise_NCM = ProcuraPorSnPorNCM(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analise_NCM);

            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analise_NCM = this.analise_NCM.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analise_NCM = this.analise_NCM.OrderBy(s => s.PRODUTO_NCM).ToList();
                    break;
            }



            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            //mandar a opção para que o javascript veja
            ViewBag.Opcao = opcao;
            int numeroPagina = (page ?? 1);

            return View(this.analise_NCM.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }


        /*Edição Red Base de Calc ICMS ST Venda varejo para contrbuinte*/
        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsSTVenVarContMassaSn(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Redução Base de Calc. ICMS ST Venda Varejo para CONTRIBUINTE no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;

            VerificaTempDataSN();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT > a.Red_Base_Calc_ST_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT < a.Red_Base_Calc_ST_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT == a.Red_Base_Calc_ST_Venda_Varejo_Cont_INTERNO && a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT != null && a.Red_Base_Calc_ST_Venda_Varejo_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT > a.Red_Base_Calc_ST_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT < a.Red_Base_Calc_ST_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT == a.Red_Base_Calc_ST_Venda_Varejo_Cont_INTERNO && a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT != null && a.Red_Base_Calc_ST_Venda_Varejo_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT > a.Red_Base_Calc_ST_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT < a.Red_Base_Calc_ST_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT == a.Red_Base_Calc_ST_Venda_Varejo_Cont_INTERNO && a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT != null && a.Red_Base_Calc_ST_Venda_Varejo_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT > a.Red_Base_Calc_ST_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT < a.Red_Base_Calc_ST_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT == a.Red_Base_Calc_ST_Venda_Varejo_Cont_INTERNO && a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT != null && a.Red_Base_Calc_ST_Venda_Varejo_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT > a.Red_Base_Calc_ST_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT < a.Red_Base_Calc_ST_Venda_Varejo_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT == a.Red_Base_Calc_ST_Venda_Varejo_Cont_INTERNO && a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT != null && a.Red_Base_Calc_ST_Venda_Varejo_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;


            }//fim do switche

            //Action para procurar
            this.analiseSn = ProcuraPorSn(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analiseSn);

            switch (ordenacao)
            {
                case "Produto_desc":
                    analise = analise.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    analise = analise.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            int numeroPagina = (page ?? 1);

            return View(this.analiseSn.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }



        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsSTVenVarContMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();


            //registros salvos
            int regSalv = 0;
            int regNsalv = 0;
            string analiseRetorno = "";
            string analiseTrib = "";

            string ufOrigem = TempData["UfOrigem"].ToString();
            string ufDestino = TempData["UfDestino"].ToString();


            try
            {

                //laço de repetição para percorrer o array com os registros
                for (int i = 0; i < idTrib.Length; i++)
                {
                    //converter em inteiro
                    int idTrb = int.Parse(idTrib[i]);

                    //faz a busca no objeto criado instanciando um so objeto
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    if (this.empresa.simples_nacional.Equals(1))
                    {
                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        //AnaliseTributariaSn analiseSn = (from a in db.Analise_TributariaSn where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

                        AnaliseTributariaNCM analiseNCM = (from a in db.Analise_TributariaNCM where a.PRODUTO_NCM == trib.PRODUTO_NCM && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino && a.SIMP_NACIONAL_BASE == 1 select a).First();

                        analiseRetorno = (analiseNCM.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE == null) ? analiseRetorno : (analiseNCM.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE).ToString();

                        /*o mesmo acontece aqui, se for nulo ele permanece com valor 0.0*/
                        analiseTrib = (analiseNCM.RED_BASE_CALC_ST_VENDA_VAREJO_CONT == null) ? analiseTrib : (trib.RED_BASE_CALC_ST_VENDA_VAREJO_CONT);
                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.RED_BASE_CALC_ST_VENDA_VAREJO_CONT = "0.000";
                            }
                            else
                            {
                                trib.RED_BASE_CALC_ST_VENDA_VAREJO_CONT = analiseNCM.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE.ToString().Replace(",", ".");

                            }
                            trib.DT_ALTERACAO = DateTime.Now;
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos

                        }

                    }
                    else
                    {
                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        //AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino select a).First();
                        AnaliseTributariaNCM analiseNCM = (from a in db.Analise_TributariaNCM where a.PRODUTO_NCM == trib.PRODUTO_NCM && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino && a.SIMP_NACIONAL_BASE == 0 select a).First();

                        analiseRetorno = (analiseNCM.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE == null) ? analiseRetorno : (analiseNCM.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE).ToString();

                        /*o mesmo acontece aqui, se for nulo ele permanece com valor 0.0*/
                        analiseTrib = (analiseNCM.RED_BASE_CALC_ST_VENDA_VAREJO_CONT == null) ? analiseTrib : (trib.RED_BASE_CALC_ST_VENDA_VAREJO_CONT);
                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.RED_BASE_CALC_ST_VENDA_VAREJO_CONT = "0.000";
                            }
                            else
                            {
                                trib.RED_BASE_CALC_ST_VENDA_VAREJO_CONT = analiseNCM.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE.ToString().Replace(",", ".");

                            }
                            trib.DT_ALTERACAO = DateTime.Now;
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos

                        }

                    }




                }
                if (this.empresa.simples_nacional.Equals(1))
                {
                    TempData["analiseSN"] = null;
                    TempData["analise_NCM"] = null;

                }
                else
                {
                    TempData["analise"] = null;
                    TempData["analise_NCM"] = null;
                }

                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                string erro = e.ToString();
                resultado = "Problemas ao salvar o registro: " + erro;

            }




           

            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsSTVenVarContMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsSTVenVarContMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }

           
        }

        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsSTVenVarContMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();

            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }

            return View(trib);
        }

        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsSTVenVarContMassaManualModalPost(string strDados, string redBasCalcAliqIcmsSTVenVarCont)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //trocando o ponto por virgula
            redBasCalcAliqIcmsSTVenVarCont = redBasCalcAliqIcmsSTVenVarCont.Replace(",", ".");

            //separar a String em um array
            string[] idTrib = strDados.Split(',');
            string resultado = "";
            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();
            int regSalvos = 0;
            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.RED_BASE_CALC_ST_VENDA_VAREJO_CONT = (redBasCalcAliqIcmsSTVenVarCont != "") ? trib.RED_BASE_CALC_ST_VENDA_VAREJO_CONT = redBasCalcAliqIcmsSTVenVarCont : null;

                    db.SaveChanges();
                    regSalvos++;

                }

               
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }

            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsSTVenVarContMassaSn", new { param = resultado, qtdSalvos = regSalvos });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsSTVenVarContMassa", new { param = resultado, qtdSalvos = regSalvos });

            }


           
        }


        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsSTVenVarContMassaTODOS(string opcao)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            this.ufOrigem = TempData["UfOrigem"].ToString();
            this.ufDestino = TempData["UfDestino"].ToString();

            //VerificaTempData();
            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao

            TributacaoEmpresa trib = new TributacaoEmpresa();

            if (opcao == "Alíquotas Maiores")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT > a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }

            if (opcao == "Alíquotas Menores")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT < a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }

            if (opcao == "Alíquotas Nulas no Cliente")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT == null && a.RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE != null && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }

            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            string resultado = ""; //variavel auxiliar;
            //pega todos os ID para serem alterados
            //this.analiseSn.Count()
            for (int i = 0; i < this.analise_NCM.Count(); i++)
            {

                //converter em inteiro
                int? idTrb = (this.analise_NCM[i].TE_ID);
                trib = db.TributacaoEmpresas.Find(idTrb);//busca o registro
                trib.RED_BASE_CALC_ST_VENDA_VAREJO_CONT = this.analise_NCM[i].RED_BASE_CALC_ST_VENDA_VAREJO_CONT_BASE.ToString().Replace(",", ".");
                trib.DT_ALTERACAO = DateTime.Now;
                try
                {

                    db.SaveChanges();
                    regSalv++; //contagem de registros salvos
                               //toda vez que salvar, gravar uma nova lista e mandar para action



                }
                catch (Exception e)
                {
                    resultado = "Problemas ao salvar o registro: " + e.ToString();
                    regNsalv++;
                }

            }
            resultado = "Registro Salvo com Sucesso!!";


            TempData["analise_NCM"] = null;
            TempData.Keep("analise_NCM");
            //string[] idTrib = this.alanliseSN.
            //a analise vai me dar todos os ids


            return RedirectToAction("EdtCliAliqRedBasCalcIcmsSTVenVarContMassa", new { param = resultado, qtdSalvos = regSalv, opcao = opcao });

        }



        /*Edição Red Base de Calc ICMS  Venda Atacado para contrbuinte*/
        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsVenAtaContMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Redução Base de Calc. ICMS  Venda Atacado para CONTRIBUINTE no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }
            //se for simples nacional direciona para essa action
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["tributacao"] = "SIMPLES";
                TempData.Keep("tributacao");
            }
            else
            {
                TempData["tributacao"] = "OUTROS";
                TempData.Keep("tributacao");
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            //ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;
            VerificarLinhas(numeroLinhas);



            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            ///*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            //TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            //opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            ////persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            //TempData.Keep("opcao");

            VerificarOpcaoRed(filtroNulo, opcao);
            opcao = TempData["opcao"].ToString();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;



            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;


            if (this.empresa.simples_nacional.Equals(1))
            {
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsVenAtaContMassaSn", new { opcao = opcao });

            }

            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao

            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                case "Alíquotas Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA > a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA < a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA == a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE && a.RED_BASE_CALC_ICMS_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA == null && a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE != null && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA != null && a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA == null && a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //sem redução
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE != 20 && a.CST_VENDA_ATA_CONT_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Menores":
                case "Alíquotas Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA > a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA < a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA == a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE && a.RED_BASE_CALC_ICMS_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA == null && a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE != null && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA != null && a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA == null && a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //sem redução
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE != 20 && a.CST_VENDA_ATA_CONT_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Iguais":
                case "Alíquotas Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA > a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA < a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA == a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE && a.RED_BASE_CALC_ICMS_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA == null && a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE != null && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA != null && a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA == null && a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //sem redução
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE != 20 && a.CST_VENDA_ATA_CONT_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Cliente":
                case "Alíquotas Nulas no Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA > a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA < a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA == a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE && a.RED_BASE_CALC_ICMS_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA == null && a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE != null && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA != null && a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA == null && a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //sem redução
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE != 20 && a.CST_VENDA_ATA_CONT_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulas MTX":
                case "Alíquotas Nulas no MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA > a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA < a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA == a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE && a.RED_BASE_CALC_ICMS_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA == null && a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE != null && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA != null && a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA == null && a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //sem redução
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE != 20 && a.CST_VENDA_ATA_CONT_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Ambos":
                case "Alíquotas Nulas em Ambos":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "6";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA > a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA < a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA == a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE && a.RED_BASE_CALC_ICMS_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA == null && a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE != null && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA != null && a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA == null && a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //sem redução
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE != 20 && a.CST_VENDA_ATA_CONT_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Sem Redução":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "7";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA > a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA < a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA == a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE && a.RED_BASE_CALC_ICMS_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA == null && a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE != null && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA != null && a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA == null && a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7": //sem redução
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE != 20 && a.CST_VENDA_ATA_CONT_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;


            }//fim do switche

            //Action para procurar
            //analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);
            //this.analise_NCM = ProcuraPorSnPorNCM(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analise_NCM);
            this.analise_NCM = ProcuraPorSnPorNCM(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analise_NCM);

            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analise_NCM = this.analise_NCM.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analise_NCM = this.analise_NCM.OrderBy(s => s.PRODUTO_NCM).ToList();
                    break;
            }




            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            //mandar a opção para que o javascript veja
            ViewBag.Opcao = opcao;
            int numeroPagina = (page ?? 1);

            return View(this.analise_NCM.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }


        /*Edição Red Base de Calc ICMS  Venda Atacado para contrbuinte*/
        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsVenAtaContMassaSn(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Redução Base de Calc. ICMS  Venda Atacado para CONTRIBUINTE no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;

            VerificaTempDataSN();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA > a.Red_Base_Calc_Icms_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA < a.Red_Base_Calc_Icms_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA == a.Red_Base_Calc_Icms_Venda_Ata_Cont_INTERNO && a.RED_BASE_CALC_ICMS_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA != null && a.Red_Base_Calc_Icms_Venda_Ata_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA > a.Red_Base_Calc_Icms_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA < a.Red_Base_Calc_Icms_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA == a.Red_Base_Calc_Icms_Venda_Ata_Cont_INTERNO && a.RED_BASE_CALC_ICMS_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA != null && a.Red_Base_Calc_Icms_Venda_Ata_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;



                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA > a.Red_Base_Calc_Icms_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA < a.Red_Base_Calc_Icms_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA == a.Red_Base_Calc_Icms_Venda_Ata_Cont_INTERNO && a.RED_BASE_CALC_ICMS_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA != null && a.Red_Base_Calc_Icms_Venda_Ata_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA > a.Red_Base_Calc_Icms_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA < a.Red_Base_Calc_Icms_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA == a.Red_Base_Calc_Icms_Venda_Ata_Cont_INTERNO && a.RED_BASE_CALC_ICMS_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA != null && a.Red_Base_Calc_Icms_Venda_Ata_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA > a.Red_Base_Calc_Icms_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA < a.Red_Base_Calc_Icms_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA == a.Red_Base_Calc_Icms_Venda_Ata_Cont_INTERNO && a.RED_BASE_CALC_ICMS_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA != null && a.Red_Base_Calc_Icms_Venda_Ata_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;


            }//fim do switche

            //Action para procurar
            this.analiseSn = ProcuraPorSn(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analiseSn);

            switch (ordenacao)
            {
                case "Produto_desc":
                    analise = analise.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    analise = analise.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            int numeroPagina = (page ?? 1);

            return View(this.analiseSn.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }


        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsVenAtaContMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();


            //registros salvos
            int regSalv = 0;
            int regNsalv = 0;
            string analiseRetorno = "";
            string analiseTrib = "";

            string ufOrigem = TempData["UfOrigem"].ToString();
            string ufDestino = TempData["UfDestino"].ToString();
            try
            {

                //laço de repetição para percorrer o array com os registros
                for (int i = 0; i < idTrib.Length; i++)
                {
                    //converter em inteiro
                    int idTrb = int.Parse(idTrib[i]);

                    //faz a busca no objeto criado instanciando um so objeto
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    if (this.empresa.simples_nacional.Equals(1))
                    {
                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        //AnaliseTributariaSn analiseSn = (from a in db.Analise_TributariaSn where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

                        AnaliseTributariaNCM analiseNCM = (from a in db.Analise_TributariaNCM where a.PRODUTO_NCM == trib.PRODUTO_NCM && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino && a.SIMP_NACIONAL_BASE == 1 select a).First();

                        analiseRetorno = (analiseNCM.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE == null) ? analiseRetorno : (analiseNCM.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE).ToString();

                        /*o mesmo acontece aqui, se for nulo ele permanece com valor 0.0*/
                        analiseTrib = (analiseNCM.RED_BASE_CALC_ICMS_VENDA_ATA == null) ? analiseTrib : (trib.RED_BASE_CALC_ICMS_VENDA_ATA);
                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.RED_BASE_CALC_ICMS_VENDA_ATA = "0.000";
                            }
                            else
                            {
                                trib.RED_BASE_CALC_ICMS_VENDA_ATA = analiseNCM.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE.ToString().Replace(",", ".");

                            }
                            trib.DT_ALTERACAO = DateTime.Now;
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos

                        }

                    }
                    else
                    {
                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        //AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino select a).First();
                        AnaliseTributariaNCM analiseNCM = (from a in db.Analise_TributariaNCM where a.PRODUTO_NCM == trib.PRODUTO_NCM && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino && a.SIMP_NACIONAL_BASE == 0 select a).First();

                        analiseRetorno = (analiseNCM.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE == null) ? analiseRetorno : (analiseNCM.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE).ToString();

                        /*o mesmo acontece aqui, se for nulo ele permanece com valor 0.0*/
                        analiseTrib = (analiseNCM.RED_BASE_CALC_ICMS_VENDA_ATA == null) ? analiseTrib : (trib.RED_BASE_CALC_ICMS_VENDA_ATA);
                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.RED_BASE_CALC_ICMS_VENDA_ATA = "0.000";
                            }
                            else
                            {
                                trib.RED_BASE_CALC_ICMS_VENDA_ATA = analiseNCM.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE.ToString().Replace(",", ".");

                            }
                            trib.DT_ALTERACAO = DateTime.Now;
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos

                        }

                    }




                }
                if (this.empresa.simples_nacional.Equals(1))
                {
                    TempData["analiseSN"] = null;
                    TempData["analise_NCM"] = null;

                }
                else
                {
                    TempData["analise"] = null;
                    TempData["analise_NCM"] = null;
                }

                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                string erro = e.ToString();
                resultado = "Problemas ao salvar o registro: " + erro;

            }





       
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsVenAtaContMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsVenAtaContMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }
        }

        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsVenAtaContMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();

            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }

            return View(trib);
        }

        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsVenAtaContMassaManualModalPost(string strDados, string redBasCalcAliqIcmsVenAtaCont)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //trocando o ponto por virgula
            redBasCalcAliqIcmsVenAtaCont = redBasCalcAliqIcmsVenAtaCont.Replace(",", ".");

            //separar a String em um array
            string[] idTrib = strDados.Split(',');
            string resultado = "";
            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();
            int regSalvos = 0;
            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);
                    trib.RED_BASE_CALC_ICMS_VENDA_ATA = (redBasCalcAliqIcmsVenAtaCont != "") ? trib.RED_BASE_CALC_ICMS_VENDA_ATA = redBasCalcAliqIcmsVenAtaCont : null;

                    db.SaveChanges();
                    regSalvos++;

                }

                
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }

            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsVenAtaContMassaSn", new { param = resultado, qtdSalvos = regSalvos });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsVenAtaContMassa", new { param = resultado, qtdSalvos = regSalvos });

            }
          
        }



        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsVenAtaContMassaTODOS(string opcao)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            this.ufOrigem = TempData["UfOrigem"].ToString();
            this.ufDestino = TempData["UfDestino"].ToString();

            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao
            TributacaoEmpresa trib = new TributacaoEmpresa();

            if (opcao == "Alíquotas Maiores")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA > a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
               
            }

            if (opcao == "Alíquotas Menores")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA < a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }

            if (opcao == "Alíquotas Nulas no Cliente")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA == null && a.RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE != null && a.CST_VENDA_ATA_CONT_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }

            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            string resultado = ""; //variavel auxiliar;
            //pega todos os ID para serem alterados
            //this.analiseSn.Count()
            for (int i = 0; i < this.analise_NCM.Count(); i++)
            {

                //converter em inteiro
                int? idTrb = (this.analise_NCM[i].TE_ID);
                trib = db.TributacaoEmpresas.Find(idTrb);//busca o registro
                trib.RED_BASE_CALC_ICMS_VENDA_ATA = this.analise_NCM[i].RED_BASE_CALC_ICMS_VENDA_ATA_CONT_BASE.ToString().Replace(",",".");
                trib.DT_ALTERACAO = DateTime.Now;
                try
                {

                    db.SaveChanges();
                    regSalv++; //contagem de registros salvos
                               //toda vez que salvar, gravar uma nova lista e mandar para action



                }
                catch (Exception e)
                {
                    resultado = "Problemas ao salvar o registro: " + e.ToString();
                    regNsalv++;
                }

            }
            resultado = "Registro Salvo com Sucesso!!";


            TempData["analise_NCM"] = null;
            TempData.Keep("analise_NCM");


            return RedirectToAction("EdtCliAliqRedBasCalcIcmsVenAtaContMassa", new { param = resultado, qtdSalvos = regSalv, opcao = opcao });

        }



        /*Edição Red Base de Calc ICMS ST  Venda Atacado para contrbuinte*/
        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsSTVenAtaContMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Redução Base de Calc. ICMS ST Venda Atacado para CONTRIBUINTE no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }
            //se for simples nacional direciona para essa action
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["tributacao"] = "SIMPLES";
                TempData.Keep("tributacao");
            }
            else
            {
                TempData["tributacao"] = "OUTROS";
                TempData.Keep("tributacao");
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            VerificarLinhas(numeroLinhas);

            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            ///*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            //TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            //opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            ////persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            //TempData.Keep("opcao");

            VerificarOpcaoRed(filtroNulo, opcao);
            opcao = TempData["opcao"].ToString();



            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;
            //origem e destino
            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            if (this.empresa.simples_nacional.Equals(1))
            {
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsSTVenAtaContMassaSn", new { opcao = opcao });

            }

            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao


            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                case "Alíquotas Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA > a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA < a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA == a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA == null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA != null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA == null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Menores":
                case "Alíquotas Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA > a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA < a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA == a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA == null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA != null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA == null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Iguais":
                case "Alíquotas Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA > a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA < a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA == a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA == null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA != null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA == null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Cliente":
                case "Alíquotas Nulas no Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA > a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA < a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA == a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA == null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA != null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA == null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas MTX":
                case "Alíquotas Nulas no MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA > a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA < a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA == a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA == null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA != null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA == null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Ambos":
                case "Alíquotas Nulas em Ambos":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "6";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA > a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA < a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA == a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA == null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA != null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA == null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
           
                case "Sem Redução":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "7";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA > a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA < a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA == a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA == null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA != null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA == null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.CST_VENDA_ATA_CONT_BASE == 70 && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;


            }//fim do switche

            //Action para procurar
            this.analise_NCM = ProcuraPorSnPorNCM(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analise_NCM);

            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analise_NCM = this.analise_NCM.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analise_NCM = this.analise_NCM.OrderBy(s => s.PRODUTO_NCM).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            //mandar a opção para que o javascript veja
            ViewBag.Opcao = opcao;
            int numeroPagina = (page ?? 1);

            return View(this.analise_NCM.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }


        /*Edição Red Base de Calc ICMS ST  Venda Atacado para contrbuinte*/
        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsSTVenAtaContMassaSn(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Redução Base de Calc. ICMS ST Venda Atacado para CONTRIBUINTE no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;

            VerificaTempDataSN();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA > a.Red_Base_Calc_Icms_ST_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA < a.Red_Base_Calc_Icms_ST_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA == a.Red_Base_Calc_Icms_ST_Venda_Ata_Cont_INTERNO && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA != null && a.Red_Base_Calc_Icms_ST_Venda_Ata_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA > a.Red_Base_Calc_Icms_ST_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA < a.Red_Base_Calc_Icms_ST_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA == a.Red_Base_Calc_Icms_ST_Venda_Ata_Cont_INTERNO && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA != null && a.Red_Base_Calc_Icms_ST_Venda_Ata_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA > a.Red_Base_Calc_Icms_ST_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA < a.Red_Base_Calc_Icms_ST_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA == a.Red_Base_Calc_Icms_ST_Venda_Ata_Cont_INTERNO && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA != null && a.Red_Base_Calc_Icms_ST_Venda_Ata_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA > a.Red_Base_Calc_Icms_ST_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA < a.Red_Base_Calc_Icms_ST_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA == a.Red_Base_Calc_Icms_ST_Venda_Ata_Cont_INTERNO && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA != null && a.Red_Base_Calc_Icms_ST_Venda_Ata_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA > a.Red_Base_Calc_Icms_ST_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA < a.Red_Base_Calc_Icms_ST_Venda_Ata_Cont_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA == a.Red_Base_Calc_Icms_ST_Venda_Ata_Cont_INTERNO && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA != null && a.Red_Base_Calc_Icms_ST_Venda_Ata_Cont_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;


            }//fim do switche

            //Action para procurar
            this.analiseSn = ProcuraPorSn(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analiseSn);

            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analiseSn = this.analiseSn.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analiseSn = this.analiseSn.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            int numeroPagina = (page ?? 1);

            return View(this.analiseSn.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }



        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsSTVenAtaContMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();

            //registros salvos
            int regSalv = 0;
            int regNsalv = 0;
            string analiseRetorno = "";
            string analiseTrib = "";

            string ufOrigem = TempData["UfOrigem"].ToString();
            string ufDestino = TempData["UfDestino"].ToString();

            try
            {

                //laço de repetição para percorrer o array com os registros
                for (int i = 0; i < idTrib.Length; i++)
                {
                    //converter em inteiro
                    int idTrb = int.Parse(idTrib[i]);

                    //faz a busca no objeto criado instanciando um so objeto
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    if (this.empresa.simples_nacional.Equals(1))
                    {
                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        //AnaliseTributariaSn analiseSn = (from a in db.Analise_TributariaSn where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

                        AnaliseTributariaNCM analiseNCM = (from a in db.Analise_TributariaNCM where a.PRODUTO_NCM == trib.PRODUTO_NCM && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino && a.SIMP_NACIONAL_BASE == 1 select a).First();

                        analiseRetorno = (analiseNCM.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE == null) ? analiseRetorno : (analiseNCM.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE).ToString();

                        /*o mesmo acontece aqui, se for nulo ele permanece com valor 0.0*/
                        analiseTrib = (analiseNCM.RED_BASE_CALC_ICMS_ST_VENDA_ATA == null) ? analiseTrib : (trib.RED_BASE_CALC_ICMS_ST_VENDA_ATA);
                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.RED_BASE_CALC_ICMS_ST_VENDA_ATA = "0.000";
                            }
                            else
                            {
                                trib.RED_BASE_CALC_ICMS_ST_VENDA_ATA = analiseNCM.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE.ToString().Replace(",", ".");

                            }
                            trib.DT_ALTERACAO = DateTime.Now;
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos

                        }

                    }
                    else
                    {
                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        //AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino select a).First();
                        AnaliseTributariaNCM analiseNCM = (from a in db.Analise_TributariaNCM where a.PRODUTO_NCM == trib.PRODUTO_NCM && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino && a.SIMP_NACIONAL_BASE == 0 select a).First();

                        analiseRetorno = (analiseNCM.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE == null) ? analiseRetorno : (analiseNCM.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE).ToString();

                        /*o mesmo acontece aqui, se for nulo ele permanece com valor 0.0*/
                        analiseTrib = (analiseNCM.RED_BASE_CALC_ICMS_ST_VENDA_ATA == null) ? analiseTrib : (trib.RED_BASE_CALC_ICMS_ST_VENDA_ATA);
                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.RED_BASE_CALC_ICMS_ST_VENDA_ATA = "0.000";
                            }
                            else
                            {
                                trib.RED_BASE_CALC_ICMS_ST_VENDA_ATA = analiseNCM.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE.ToString().Replace(",", ".");

                            }
                            trib.DT_ALTERACAO = DateTime.Now;
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos

                        }

                    }




                }
                if (this.empresa.simples_nacional.Equals(1))
                {
                    TempData["analiseSN"] = null;
                    TempData["analise_NCM"] = null;

                }
                else
                {
                    TempData["analise"] = null;
                    TempData["analise_NCM"] = null;
                }

                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                string erro = e.ToString();
                resultado = "Problemas ao salvar o registro: " + erro;

            }





           
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsSTVenAtaContMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsSTVenAtaContMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }

        }

        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsSTVenAtaContMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();

            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }

            return View(trib);
        }

        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsSTVenAtaContMassaManualModalPost(string strDados, string redBasCalcAliqIcmsSTVenAtaCont)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //trocando o ponto por virgula
            redBasCalcAliqIcmsSTVenAtaCont = redBasCalcAliqIcmsSTVenAtaCont.Replace(",", ".");

            //separar a String em um array
            string[] idTrib = strDados.Split(',');
            string resultado = "";
            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();
            int regSalvos = 0;
            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);
                    trib.RED_BASE_CALC_ICMS_ST_VENDA_ATA = (redBasCalcAliqIcmsSTVenAtaCont != "") ? trib.RED_BASE_CALC_ICMS_ST_VENDA_ATA = redBasCalcAliqIcmsSTVenAtaCont : null;

                    db.SaveChanges();
                    regSalvos++;

                }

                TempData["analise"] = null;
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }

            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsSTVenAtaContMassaSn", new { param = resultado, qtdSalvos = regSalvos });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsSTVenAtaContMassa", new { param = resultado, qtdSalvos = regSalvos });

            }
           
        }

        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsSTVenAtaContMassaTODOS(string opcao)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            this.ufOrigem = TempData["UfOrigem"].ToString();
            this.ufDestino = TempData["UfDestino"].ToString();

            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao
            TributacaoEmpresa trib = new TributacaoEmpresa();

            if (opcao == "Alíquotas Maiores")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA > a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }

            if (opcao == "Alíquotas Menores")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA < a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }

            if (opcao == "Alíquotas Nulas no Cliente")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA == null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE != null && a.CST_VENDA_VAREJO_CONT_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }

            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            string resultado = ""; //variavel auxiliar;
            //pega todos os ID para serem alterados
            //this.analiseSn.Count()
            for (int i = 0; i < this.analise_NCM.Count(); i++)
            {

                //converter em inteiro
                int? idTrb = (this.analise_NCM[i].TE_ID);
                trib = db.TributacaoEmpresas.Find(idTrb);//busca o registro
                trib.RED_BASE_CALC_ICMS_ST_VENDA_ATA = this.analise_NCM[i].RED_BASE_CALC_ICMS_ST_VENDA_ATA_CONT_BASE.ToString().Replace(",", ".");
                trib.DT_ALTERACAO = DateTime.Now;
                try
                {

                    db.SaveChanges();
                    regSalv++; //contagem de registros salvos
                               //toda vez que salvar, gravar uma nova lista e mandar para action



                }
                catch (Exception e)
                {
                    resultado = "Problemas ao salvar o registro: " + e.ToString();
                    regNsalv++;
                }

            }
            resultado = "Registro Salvo com Sucesso!!";


            TempData["analise_NCM"] = null;
            TempData.Keep("analise_NCM");


            return RedirectToAction("EdtCliAliqRedBasCalcIcmsSTVenAtaContMassa", new { param = resultado, qtdSalvos = regSalv, opcao = opcao });

        }



        /*Edição Red Base de Calc ICMS  Venda Atacado para Simples Nacional*/
        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsVenAtaSNMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Redução Base de Calc. ICMS  Venda Atacado para SIMPLES NACIONAL no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            } 
            
            
            //se for simples nacional direciona para essa action
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["tributacao"] = "SIMPLES";
                TempData.Keep("tributacao");
            }
            else
            {
                TempData["tributacao"] = "OUTROS";
                TempData.Keep("tributacao");
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            VerificarLinhas(numeroLinhas);


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            VerificarOpcaoRed(filtroNulo, opcao);
            opcao = TempData["opcao"].ToString();


            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;
            //origem e destino
            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            if (this.empresa.simples_nacional.Equals(1))
            {
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsVenAtaSNMassaSn", new { opcao = opcao });

            }

            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao




            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                case "Alíquotas Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL > a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL < a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL == a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 20 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Menores":
                case "Alíquotas Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL > a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL < a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL == a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 20 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Iguais":
                case "Alíquotas Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL > a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL < a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL == a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 20 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Cliente":
                case "Alíquotas Nulas no Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL > a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL < a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL == a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 20 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas MTX":
                case "Alíquotas Nulas no MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL > a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL < a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL == a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 20 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Ambos":
                case "Alíquotas Nulas em Ambos":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "6";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL > a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL < a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL == a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 20 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Sem Redução":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "7";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL > a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL < a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL == a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 20 && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;


            }//fim do switche

            //Action para procurar
            this.analise_NCM = ProcuraPorSnPorNCM(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analise_NCM);

            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analise_NCM = this.analise_NCM.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analise_NCM = this.analise_NCM.OrderBy(s => s.PRODUTO_NCM).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            //mandar a opção para que o javascript veja
            ViewBag.Opcao = opcao;
            int numeroPagina = (page ?? 1);

            return View(this.analise_NCM.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }


        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsVenAtaSNMassaSn(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Redução Base de Calc. ICMS  Venda Atacado para SIMPLES NACIONAL no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;

            VerificaTempDataSN();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;


            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL > a.Red_Base_Calc_Icms_Venda_Ata_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL < a.Red_Base_Calc_Icms_Venda_Ata_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL == a.Red_Base_Calc_Icms_Venda_Ata_Simp_Nacional_INTERNO && a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.Red_Base_Calc_Icms_Venda_Ata_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL > a.Red_Base_Calc_Icms_Venda_Ata_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL < a.Red_Base_Calc_Icms_Venda_Ata_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL == a.Red_Base_Calc_Icms_Venda_Ata_Simp_Nacional_INTERNO && a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.Red_Base_Calc_Icms_Venda_Ata_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL > a.Red_Base_Calc_Icms_Venda_Ata_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL < a.Red_Base_Calc_Icms_Venda_Ata_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL == a.Red_Base_Calc_Icms_Venda_Ata_Simp_Nacional_INTERNO && a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.Red_Base_Calc_Icms_Venda_Ata_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL > a.Red_Base_Calc_Icms_Venda_Ata_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL < a.Red_Base_Calc_Icms_Venda_Ata_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL == a.Red_Base_Calc_Icms_Venda_Ata_Simp_Nacional_INTERNO && a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.Red_Base_Calc_Icms_Venda_Ata_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL > a.Red_Base_Calc_Icms_Venda_Ata_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL < a.Red_Base_Calc_Icms_Venda_Ata_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL == a.Red_Base_Calc_Icms_Venda_Ata_Simp_Nacional_INTERNO && a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL != null && a.Red_Base_Calc_Icms_Venda_Ata_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;


            }//fim do switche

            //Action para procurar
            this.analiseSn = ProcuraPorSn(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analiseSn);

            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analiseSn = this.analiseSn.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analiseSn = this.analiseSn.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            int numeroPagina = (page ?? 1);

            return View(this.analiseSn.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }


        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsVenAtaSNMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();


            //registros salvos
            int regSalv = 0;
            int regNsalv = 0;
            string analiseRetorno = "";
            string analiseTrib = "";

            string ufOrigem = TempData["UfOrigem"].ToString();
            string ufDestino = TempData["UfDestino"].ToString();

            try
            {

                //laço de repetição para percorrer o array com os registros
                for (int i = 0; i < idTrib.Length; i++)
                {
                    //converter em inteiro
                    int idTrb = int.Parse(idTrib[i]);

                    //faz a busca no objeto criado instanciando um so objeto
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    if (this.empresa.simples_nacional.Equals(1))
                    {
                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        //AnaliseTributariaSn analiseSn = (from a in db.Analise_TributariaSn where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

                        AnaliseTributariaNCM analiseNCM = (from a in db.Analise_TributariaNCM where a.PRODUTO_NCM == trib.PRODUTO_NCM && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino && a.SIMP_NACIONAL_BASE == 1 select a).First();

                        analiseRetorno = (analiseNCM.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null) ? analiseRetorno : (analiseNCM.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE).ToString();

                        /*o mesmo acontece aqui, se for nulo ele permanece com valor 0.0*/
                        analiseTrib = (analiseNCM.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL == null) ? analiseTrib : (trib.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL);
                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL = "0.000";
                            }
                            else
                            {
                                trib.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL = analiseNCM.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE.ToString().Replace(",", ".");

                            }
                            trib.DT_ALTERACAO = DateTime.Now;
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos

                        }

                    }
                    else
                    {
                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        //AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino select a).First();
                        AnaliseTributariaNCM analiseNCM = (from a in db.Analise_TributariaNCM where a.PRODUTO_NCM == trib.PRODUTO_NCM && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino && a.SIMP_NACIONAL_BASE == 0 select a).First();

                        analiseRetorno = (analiseNCM.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null) ? analiseRetorno : (analiseNCM.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE).ToString();

                        /*o mesmo acontece aqui, se for nulo ele permanece com valor 0.0*/
                        analiseTrib = (analiseNCM.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL == null) ? analiseTrib : (trib.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL);
                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL = "0.000";
                            }
                            else
                            {
                                trib.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL = analiseNCM.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE.ToString().Replace(",", ".");

                            }
                            trib.DT_ALTERACAO = DateTime.Now;
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos

                        }

                    }




                }
                if (this.empresa.simples_nacional.Equals(1))
                {
                    TempData["analiseSN"] = null;
                    TempData["analise_NCM"] = null;

                }
                else
                {
                    TempData["analise"] = null;
                    TempData["analise_NCM"] = null;
                }

                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                string erro = e.ToString();
                resultado = "Problemas ao salvar o registro: " + erro;

            }





            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsVenAtaSNMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsVenAtaSNMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }

            
        }
        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsVenAtaSNMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();

            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }

            return View(trib);
        }

        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsVenAtaSNMassaManualModalPost(string strDados, string redBasCalcAliqIcmsVenAtaSN)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //trocando o ponto por virgula
            redBasCalcAliqIcmsVenAtaSN = redBasCalcAliqIcmsVenAtaSN.Replace(",", ".");

            //separar a String em um array
            string[] idTrib = strDados.Split(',');
            string resultado = "";
            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();
            int regSalvos = 0;
            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);
                    trib.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL = (redBasCalcAliqIcmsVenAtaSN != "") ? trib.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL = redBasCalcAliqIcmsVenAtaSN : null;
                    trib.DT_ALTERACAO = DateTime.Now;
                    db.SaveChanges();
                    regSalvos++;

                }

                
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }

            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsVenAtaSNMassaSn", new { param = resultado, qtdSalvos = regSalvos });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsVenAtaSNMassa", new { param = resultado, qtdSalvos = regSalvos });

            }
           
        }

        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsVenAtaSNMassaTODOS(string opcao)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            this.ufOrigem = TempData["UfOrigem"].ToString();
            this.ufDestino = TempData["UfDestino"].ToString();

            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao
            TributacaoEmpresa trib = new TributacaoEmpresa();

            if (opcao == "Alíquotas Maiores")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL > a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }

            if (opcao == "Alíquotas Menores")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL < a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }

            if (opcao == "Alíquotas Nulas no Cliente")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL == null && a.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 20 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }

            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            string resultado = ""; //variavel auxiliar;
            //pega todos os ID para serem alterados
            //this.analiseSn.Count()
            for (int i = 0; i < this.analise_NCM.Count(); i++)
            {

                //converter em inteiro
                int? idTrb = (this.analise_NCM[i].TE_ID);
                trib = db.TributacaoEmpresas.Find(idTrb);//busca o registro
                trib.RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL = this.analise_NCM[i].RED_BASE_CALC_ICMS_VENDA_ATA_SIMP_NACIONAL_BASE.ToString().Replace(",", ".");
                trib.DT_ALTERACAO = DateTime.Now;
                try
                {

                    db.SaveChanges();
                    regSalv++; //contagem de registros salvos
                               //toda vez que salvar, gravar uma nova lista e mandar para action



                }
                catch (Exception e)
                {
                    resultado = "Problemas ao salvar o registro: " + e.ToString();
                    regNsalv++;
                }

            }
            resultado = "Registro Salvo com Sucesso!!";


            TempData["analise_NCM"] = null;
            TempData.Keep("analise_NCM");


            return RedirectToAction("EdtCliAliqRedBasCalcIcmsVenAtaSNMassa", new { param = resultado, qtdSalvos = regSalv, opcao = opcao });

        }





        /*Edição Red Base de Calc ICMS ST Venda Atacado para Simples Nacional*/

        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsSTVenAtaSNMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Redução Base de Calc. ICMS ST Venda Atacado para SIMPLES NACIONAL no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se for simples nacional direciona para essa action
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["tributacao"] = "SIMPLES";
                TempData.Keep("tributacao");
            }
            else
            {
                TempData["tributacao"] = "OUTROS";
                TempData.Keep("tributacao");
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            VerificarLinhas(numeroLinhas);


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            VerificarOpcaoRed(filtroNulo, opcao);
            opcao = TempData["opcao"].ToString();

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;
            //origem e destino
            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;


            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao

            

            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                case "Alíquotas Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL > a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL < a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Menores":
                case "Alíquotas Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL > a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL < a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Iguais":
                case "Alíquotas Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL > a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL < a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Cliente":
                case "Alíquotas Nulas no Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL > a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL < a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas MTX":
                case "Alíquotas Nulas no MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL > a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL < a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Ambos":
                case "Alíquotas Nulas em Ambos":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "6";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL > a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL < a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Sem Redução":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "7";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL > a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL < a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "7":
                            this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;


            }//fim do switche

            //Action para procurar
            this.analise_NCM = ProcuraPorSnPorNCM(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analise_NCM);

            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analise_NCM = this.analise_NCM.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analise_NCM = this.analise_NCM.OrderBy(s => s.PRODUTO_NCM).ToList();
                    break;
            }


            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            //mandar a opção para que o javascript veja
            ViewBag.Opcao = opcao;
            int numeroPagina = (page ?? 1);

            return View(this.analise_NCM.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }

        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsSTVenAtaSNMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }

            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();

            //registros salvos
            int regSalv = 0;
            int regNsalv = 0;
            string analiseRetorno = "";
            string analiseTrib = "";

            string ufOrigem = TempData["UfOrigem"].ToString();
            string ufDestino = TempData["UfDestino"].ToString();

            try
            {

                //laço de repetição para percorrer o array com os registros
                for (int i = 0; i < idTrib.Length; i++)
                {
                    //converter em inteiro
                    int idTrb = int.Parse(idTrib[i]);

                    //faz a busca no objeto criado instanciando um so objeto
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    if (this.empresa.simples_nacional.Equals(1))
                    {
                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        //AnaliseTributariaSn analiseSn = (from a in db.Analise_TributariaSn where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

                        AnaliseTributariaNCM analiseNCM = (from a in db.Analise_TributariaNCM where a.PRODUTO_NCM == trib.PRODUTO_NCM && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino && a.SIMP_NACIONAL_BASE == 1 select a).First();

                        analiseRetorno = (analiseNCM.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE == null) ? analiseRetorno : (analiseNCM.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE).ToString();

                        /*o mesmo acontece aqui, se for nulo ele permanece com valor 0.0*/
                        analiseTrib = (analiseNCM.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null) ? analiseTrib : (trib.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL);
                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL = "0.000";
                            }
                            else
                            {
                                trib.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL = analiseNCM.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE.ToString().Replace(",", ".");

                            }
                            trib.DT_ALTERACAO = DateTime.Now;
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos

                        }

                    }
                    else
                    {
                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        //AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino select a).First();
                        AnaliseTributariaNCM analiseNCM = (from a in db.Analise_TributariaNCM where a.PRODUTO_NCM == trib.PRODUTO_NCM && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino && a.SIMP_NACIONAL_BASE == 0 select a).First();

                        analiseRetorno = (analiseNCM.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE == null) ? analiseRetorno : (analiseNCM.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE).ToString();

                        /*o mesmo acontece aqui, se for nulo ele permanece com valor 0.0*/
                        analiseTrib = (analiseNCM.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null) ? analiseTrib : (trib.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL);
                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL = "0.000";
                            }
                            else
                            {
                                trib.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL = analiseNCM.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE.ToString().Replace(",", ".");

                            }
                            trib.DT_ALTERACAO = DateTime.Now;
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos

                        }

                    }




                }
                if (this.empresa.simples_nacional.Equals(1))
                {
                    TempData["analiseSN"] = null;
                    TempData["analise_NCM"] = null;

                }
                else
                {
                    TempData["analise"] = null;
                    TempData["analise_NCM"] = null;
                }

                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                string erro = e.ToString();
                resultado = "Problemas ao salvar o registro: " + erro;

            }

         


            //Redirecionar para a tela de graficos
            return RedirectToAction("EdtCliAliqRedBasCalcIcmsSTVenAtaSNMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });
        }

        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsSTVenAtaSNMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();

            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }

            return View(trib);
        }

        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsSTVenAtaSNMassaManualModalPost(string strDados, string redBasCalcAliqIcmsSTVenAtaSN)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }

            //trocando o ponto por virgula
            redBasCalcAliqIcmsSTVenAtaSN = redBasCalcAliqIcmsSTVenAtaSN.Replace(",", ".");

            //separar a String em um array
            string[] idTrib = strDados.Split(',');
            string resultado = "";
            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();
            int regSalvos = 0;
            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);
                    trib.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL = (redBasCalcAliqIcmsSTVenAtaSN != "") ? trib.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL = redBasCalcAliqIcmsSTVenAtaSN : null;
                    trib.DT_ALTERACAO = DateTime.Now;
                    db.SaveChanges();
                    regSalvos++;

                }

                TempData["analise"] = null;
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }


            //Redirecionar para a tela de graficos
            return RedirectToAction("EdtCliAliqRedBasCalcIcmsSTVenAtaSNMassa", new { param = resultado, qtdSalvos = regSalvos });
        }


        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsSTVenAtaSNMassaTODOS(string opcao)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            this.ufOrigem = TempData["UfOrigem"].ToString();
            this.ufDestino = TempData["UfDestino"].ToString();

            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao
            TributacaoEmpresa trib = new TributacaoEmpresa();

            if (opcao == "Alíquotas Maiores")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL > a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }

            if (opcao == "Alíquotas Menores")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL < a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }

            if (opcao == "Alíquotas Nulas no Cliente")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL == null && a.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == 70 && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();

            }

            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            string resultado = ""; //variavel auxiliar;
            //pega todos os ID para serem alterados
            //this.analiseSn.Count()
            for (int i = 0; i < this.analise_NCM.Count(); i++)
            {

                //converter em inteiro
                int? idTrb = (this.analise_NCM[i].TE_ID);
                trib = db.TributacaoEmpresas.Find(idTrb);//busca o registro
                trib.RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL = this.analise_NCM[i].RED_BASE_CALC_ICMS_ST_VENDA_ATA_SIMP_NACIONAL_BASE.ToString().Replace(",", ".");
                trib.DT_ALTERACAO = DateTime.Now;
                try
                {

                    db.SaveChanges();
                    regSalv++; //contagem de registros salvos
                               //toda vez que salvar, gravar uma nova lista e mandar para action



                }
                catch (Exception e)
                {
                    resultado = "Problemas ao salvar o registro: " + e.ToString();
                    regNsalv++;
                }

            }
            resultado = "Registro Salvo com Sucesso!!";


            TempData["analise_NCM"] = null;
            TempData.Keep("analise_NCM");


            return RedirectToAction("EdtCliAliqRedBasCalcIcmsSTVenAtaSNMassa", new { param = resultado, qtdSalvos = regSalv, opcao = opcao });

        }







        //Edição Aliquota ICMS  compra de industria
        [HttpGet]
        public ActionResult EditClienteAliqIcmsCompIndMassa(string ufOrigem, string ufDestino,  string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            
            //Mensagem do card
            ViewBag.Mensagem = "Alíquota ICMS Compra de Industria no Cliente X  no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();
           
            if(Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else
            {
                this.empresa = (Empresa)Session["empresas"];
            }


            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;
           
            
            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;


            if (this.empresa.simples_nacional.Equals(1))
            {
                return RedirectToAction("EditClienteAliqIcmsCompIndMassaSn", new { opcao = opcao });

            }




            VerificaTempData();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;



            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMP_DE_IND > a.Aliq_Icms_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMP_DE_IND < a.Aliq_Icms_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMP_DE_IND == a.Aliq_Icms_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMP_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMP_DE_IND != null && a.Aliq_Icms_Comp_de_Ind_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMP_DE_IND > a.Aliq_Icms_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMP_DE_IND < a.Aliq_Icms_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMP_DE_IND == a.Aliq_Icms_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMP_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMP_DE_IND != null && a.Aliq_Icms_Comp_de_Ind_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMP_DE_IND > a.Aliq_Icms_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMP_DE_IND < a.Aliq_Icms_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMP_DE_IND == a.Aliq_Icms_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMP_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMP_DE_IND != null && a.Aliq_Icms_Comp_de_Ind_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";


                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMP_DE_IND > a.Aliq_Icms_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMP_DE_IND < a.Aliq_Icms_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMP_DE_IND == a.Aliq_Icms_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMP_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMP_DE_IND != null && a.Aliq_Icms_Comp_de_Ind_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMP_DE_IND > a.Aliq_Icms_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMP_DE_IND < a.Aliq_Icms_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMP_DE_IND == a.Aliq_Icms_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMP_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMP_DE_IND != null && a.Aliq_Icms_Comp_de_Ind_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                    
                    


            }
            //Action para procurar
            analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);

            
            switch (ordenacao)
            {
                case "Produto_desc":
                    analise = analise.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    analise = analise.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }



            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNSalvos = (qtdNSalvos != null) ? qtdNSalvos : "";
            
            int numeroPagina = (page ?? 1);
            return View(analise.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada

           
        }


        //Edição Aliquota ICMS  compra de industria
        [HttpGet]
        public ActionResult EditClienteAliqIcmsCompIndMassaSn(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Alíquota ICMS Compra de Industria no Cliente X  no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else
            {
                this.empresa = (Empresa)Session["empresas"];
            }


            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;






            VerificaTempDataSN();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;



            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMP_DE_IND > a.Aliq_Icms_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMP_DE_IND < a.Aliq_Icms_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMP_DE_IND == a.Aliq_Icms_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMP_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMP_DE_IND != null && a.Aliq_Icms_Comp_de_Ind_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMP_DE_IND > a.Aliq_Icms_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMP_DE_IND < a.Aliq_Icms_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMP_DE_IND == a.Aliq_Icms_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMP_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMP_DE_IND != null && a.Aliq_Icms_Comp_de_Ind_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMP_DE_IND > a.Aliq_Icms_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMP_DE_IND < a.Aliq_Icms_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMP_DE_IND == a.Aliq_Icms_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMP_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMP_DE_IND != null && a.Aliq_Icms_Comp_de_Ind_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";


                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMP_DE_IND > a.Aliq_Icms_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMP_DE_IND < a.Aliq_Icms_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMP_DE_IND == a.Aliq_Icms_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMP_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMP_DE_IND != null && a.Aliq_Icms_Comp_de_Ind_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMP_DE_IND > a.Aliq_Icms_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMP_DE_IND < a.Aliq_Icms_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMP_DE_IND == a.Aliq_Icms_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMP_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMP_DE_IND != null && a.Aliq_Icms_Comp_de_Ind_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;




            }
            //Action para procurar

            this.analiseSn = ProcuraPorSn(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analiseSn);

            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analiseSn = this.analiseSn.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analiseSn = this.analiseSn.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }



            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNSalvos = (qtdNSalvos != null) ? qtdNSalvos : "";

            int numeroPagina = (page ?? 1);
            return View(this.analiseSn.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada


        }



        [HttpGet]
        public ActionResult EditClienteAliqIcmsCompIndMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];

            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();

          
            //registros salvos
            int regSalv = 0;
            int regNsalv = 0;
            string analiseRetorno = "0";
            string analiseTrib = "0";
            try {

                if (this.empresa.simples_nacional.Equals(1)) 
                {
                    //laço de repetição para percorrer o array com os registros
                    for (int i = 0; i < idTrib.Length; i++)
                    {
                        //converter em inteiro
                        int idTrb = int.Parse(idTrib[i]);

                        //faz a busca no objeto criado instanciando um so objeto
                        trib = db.TributacaoEmpresas.Find(idTrb);

                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        AnaliseTributariaSn analiseSn = (from a in db.Analise_TributariaSn where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();
                        //pegar valores

                        analiseRetorno = (analiseSn.Aliq_Icms_Comp_de_Ind_INTERNO == null) ? analiseRetorno : analiseSn.Aliq_Icms_Comp_de_Ind_INTERNO.ToString();

                        analiseTrib = (analiseSn.ALIQ_ICMS_COMP_DE_IND == null) ? analiseTrib : (trib.ALIQ_ICMS_COMP_DE_IND);

                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.ALIQ_ICMS_COMP_DE_IND = null;
                            }
                            else
                            {
                                trib.ALIQ_ICMS_COMP_DE_IND = analiseSn.Aliq_Icms_Comp_de_Ind_INTERNO.ToString().Replace(",", ".");

                            }
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos
                        }


                    }
                }
                else
                {
                    //laço de repetição para percorrer o array com os registros
                    for (int i = 0; i < idTrib.Length; i++)
                    {
                        //converter em inteiro
                        int idTrb = int.Parse(idTrib[i]);

                        //faz a busca no objeto criado instanciando um so objeto
                        trib = db.TributacaoEmpresas.Find(idTrb);

                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();
                        //pegar valores

                        analiseRetorno = (analise.Aliq_Icms_Comp_de_Ind_INTERNO == null) ? analiseRetorno : analise.Aliq_Icms_Comp_de_Ind_INTERNO.ToString();

                        analiseTrib = (analise.ALIQ_ICMS_COMP_DE_IND == null) ? analiseTrib :(trib.ALIQ_ICMS_COMP_DE_IND);

                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.ALIQ_ICMS_COMP_DE_IND = null;
                            }
                            else
                            {
                                trib.ALIQ_ICMS_COMP_DE_IND = analise.Aliq_Icms_Comp_de_Ind_INTERNO.ToString().Replace(",", ".");

                            }
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos
                        }


                    }
                }

                   
                
                resultado = "Registro Salvo com Sucesso!!";
               
            }
            catch(Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();

            }

            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EditClienteAliqIcmsCompIndMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EditClienteAliqIcmsCompIndMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }

        }

        [HttpGet]
        public ActionResult EditClienteAliqIcmsCompIndMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;
            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();
            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                //faz a busca no objeto criado instanciando um so objeto
                //trib = db.TributacaoEmpresas.Find(idTrb);

                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }

            return View(trib);
        }

        [HttpGet]
        public ActionResult EditClienteAliqIcmsCompIndMassaManualModalPost(string strDados, string aliqIcmsCompIndClienteManual)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //trocando o ponto por virgula
            aliqIcmsCompIndClienteManual = aliqIcmsCompIndClienteManual.Replace(",", ".");

            //separar a String em um array
            string[] idTrib = strDados.Split(',');
            string resultado = "";
            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();
            int regSalvos = 0;
            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.ALIQ_ICMS_COMP_DE_IND = (aliqIcmsCompIndClienteManual != "") ? trib.ALIQ_ICMS_COMP_DE_IND = aliqIcmsCompIndClienteManual : null;
                    
                    db.SaveChanges();
                    regSalvos++;

                }

                TempData["analise"] = null;
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch(Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }

            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EditClienteAliqIcmsCompIndMassaSn", new { param = resultado, qtdSalvos = regSalvos });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EditClienteAliqIcmsCompIndMassa", new { param = resultado, qtdSalvos = regSalvos });

            }
           
        }



        /*Analise ICMS ST Compra de Industria*/
        [HttpGet]
        public ActionResult EditClienteAliqIcmsSTCompIndMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem para o cabeçalho do card da view
            ViewBag.Mensagem = "Alíquota ICMS ST Compra de Industria no Cliente X  no MTX";

            //Resultado da edição
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else
            {
                this.empresa = (Empresa)Session["empresas"];
            }

           

            //se o filtro corrente estiver nulo ele busca pelo parametro procurar por
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;

            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 à pagina caso venham nulo
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;//atribui 1 a pagina caso os parametreos nao sejam nulos

            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;

           
            //viewbag
            ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM;


            if (this.empresa.simples_nacional.Equals(1))
            {
                return RedirectToAction("EditClienteAliqIcmsSTCompIndMassaSn", new { opcao = opcao });

            }

            VerificaTempData();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;


            ViewBag.Opcao = opcao;

            //Aliquotas ICMS compra industria

            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND > a.Aliq_Icms_ST_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND < a.Aliq_Icms_ST_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND == a.Aliq_Icms_ST_Comp_de_Ind_INTERNO && a.ALIQ_ICMS_ST_COMP_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND != null && a.Aliq_Icms_ST_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND > a.Aliq_Icms_ST_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND < a.Aliq_Icms_ST_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND == a.Aliq_Icms_ST_Comp_de_Ind_INTERNO && a.ALIQ_ICMS_ST_COMP_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND != null && a.Aliq_Icms_ST_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND > a.Aliq_Icms_ST_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND < a.Aliq_Icms_ST_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND == a.Aliq_Icms_ST_Comp_de_Ind_INTERNO && a.ALIQ_ICMS_ST_COMP_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND != null && a.Aliq_Icms_ST_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND > a.Aliq_Icms_ST_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND < a.Aliq_Icms_ST_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND == a.Aliq_Icms_ST_Comp_de_Ind_INTERNO && a.ALIQ_ICMS_ST_COMP_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND != null && a.Aliq_Icms_ST_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND > a.Aliq_Icms_ST_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND < a.Aliq_Icms_ST_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND == a.Aliq_Icms_ST_Comp_de_Ind_INTERNO && a.ALIQ_ICMS_ST_COMP_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND != null && a.Aliq_Icms_ST_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
            }//fim switche opcao

            //Action de procura
            analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);


            switch (ordenacao)
            {
                case "Produto_desc":
                    analise = analise.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    analise = analise.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNSalvos = (qtdNSalvos != null) ? qtdNSalvos : "";

            int numeroPagina = (page ?? 1);
            return View(analise.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada


        }


        /*Analise ICMS ST Compra de Industria*/
        [HttpGet]
        public ActionResult EditClienteAliqIcmsSTCompIndMassaSn(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem para o cabeçalho do card da view
            ViewBag.Mensagem = "Alíquota ICMS ST Compra de Industria no Cliente X  no MTX";

            //Resultado da edição
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else
            {
                this.empresa = (Empresa)Session["empresas"];
            }



            //se o filtro corrente estiver nulo ele busca pelo parametro procurar por
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;

            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 à pagina caso venham nulo
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;//atribui 1 a pagina caso os parametreos nao sejam nulos

            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            //viewbag
            ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM;



            VerificaTempDataSN();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;


            ViewBag.Opcao = opcao;

            //Aliquotas ICMS compra industria

            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND > a.Aliq_Icms_ST_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND < a.Aliq_Icms_ST_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND == a.Aliq_Icms_ST_Comp_de_Ind_INTERNO && a.ALIQ_ICMS_ST_COMP_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND != null && a.Aliq_Icms_ST_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND > a.Aliq_Icms_ST_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND < a.Aliq_Icms_ST_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND == a.Aliq_Icms_ST_Comp_de_Ind_INTERNO && a.ALIQ_ICMS_ST_COMP_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND != null && a.Aliq_Icms_ST_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND > a.Aliq_Icms_ST_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND < a.Aliq_Icms_ST_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND == a.Aliq_Icms_ST_Comp_de_Ind_INTERNO && a.ALIQ_ICMS_ST_COMP_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND != null && a.Aliq_Icms_ST_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND > a.Aliq_Icms_ST_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND < a.Aliq_Icms_ST_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND == a.Aliq_Icms_ST_Comp_de_Ind_INTERNO && a.ALIQ_ICMS_ST_COMP_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND != null && a.Aliq_Icms_ST_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND > a.Aliq_Icms_ST_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND < a.Aliq_Icms_ST_Comp_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND == a.Aliq_Icms_ST_Comp_de_Ind_INTERNO && a.ALIQ_ICMS_ST_COMP_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMP_DE_IND != null && a.Aliq_Icms_ST_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
            }//fim switche opcao

            //Action para procurar
            this.analiseSn = ProcuraPorSn(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analiseSn);


            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analiseSn = this.analiseSn.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analiseSn = this.analiseSn.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNSalvos = (qtdNSalvos != null) ? qtdNSalvos : "";

            int numeroPagina = (page ?? 1);
            return View(this.analiseSn.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada


        }


        [HttpGet]
        public ActionResult EditClienteAliqIcmsSTCompIndMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }

            this.empresa = (Empresa)Session["empresas"];
            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();

            //registros salvos
            int regSalv = 0;
            int regNsalv = 0;
            string analiseRetorno = "0";
            string analiseTrib = "0";
            try
            {
                if (this.empresa.simples_nacional.Equals(1)) 
                {
                    //laço de repetição para percorrer o array com os registros
                    for (int i = 0; i < idTrib.Length; i++)
                    {
                        //converter em inteiro
                        int idTrb = int.Parse(idTrib[i]);

                        //faz a busca no objeto criado instanciando um so objeto
                        trib = db.TributacaoEmpresas.Find(idTrb);

                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        AnaliseTributariaSn analiseSn = (from a in db.Analise_TributariaSn where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();
                        //pegar valores
                        analiseRetorno = (analiseSn.Aliq_Icms_ST_Comp_de_Ind_INTERNO == null) ? analiseRetorno : analiseSn.Aliq_Icms_ST_Comp_de_Ind_INTERNO.ToString();
                        analiseTrib = (analiseSn.ALIQ_ICMS_ST_COMP_DE_IND == null) ? analiseTrib : (trib.ALIQ_ICMS_ST_COMP_DE_IND);

                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.ALIQ_ICMS_ST_COMP_DE_IND = null;
                            }
                            else
                            {
                                //atribui o valor procurado na analise ao objeto instanciado
                                trib.ALIQ_ICMS_ST_COMP_DE_IND = analiseSn.Aliq_Icms_ST_Comp_de_Ind_INTERNO.ToString().Replace(",", ".");
                            }    
                            db.SaveChanges();
                        
                            regSalv++; //contagem de registros salvos
                        }


                    }
                }
                else
                {
                    //laço de repetição para percorrer o array com os registros
                    for (int i = 0; i < idTrib.Length; i++)
                    {
                        //converter em inteiro
                        int idTrb = int.Parse(idTrib[i]);

                        //faz a busca no objeto criado instanciando um so objeto
                        trib = db.TributacaoEmpresas.Find(idTrb);

                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();
                        //pegar valores
                        analiseRetorno = (analise.Aliq_Icms_ST_Comp_de_Ind_INTERNO == null) ? analiseRetorno : analise.Aliq_Icms_ST_Comp_de_Ind_INTERNO.ToString();
                        analiseTrib = (analise.ALIQ_ICMS_ST_COMP_DE_IND == null) ? analiseTrib : (trib.ALIQ_ICMS_ST_COMP_DE_IND);

                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.ALIQ_ICMS_ST_COMP_DE_IND = null;
                            }
                            else
                            {
                                //atribui o valor procurado na analise ao objeto instanciado
                                trib.ALIQ_ICMS_ST_COMP_DE_IND = analise.Aliq_Icms_ST_Comp_de_Ind_INTERNO.ToString().Replace(",", ".");
                            }
                            db.SaveChanges();

                            regSalv++; //contagem de registros salvos
                        }


                    }
                }

                    
               
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();

            }
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EditClienteAliqIcmsVendaVarSTCFMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EditClienteAliqIcmsSTCompIndMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }

        }


        [HttpGet]
        public ActionResult EditClienteAliqIcmsSTCompIndMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;
            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();
            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                //faz a busca no objeto criado instanciando um so objeto e adicionando à lista
                 trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }

            return View(trib);

        }

        [HttpGet]
        public ActionResult EditClienteAliqIcmsSTCompIndMassaManualModalPost(string strDados, string aliqIcmsSTCompIndClienteManual)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //trocando o ponto por virgula
            aliqIcmsSTCompIndClienteManual = aliqIcmsSTCompIndClienteManual.Replace(",", ".");

            //separar a String em um array
            string[] idTrib = strDados.Split(',');
            string resultado = "";
            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();
            int regSalvos = 0;
            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.ALIQ_ICMS_ST_COMP_DE_IND = (aliqIcmsSTCompIndClienteManual != "") ? trib.ALIQ_ICMS_ST_COMP_DE_IND = aliqIcmsSTCompIndClienteManual : null;

                    db.SaveChanges();
                    regSalvos++;

                }
              
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EditClienteAliqIcmsSTCompIndMassaSn", new { param = resultado, qtdSalvos = regSalvos });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EditClienteAliqIcmsSTCompIndMassa", new { param = resultado, qtdSalvos = regSalvos });

            }

           
        }

        /*Analise ICMS COMPRA DE ATACADO*/
        [HttpGet]
        public ActionResult EditClienteAliqIcmsCompAtaMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem para o cabeçalho do card da view
            ViewBag.Mensagem = "Alíquota ICMS Compra de Atacado no Cliente X  no MTX";

            //Resultado da edição
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else
            {
                this.empresa = (Empresa)Session["empresas"];
            }



            //se o filtro corrente estiver nulo ele busca pelo parametro procurar por
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;

            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 à pagina caso venham nulo
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;//atribui 1 a pagina caso os parametreos nao sejam nulos

            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            //viewbag
            ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM;

            /*Para tipar*/ /*Ponto de ajuste: verificar se houve alteração na lista se houver instancia novamente caso contrario passa*/
            //var analise = (from a in db.Analise_Tributaria where a.CNPJ_EMPRESA == empresa.cnpj select a);


            if (this.empresa.simples_nacional.Equals(1))
            {
                return RedirectToAction("EditClienteAliqIcmsCompAtaMassaSn", new { opcao = opcao });

            }
            VerificaTempData();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            ViewBag.Opcao = opcao;

            //Aliquotas ICMS compra industria

            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA > a.Aliq_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA < a.Aliq_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA == a.Aliq_Icms_Compra_de_Ata_INTERNO && a.ALIQ_ICMS_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA != null && a.Aliq_Icms_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA > a.Aliq_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA < a.Aliq_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA == a.Aliq_Icms_Compra_de_Ata_INTERNO && a.ALIQ_ICMS_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA != null && a.Aliq_Icms_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA > a.Aliq_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA < a.Aliq_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA == a.Aliq_Icms_Compra_de_Ata_INTERNO && a.ALIQ_ICMS_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA != null && a.Aliq_Icms_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA > a.Aliq_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA < a.Aliq_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA == a.Aliq_Icms_Compra_de_Ata_INTERNO && a.ALIQ_ICMS_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA != null && a.Aliq_Icms_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA > a.Aliq_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA < a.Aliq_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA == a.Aliq_Icms_Compra_de_Ata_INTERNO && a.ALIQ_ICMS_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA != null && a.Aliq_Icms_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
            }//fim switche opcao

            //Action de procura
            analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);


            switch (ordenacao)
            {
                case "Produto_desc":
                    analise = analise.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    analise = analise.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNSalvos = (qtdNSalvos != null) ? qtdNSalvos : "";

            int numeroPagina = (page ?? 1);
            return View(analise.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada


        }



        /*Analise ICMS COMPRA DE ATACADO*/
        [HttpGet]
        public ActionResult EditClienteAliqIcmsCompAtaMassaSn(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem para o cabeçalho do card da view
            ViewBag.Mensagem = "Alíquota ICMS Compra de Atacado no Cliente X  no MTX";

            //Resultado da edição
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else
            {
                this.empresa = (Empresa)Session["empresas"];
            }



            //se o filtro corrente estiver nulo ele busca pelo parametro procurar por
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;

            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 à pagina caso venham nulo
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;//atribui 1 a pagina caso os parametreos nao sejam nulos

            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            //viewbag
            ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM;

            /*Para tipar*/ /*Ponto de ajuste: verificar se houve alteração na lista se houver instancia novamente caso contrario passa*/
            //var analise = (from a in db.Analise_Tributaria where a.CNPJ_EMPRESA == empresa.cnpj select a);

            VerificaTempDataSN();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            ViewBag.Opcao = opcao;

            //Aliquotas ICMS compra industria

            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA > a.Aliq_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA < a.Aliq_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA == a.Aliq_Icms_Compra_de_Ata_INTERNO && a.ALIQ_ICMS_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA != null && a.Aliq_Icms_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA > a.Aliq_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA < a.Aliq_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA == a.Aliq_Icms_Compra_de_Ata_INTERNO && a.ALIQ_ICMS_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA != null && a.Aliq_Icms_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA > a.Aliq_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA < a.Aliq_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA == a.Aliq_Icms_Compra_de_Ata_INTERNO && a.ALIQ_ICMS_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA != null && a.Aliq_Icms_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA > a.Aliq_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA < a.Aliq_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA == a.Aliq_Icms_Compra_de_Ata_INTERNO && a.ALIQ_ICMS_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA != null && a.Aliq_Icms_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA > a.Aliq_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA < a.Aliq_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA == a.Aliq_Icms_Compra_de_Ata_INTERNO && a.ALIQ_ICMS_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_ATA != null && a.Aliq_Icms_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
            }//fim switche opcao

            //Action de procura
            this.analiseSn = ProcuraPorSn(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analiseSn);


            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analiseSn = this.analiseSn.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analiseSn = this.analiseSn.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNSalvos = (qtdNSalvos != null) ? qtdNSalvos : "";

            int numeroPagina = (page ?? 1);
            return View(this.analiseSn.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada


        }



        [HttpGet]
        public ActionResult EditClienteAliqIcmsCompAtaMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();

            //registros salvos
            int regSalv = 0;
            int regNsalv = 0;
            string analiseRetorno = "0";
            string analiseTrib = "0";
            try
            {
                if (this.empresa.simples_nacional.Equals(1))
                {
                    //laço de repetição para percorrer o array com os registros
                    for (int i = 0; i < idTrib.Length; i++)
                    {
                        //converter em inteiro
                        int idTrb = int.Parse(idTrib[i]);

                        //faz a busca no objeto criado instanciando um so objeto
                        trib = db.TributacaoEmpresas.Find(idTrb);

                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        AnaliseTributariaSn analiseSn = (from a in db.Analise_TributariaSn where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();
                        //pegar valores

                        analiseRetorno = (analiseSn.Aliq_Icms_Compra_de_Ata_INTERNO == null) ? analiseRetorno : analiseSn.Aliq_Icms_Compra_de_Ata_INTERNO.ToString();

                        analiseTrib = (analiseSn.ALIQ_ICMS_COMPRA_DE_ATA == null) ? analiseTrib : (trib.ALIQ_ICMS_COMPRA_DE_ATA);

                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.ALIQ_ICMS_COMPRA_DE_ATA = null;
                            }
                            else
                            {
                                trib.ALIQ_ICMS_COMPRA_DE_ATA = analiseSn.Aliq_Icms_Compra_de_Ata_INTERNO.ToString().Replace(",", ".");

                            }
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos
                        }


                    }
                }
                else
                {
                    //laço de repetição para percorrer o array com os registros
                    for (int i = 0; i < idTrib.Length; i++)
                    {
                        //converter em inteiro
                        int idTrb = int.Parse(idTrib[i]);

                        //faz a busca no objeto criado instanciando um so objeto
                        trib = db.TributacaoEmpresas.Find(idTrb);

                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();
                        //pegar valores

                        analiseRetorno = (analise.Aliq_Icms_Compra_de_Ata_INTERNO == null) ? analiseRetorno : analise.Aliq_Icms_Compra_de_Ata_INTERNO.ToString();

                        analiseTrib = (analise.ALIQ_ICMS_COMPRA_DE_ATA == null) ? analiseTrib : (trib.ALIQ_ICMS_COMPRA_DE_ATA);

                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.ALIQ_ICMS_COMPRA_DE_ATA = null;
                            }
                            else
                            {
                                trib.ALIQ_ICMS_COMPRA_DE_ATA = analise.Aliq_Icms_Compra_de_Ata_INTERNO.ToString().Replace(",", ".");

                            }
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos
                        }


                    }
                }

                  

                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();

            }
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EditClienteAliqIcmsCompAtaMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EditClienteAliqIcmsCompAtaMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }

        }

        [HttpGet]
        public ActionResult EditClienteAliqIcmsCompAtaMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;
            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();
            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                //faz a busca no objeto criado instanciando um so objeto e adicionando à lista
                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }

            return View(trib);

        }

        [HttpGet]
        public ActionResult EditClienteAliqIcmsCompAtaMassaManualModalPost(string strDados, string aliqIcmsCompAta)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //trocando o ponto por virgula
            aliqIcmsCompAta = aliqIcmsCompAta.Replace(",", ".");

            //separar a String em um array
            string[] idTrib = strDados.Split(',');
            string resultado = "";
            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();

            int regSalv = 0;
            int regNsalv = 0;
            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.ALIQ_ICMS_COMPRA_DE_ATA = (aliqIcmsCompAta != "") ? trib.ALIQ_ICMS_COMPRA_DE_ATA = aliqIcmsCompAta : null;
                    trib.DT_ALTERACAO = DateTime.Now;
                    try
                    {
                        db.SaveChanges();
                        regSalv++;
                    }
                    catch (Exception e)
                    {
                        resultado = "Problemas ao salvar o registro: " + e.ToString();
                        regNsalv++;
                    }
                   

                }
                
                TempData["analise"] = null;
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }

            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EditClienteAliqIcmsCompAtaMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EditClienteAliqIcmsCompAtaMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }
            
        }

        /*Analise ICMS ST COMPRA DE ATACADO*/
        [HttpGet]
        public ActionResult EditClienteAliqIcmsSTCompAtaMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem para o cabeçalho do card da view
            ViewBag.Mensagem = "Alíquota ICMS ST Compra de Atacado no Cliente X  no MTX";

            //Resultado da edição
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else
            {
                this.empresa = (Empresa)Session["empresas"];
            }



            //se o filtro corrente estiver nulo ele busca pelo parametro procurar por
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;

            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 à pagina caso venham nulo
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;//atribui 1 a pagina caso os parametreos nao sejam nulos

            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            //viewbag
            ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM;

            if (this.empresa.simples_nacional.Equals(1))
            {
                return RedirectToAction("EditClienteAliqIcmsSTCompAtaMassaSn", new { opcao = opcao });

            }

            VerificaTempData();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            ViewBag.Opcao = opcao;

            //Aliquotas ICMS compra industria

            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA > a.Aliq_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA < a.Aliq_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA == a.Aliq_Icms_ST_Compra_de_Ata_INTERNO && a.ALIQ_ICMS_ST_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA != null && a.Aliq_Icms_ST_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA > a.Aliq_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA < a.Aliq_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA == a.Aliq_Icms_ST_Compra_de_Ata_INTERNO && a.ALIQ_ICMS_ST_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA != null && a.Aliq_Icms_ST_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA > a.Aliq_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA < a.Aliq_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA == a.Aliq_Icms_ST_Compra_de_Ata_INTERNO && a.ALIQ_ICMS_ST_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA != null && a.Aliq_Icms_ST_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA > a.Aliq_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA < a.Aliq_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA == a.Aliq_Icms_ST_Compra_de_Ata_INTERNO && a.ALIQ_ICMS_ST_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA != null && a.Aliq_Icms_ST_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA > a.Aliq_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA < a.Aliq_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA == a.Aliq_Icms_ST_Compra_de_Ata_INTERNO && a.ALIQ_ICMS_ST_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA != null && a.Aliq_Icms_ST_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
            }//fim switche opcao

            //Action de procura
            analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);


            switch (ordenacao)
            {
                case "Produto_desc":
                    analise = analise.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    analise = analise.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNSalvos = (qtdNSalvos != null) ? qtdNSalvos : "";

            int numeroPagina = (page ?? 1);
            return View(analise.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada


        }



        /*Analise ICMS ST COMPRA DE ATACADO*/
        [HttpGet]
        public ActionResult EditClienteAliqIcmsSTCompAtaMassaSn(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
           
            //Mensagem para o cabeçalho do card da view
            ViewBag.Mensagem = "Alíquota ICMS ST Compra de Atacado no Cliente X  no MTX";

            //Resultado da edição
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else
            {
                this.empresa = (Empresa)Session["empresas"];
            }



            //se o filtro corrente estiver nulo ele busca pelo parametro procurar por
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;

            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 à pagina caso venham nulo
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;//atribui 1 a pagina caso os parametreos nao sejam nulos

            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            //viewbag
            ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM;


            VerificaTempDataSN();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            ViewBag.Opcao = opcao;

            //Aliquotas ICMS compra industria

            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA > a.Aliq_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA < a.Aliq_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA == a.Aliq_Icms_ST_Compra_de_Ata_INTERNO && a.ALIQ_ICMS_ST_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA != null && a.Aliq_Icms_ST_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA > a.Aliq_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA < a.Aliq_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA == a.Aliq_Icms_ST_Compra_de_Ata_INTERNO && a.ALIQ_ICMS_ST_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA != null && a.Aliq_Icms_ST_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA > a.Aliq_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA < a.Aliq_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA == a.Aliq_Icms_ST_Compra_de_Ata_INTERNO && a.ALIQ_ICMS_ST_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA != null && a.Aliq_Icms_ST_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA > a.Aliq_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA < a.Aliq_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA == a.Aliq_Icms_ST_Compra_de_Ata_INTERNO && a.ALIQ_ICMS_ST_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA != null && a.Aliq_Icms_ST_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA > a.Aliq_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA < a.Aliq_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA == a.Aliq_Icms_ST_Compra_de_Ata_INTERNO && a.ALIQ_ICMS_ST_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_ATA != null && a.Aliq_Icms_ST_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
            }//fim switche opcao

            //Action para procurar
            this.analiseSn = ProcuraPorSn(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analiseSn);


            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analiseSn = this.analiseSn.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analiseSn = this.analiseSn.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNSalvos = (qtdNSalvos != null) ? qtdNSalvos : "";

            int numeroPagina = (page ?? 1);
            return View(this.analiseSn.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada


        }


        [HttpGet]
        public ActionResult EditClienteAliqIcmsSTCompAtaMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();

            //registros salvos
            int regSalv = 0;
            int regNsalv = 0;
            string analiseRetorno = "0";
            string analiseTrib = "0";
            try
            {

                if (this.empresa.simples_nacional.Equals(1))
                {
                    //laço de repetição para percorrer o array com os registros
                    for (int i = 0; i < idTrib.Length; i++)
                    {
                        //converter em inteiro
                        int idTrb = int.Parse(idTrib[i]);

                        //faz a busca no objeto criado instanciando um so objeto
                        trib = db.TributacaoEmpresas.Find(idTrb);

                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        AnaliseTributariaSn analiseSn = (from a in db.Analise_TributariaSn where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();
                        //pegar valores

                        analiseRetorno = (analiseSn.Aliq_Icms_ST_Compra_de_Ata_INTERNO == null) ? analiseRetorno : analiseSn.Aliq_Icms_ST_Compra_de_Ata_INTERNO.ToString();

                        analiseTrib = (analiseSn.ALIQ_ICMS_ST_COMPRA_DE_ATA == null) ? analiseTrib : (trib.ALIQ_ICMS_ST_COMPRA_DE_ATA);

                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.ALIQ_ICMS_ST_COMPRA_DE_ATA = null;
                            }
                            else
                            {
                                trib.ALIQ_ICMS_ST_COMPRA_DE_ATA = analiseSn.Aliq_Icms_ST_Compra_de_Ata_INTERNO.ToString().Replace(",", ".");

                            }
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos
                        }


                    }

                }
                else
                {
                    //laço de repetição para percorrer o array com os registros
                    for (int i = 0; i < idTrib.Length; i++)
                    {
                        //converter em inteiro
                        int idTrb = int.Parse(idTrib[i]);

                        //faz a busca no objeto criado instanciando um so objeto
                        trib = db.TributacaoEmpresas.Find(idTrb);

                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();
                        //pegar valores

                        analiseRetorno = (analise.Aliq_Icms_ST_Compra_de_Ata_INTERNO == null) ? analiseRetorno : analise.Aliq_Icms_ST_Compra_de_Ata_INTERNO.ToString();

                        analiseTrib = (analise.ALIQ_ICMS_ST_COMPRA_DE_ATA == null) ? analiseTrib : (trib.ALIQ_ICMS_ST_COMPRA_DE_ATA);

                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.ALIQ_ICMS_ST_COMPRA_DE_ATA = null;
                            }
                            else
                            {
                                trib.ALIQ_ICMS_ST_COMPRA_DE_ATA = analise.Aliq_Icms_ST_Compra_de_Ata_INTERNO.ToString().Replace(",", ".");

                            }
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos
                        }


                    }

                }

                    
             
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();

            }

            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EditClienteAliqIcmsSTCompAtaMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EditClienteAliqIcmsSTCompAtaMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }


        }

        [HttpGet]
        public ActionResult EditClienteAliqIcmsSTCompAtaMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;
            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();
            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                //faz a busca no objeto criado instanciando um so objeto e adicionando à lista
                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }

            return View(trib);

        }

        [HttpGet]
        public ActionResult EditClienteAliqIcmsSTCompAtaMassaManualModalPost(string strDados, string aliqIcmsSTCompAta)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //trocando o ponto por virgula
            aliqIcmsSTCompAta = aliqIcmsSTCompAta.Replace(",", ".");

            //separar a String em um array
            string[] idTrib = strDados.Split(',');
            string resultado = "";
            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();


            int regSalv = 0;
            int regNsalv = 0;
            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.ALIQ_ICMS_ST_COMPRA_DE_ATA = (aliqIcmsSTCompAta != "") ? trib.ALIQ_ICMS_ST_COMPRA_DE_ATA = aliqIcmsSTCompAta : null;
                    trib.DT_ALTERACAO = DateTime.Now;
                    try
                    {
                        db.SaveChanges();
                        regSalv++;
                    }
                    catch (Exception e)
                    {
                        resultado = "Problemas ao salvar o registro: " + e.ToString();
                        regNsalv++;
                    }


                }

                TempData["analise"] = null;
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EditClienteAliqIcmsSTCompAtaMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EditClienteAliqIcmsSTCompAtaMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }

            
        }


        /*Analise ICMS  COMPRA DE SIMPLES NACIONAL*/
        [HttpGet]
        public ActionResult EditClienteAliqIcmsCompSNMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem para o cabeçalho do card da view
            ViewBag.Mensagem = "Alíquota ICMS  Compra de Simples Nacional no Cliente X  no MTX";

            //Resultado da edição
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else
            {
                this.empresa = (Empresa)Session["empresas"];
            }



            //se o filtro corrente estiver nulo ele busca pelo parametro procurar por
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;

            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 à pagina caso venham nulo
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;//atribui 1 a pagina caso os parametreos nao sejam nulos

            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            //viewbag
            ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM;


            if (this.empresa.simples_nacional.Equals(1))
            {
                return RedirectToAction("EditClienteAliqIcmsCompSNMassaSn", new { opcao = opcao });

            }



            VerificaTempData();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            ViewBag.Opcao = opcao;

            //Aliquotas ICMS compra industria

            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL > a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL < a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL == a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO && a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL != null && a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL > a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL < a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL == a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO && a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL != null && a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL > a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL < a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL == a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO && a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL != null && a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL > a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL < a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL == a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO && a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL != null && a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL > a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL < a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL == a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO && a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL != null && a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
            }//fim switche opcao

            //Action de procura
            analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);


            switch (ordenacao)
            {
                case "Produto_desc":
                    analise = analise.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    analise = analise.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNSalvos = (qtdNSalvos != null) ? qtdNSalvos : "";

            int numeroPagina = (page ?? 1);
            return View(analise.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada


        }



        /*Analise ICMS  COMPRA DE SIMPLES NACIONAL*/
        [HttpGet]
        public ActionResult EditClienteAliqIcmsCompSNMassaSn(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem para o cabeçalho do card da view
            ViewBag.Mensagem = "Alíquota ICMS  Compra de Simples Nacional no Cliente X  no MTX";

            //Resultado da edição
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else
            {
                this.empresa = (Empresa)Session["empresas"];
            }



            //se o filtro corrente estiver nulo ele busca pelo parametro procurar por
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;

            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 à pagina caso venham nulo
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;//atribui 1 a pagina caso os parametreos nao sejam nulos

            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            //viewbag
            ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM;

            VerificaTempDataSN();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            ViewBag.Opcao = opcao;

            //Aliquotas ICMS compra industria

            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL > a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL < a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL == a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO && a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL != null && a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL > a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL < a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL == a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO && a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL != null && a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL > a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL < a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL == a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO && a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL != null && a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL > a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL < a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL == a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO && a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL != null && a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL > a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL < a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL == a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO && a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL != null && a.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
            }//fim switche opcao

            //Action para procurar
            this.analiseSn = ProcuraPorSn(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analiseSn);


            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analiseSn = this.analiseSn.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analiseSn = this.analiseSn.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNSalvos = (qtdNSalvos != null) ? qtdNSalvos : "";

            int numeroPagina = (page ?? 1);
            return View(this.analiseSn.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada


        }




        [HttpGet]
        public ActionResult EditClienteAliqIcmsCompSNMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();

            //registros salvos
            int regSalv = 0;
            int regNsalv = 0;
            string analiseRetorno = "0";
            string analiseTrib = "0";
            try
            {
                if (this.empresa.simples_nacional.Equals(1))
                {
                    //laço de repetição para percorrer o array com os registros
                    for (int i = 0; i < idTrib.Length; i++)
                    {
                        //converter em inteiro
                        int idTrb = int.Parse(idTrib[i]);

                        //faz a busca no objeto criado instanciando um so objeto
                        trib = db.TributacaoEmpresas.Find(idTrb);

                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        AnaliseTributariaSn analiseSn = (from a in db.Analise_TributariaSn where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();
                        //pegar valores
                        analiseRetorno = (analiseSn.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO == null) ? analiseRetorno : analiseSn.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO.ToString();

                        analiseTrib = (analiseSn.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL == null) ? analiseTrib : (trib.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL);


                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL = null;
                            }
                            else
                            {
                                trib.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL = analiseSn.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO.ToString().Replace(",", ".");

                            }
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos
                        }


                    }
                }
                else 
                {
                    //laço de repetição para percorrer o array com os registros
                    for (int i = 0; i < idTrib.Length; i++)
                    {
                        //converter em inteiro
                        int idTrb = int.Parse(idTrib[i]);

                        //faz a busca no objeto criado instanciando um so objeto
                        trib = db.TributacaoEmpresas.Find(idTrb);

                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();
                        //pegar valores
                        analiseRetorno = (analise.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO == null) ? analiseRetorno : analise.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO.ToString();

                        analiseTrib = (analise.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL == null) ? analiseTrib : (trib.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL);


                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL = null;
                            }
                            else
                            {
                                trib.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL = analise.Aliq_Icms_Compra_de_Simp_Nacional_INTERNO.ToString().Replace(",", ".");

                            }
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos
                        }


                    }
                }

                
               
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();

            }

            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EditClienteAliqIcmsCompSNMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EditClienteAliqIcmsCompSNMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }

        }

        [HttpGet]
        public ActionResult EditClienteAliqIcmsCompSNMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;
            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();
            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                //faz a busca no objeto criado instanciando um so objeto e adicionando à lista
                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }

            return View(trib);
        }

        [HttpGet]
        public ActionResult EditClienteAliqIcmsCompSNMassaManualModalPost(string strDados, string aliqIcmsCompSN)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //trocando o ponto por virgula
            aliqIcmsCompSN = aliqIcmsCompSN.Replace(",", ".");

            //separar a String em um array
            string[] idTrib = strDados.Split(',');
            string resultado = "";
            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();


            int regSalv = 0;
            int regNsalv = 0;
            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL = (aliqIcmsCompSN != "") ? trib.ALIQ_ICMS_COMPRA_DE_SIMP_NACIONAL = aliqIcmsCompSN : null;
                    trib.DT_ALTERACAO = DateTime.Now;
                    try
                    {
                        db.SaveChanges();
                        regSalv++;
                    }
                    catch (Exception e)
                    {
                        resultado = "Problemas ao salvar o registro: " + e.ToString();
                        regNsalv++;
                    }


                }

               
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EditClienteAliqIcmsCompSNMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EditClienteAliqIcmsCompSNMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }


            
        }


        /*Analise ICMS ST COMPRA DE SIMPLES NACIONAL*/
        
        [HttpGet]
        public ActionResult EditClienteAliqIcmsSTCompSNMassa(string ufOrigem, string ufDestin, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem para o cabeçalho do card da view
            ViewBag.Mensagem = "Alíquota ICMS ST Compra de Simples Nacional no Cliente X  no MTX";

            //Resultado da edição
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else
            {
                this.empresa = (Empresa)Session["empresas"];
            }



            //se o filtro corrente estiver nulo ele busca pelo parametro procurar por
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;

            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 à pagina caso venham nulo
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;//atribui 1 a pagina caso os parametreos nao sejam nulos

            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            //viewbag
            ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM;


            if (this.empresa.simples_nacional.Equals(1))
            {
                return RedirectToAction("EditClienteAliqIcmsSTCompSNMassaSn", new { opcao = opcao });

            }


            VerificaTempData();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            ViewBag.Opcao = opcao;

            //Aliquotas ICMS compra industria

            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL > a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL < a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL > a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL < a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL > a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL < a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL > a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL < a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL > a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL < a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
            }//fim switche opcao

            //Action de procura
            analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);


            switch (ordenacao)
            {
                case "Produto_desc":
                    analise = analise.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    analise = analise.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNSalvos = (qtdNSalvos != null) ? qtdNSalvos : "";

            int numeroPagina = (page ?? 1);
            return View(analise.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada


        }


        [HttpGet]
        public ActionResult EditClienteAliqIcmsSTCompSNMassaSn(string ufOrigem, string ufDestin, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem para o cabeçalho do card da view
            ViewBag.Mensagem = "Alíquota ICMS ST Compra de Simples Nacional no Cliente X  no MTX";

            //Resultado da edição
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else
            {
                this.empresa = (Empresa)Session["empresas"];
            }



            //se o filtro corrente estiver nulo ele busca pelo parametro procurar por
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;

            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 à pagina caso venham nulo
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;//atribui 1 a pagina caso os parametreos nao sejam nulos

            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            //viewbag
            ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM;

            VerificaTempDataSN();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            ViewBag.Opcao = opcao;

            //Aliquotas ICMS compra industria

            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL > a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL < a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL > a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL < a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL > a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL < a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL > a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL < a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL > a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL < a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
            }//fim switche opcao

            //Action para procurar
            this.analiseSn = ProcuraPorSn(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analiseSn);


            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analiseSn = this.analiseSn.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analiseSn = this.analiseSn.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNSalvos = (qtdNSalvos != null) ? qtdNSalvos : "";

            int numeroPagina = (page ?? 1);
            return View(this.analiseSn.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada


        }





        [HttpGet]
        public ActionResult EditClienteAliqIcmsSTCompSNMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();

            //registros salvos
            int regSalv = 0;
            int regNsalv = 0;
            string analiseRetorno = "0";
            string analiseTrib = "0";
            try
            {
                if (this.empresa.simples_nacional.Equals(1))
                {
                    //laço de repetição para percorrer o array com os registros
                    for (int i = 0; i < idTrib.Length; i++)
                    {
                        //converter em inteiro
                        int idTrb = int.Parse(idTrib[i]);

                        //faz a busca no objeto criado instanciando um so objeto
                        trib = db.TributacaoEmpresas.Find(idTrb);

                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        AnaliseTributariaSn analiseSn = (from a in db.Analise_TributariaSn where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();
                        //pegar valores

                        analiseRetorno = (analiseSn.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO == null) ? analiseRetorno : analiseSn.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO.ToString();


                        analiseTrib = (analiseSn.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == null) ? analiseTrib : (trib.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL);

                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL = null;
                            }
                            else
                            {
                                trib.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL = analiseSn.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO.ToString().Replace(",", ".");

                            }
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos
                        }


                    }
                } 
                else 
                {
                    //laço de repetição para percorrer o array com os registros
                    for (int i = 0; i < idTrib.Length; i++)
                    {
                        //converter em inteiro
                        int idTrb = int.Parse(idTrib[i]);

                        //faz a busca no objeto criado instanciando um so objeto
                        trib = db.TributacaoEmpresas.Find(idTrb);

                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();
                        //pegar valores

                        analiseRetorno = (analise.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO == null) ? analiseRetorno : analise.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO.ToString();


                        analiseTrib = (analise.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == null) ? analiseTrib : (trib.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL);

                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL = null;
                            }
                            else
                            {
                                trib.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL = analise.Aliq_Icms_ST_Compra_de_Simp_Nacional_INTERNO.ToString().Replace(",", ".");

                            }
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos
                        }


                    }
                }

              
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();

            }
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EditClienteAliqIcmsSTCompSNMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EditClienteAliqIcmsSTCompSNMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }

        }

        [HttpGet]
        public ActionResult EditClienteAliqIcmsSTCompSNMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;
            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();
            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                //faz a busca no objeto criado instanciando um so objeto e adicionando à lista
                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }

            return View(trib);
        }


        [HttpGet]
        public ActionResult EditClienteAliqIcmsSTCompSNMassaManualModalPost(string strDados, string aliqIcmsSTCompSN)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //trocando o ponto por virgula
            aliqIcmsSTCompSN = aliqIcmsSTCompSN.Replace(",", ".");

            //separar a String em um array
            string[] idTrib = strDados.Split(',');
            string resultado = "";
            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();


            int regSalv = 0;
            int regNsalv = 0;
            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL = (aliqIcmsSTCompSN != "") ? trib.ALIQ_ICMS_ST_COMPRA_DE_SIMP_NACIONAL = aliqIcmsSTCompSN : null;
                    trib.DT_ALTERACAO = DateTime.Now;
                    try
                    {
                        db.SaveChanges();
                        regSalv++;
                    }
                    catch (Exception e)
                    {
                        resultado = "Problemas ao salvar o registro: " + e.ToString();
                        regNsalv++;
                    }


                }

               
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EditClienteAliqIcmsSTCompSNMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EditClienteAliqIcmsSTCompSNMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }


        }

        /*Analise ICMS NFE COMPRA DE INDUSTRIA*/
        
        [HttpGet]
        public ActionResult EditClienteAliqIcmsNFECompIndMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem para o cabeçalho do card da view
            ViewBag.Mensagem = "Alíquota ICMS NFE compra de Indústria no Cliente X  no MTX";

            //Resultado da edição
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else
            {
                this.empresa = (Empresa)Session["empresas"];
            }



            //se o filtro corrente estiver nulo ele busca pelo parametro procurar por
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;

            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 à pagina caso venham nulo
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;//atribui 1 a pagina caso os parametreos nao sejam nulos

            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            //viewbag
            ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM;

            if (this.empresa.simples_nacional.Equals(1))
            {
                return RedirectToAction("EditClienteAliqIcmsNFECompIndMassaSn", new { opcao = opcao });

            }



            VerificaTempData();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            ViewBag.Opcao = opcao;

            //Aliquotas ICMS compra industria

            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE > a.Aliq_Icms_NFE_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE < a.Aliq_Icms_NFE_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE == a.Aliq_Icms_NFE_INTERNO && a.ALIQ_ICMS_NFE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE != null && a.Aliq_Icms_NFE_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE > a.Aliq_Icms_NFE_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE < a.Aliq_Icms_NFE_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE == a.Aliq_Icms_NFE_INTERNO && a.ALIQ_ICMS_NFE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE != null && a.Aliq_Icms_NFE_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE > a.Aliq_Icms_NFE_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE < a.Aliq_Icms_NFE_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE == a.Aliq_Icms_NFE_INTERNO && a.ALIQ_ICMS_NFE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE != null && a.Aliq_Icms_NFE_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE > a.Aliq_Icms_NFE_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE < a.Aliq_Icms_NFE_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE == a.Aliq_Icms_NFE_INTERNO && a.ALIQ_ICMS_NFE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE != null && a.Aliq_Icms_NFE_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE > a.Aliq_Icms_NFE_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE < a.Aliq_Icms_NFE_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE == a.Aliq_Icms_NFE_INTERNO && a.ALIQ_ICMS_NFE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE != null && a.Aliq_Icms_NFE_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
            }//fim switche opcao

            //Action de procura
            analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);


            switch (ordenacao)
            {
                case "Produto_desc":
                    analise = analise.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    analise = analise.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNSalvos = (qtdNSalvos != null) ? qtdNSalvos : "";

            int numeroPagina = (page ?? 1);
            return View(analise.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada


        }



        [HttpGet]
        public ActionResult EditClienteAliqIcmsNFECompIndMassaSn(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem para o cabeçalho do card da view
            ViewBag.Mensagem = "Alíquota ICMS NFE compra de Indústria no Cliente X  no MTX";

            //Resultado da edição
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else
            {
                this.empresa = (Empresa)Session["empresas"];
            }



            //se o filtro corrente estiver nulo ele busca pelo parametro procurar por
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;

            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 à pagina caso venham nulo
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;//atribui 1 a pagina caso os parametreos nao sejam nulos

            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            //viewbag
            ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM;

            VerificaTempDataSN();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            ViewBag.Opcao = opcao;

            //Aliquotas ICMS compra industria

            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE > a.Aliq_Icms_NFE_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE < a.Aliq_Icms_NFE_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE == a.Aliq_Icms_NFE_INTERNO && a.ALIQ_ICMS_NFE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE != null && a.Aliq_Icms_NFE_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE > a.Aliq_Icms_NFE_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE < a.Aliq_Icms_NFE_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE == a.Aliq_Icms_NFE_INTERNO && a.ALIQ_ICMS_NFE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE != null && a.Aliq_Icms_NFE_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE > a.Aliq_Icms_NFE_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE < a.Aliq_Icms_NFE_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE == a.Aliq_Icms_NFE_INTERNO && a.ALIQ_ICMS_NFE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE != null && a.Aliq_Icms_NFE_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE > a.Aliq_Icms_NFE_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE < a.Aliq_Icms_NFE_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE == a.Aliq_Icms_NFE_INTERNO && a.ALIQ_ICMS_NFE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE != null && a.Aliq_Icms_NFE_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE > a.Aliq_Icms_NFE_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE < a.Aliq_Icms_NFE_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE == a.Aliq_Icms_NFE_INTERNO && a.ALIQ_ICMS_NFE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE != null && a.Aliq_Icms_NFE_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
            }//fim switche opcao

            //Action para procurar
            this.analiseSn = ProcuraPorSn(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analiseSn);


            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analiseSn = this.analiseSn.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analiseSn = this.analiseSn.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNSalvos = (qtdNSalvos != null) ? qtdNSalvos : "";

            int numeroPagina = (page ?? 1);
            return View(this.analiseSn.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada


        }



        [HttpGet]
        public ActionResult EditClienteAliqIcmsNFECompIndMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();

            //registros salvos
            int regSalv = 0;
            int regNsalv = 0;
            string analiseRetorno = "0";
            string analiseTrib = "0";
            try
            {
                if (this.empresa.simples_nacional.Equals(1)) 
                {
                    //laço de repetição para percorrer o array com os registros
                    for (int i = 0; i < idTrib.Length; i++)
                    {
                        //converter em inteiro
                        int idTrb = int.Parse(idTrib[i]);

                        //faz a busca no objeto criado instanciando um so objeto
                        trib = db.TributacaoEmpresas.Find(idTrb);

                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        AnaliseTributariaSn analiseSn = (from a in db.Analise_TributariaSn where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();
                        //pegar valores

                        analiseRetorno = (analiseSn.Aliq_Icms_NFE_INTERNO == null) ? analiseRetorno : analiseSn.Aliq_Icms_NFE_INTERNO.ToString();

                        analiseTrib = (analiseSn.ALIQ_ICMS_NFE == null) ? analiseTrib : (trib.ALIQ_ICMS_NFE);


                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.ALIQ_ICMS_NFE = null;
                            }
                            else
                            {
                                trib.ALIQ_ICMS_NFE = analiseSn.Aliq_Icms_NFE_INTERNO.ToString().Replace(",", ".");

                            }
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos
                        }


                    }

                }
                else 
                {
                    //laço de repetição para percorrer o array com os registros
                    for (int i = 0; i < idTrib.Length; i++)
                    {
                        //converter em inteiro
                        int idTrb = int.Parse(idTrib[i]);

                        //faz a busca no objeto criado instanciando um so objeto
                        trib = db.TributacaoEmpresas.Find(idTrb);

                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();
                        //pegar valores

                        analiseRetorno = (analise.Aliq_Icms_NFE_INTERNO == null) ? analiseRetorno : analise.Aliq_Icms_NFE_INTERNO.ToString();

                        analiseTrib = (analise.ALIQ_ICMS_NFE == null) ? analiseTrib : (trib.ALIQ_ICMS_NFE);


                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.ALIQ_ICMS_NFE = null;
                            }
                            else
                            {
                                trib.ALIQ_ICMS_NFE = analise.Aliq_Icms_NFE_INTERNO.ToString().Replace(",", ".");

                            }
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos
                        }


                    }

                }
              
              
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();

            }
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EditClienteAliqIcmsNFECompIndMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EditClienteAliqIcmsNFECompIndMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }


        }
        
        [HttpGet]
        public ActionResult EditClienteAliqIcmsNFECompIndMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;
            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();
            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                //faz a busca no objeto criado instanciando um so objeto e adicionando à lista
                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }

            return View(trib);
        }
        
        [HttpGet]
        public ActionResult EditClienteAliqIcmsNFECompIndMassaManualModalPost(string strDados, string aliqIcmsNFECompInd)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //trocando o ponto por virgula
            aliqIcmsNFECompInd = aliqIcmsNFECompInd.Replace(",", ".");

            //separar a String em um array
            string[] idTrib = strDados.Split(',');
            string resultado = "";
            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();


            int regSalv = 0;
            int regNsalv = 0;
            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.ALIQ_ICMS_NFE = (aliqIcmsNFECompInd != "") ? trib.ALIQ_ICMS_NFE = aliqIcmsNFECompInd : null;
                    trib.DT_ALTERACAO = DateTime.Now;
                    try
                    {
                        db.SaveChanges();
                        regSalv++;
                    }
                    catch (Exception e)
                    {
                        resultado = "Problemas ao salvar o registro: " + e.ToString();
                        regNsalv++;
                    }


                }

               
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }

            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EditClienteAliqIcmsNFECompIndMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EditClienteAliqIcmsNFECompIndMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }




        }

        /*Analise ICMS NFE COMPRA DE SN*/
        
        [HttpGet]
        public ActionResult EditClienteAliqIcmsNFECompSNMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem para o cabeçalho do card da view
            ViewBag.Mensagem = "Alíquota ICMS NFE compra de SIMPLES NACIONAL no Cliente X  no MTX";

            //Resultado da edição
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else
            {
                this.empresa = (Empresa)Session["empresas"];
            }



            //se o filtro corrente estiver nulo ele busca pelo parametro procurar por
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;

            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 à pagina caso venham nulo
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;//atribui 1 a pagina caso os parametreos nao sejam nulos

            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            //viewbag
            ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM;

            if (this.empresa.simples_nacional.Equals(1))
            {
                return RedirectToAction("EditClienteAliqIcmsNFECompSNMassaSn", new { opcao = opcao });

            }


            VerificaTempData();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            ViewBag.Opcao = opcao;

            //Aliquotas ICMS compra industria

            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_SN > a.Aliq_Icms_NFE_For_SN_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_SN < a.Aliq_Icms_NFE_For_SN_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_SN == a.Aliq_Icms_NFE_For_SN_INTERNO && a.ALIQ_ICMS_NFE_FOR_SN != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_SN == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_SN != null && a.Aliq_Icms_NFE_For_SN_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_SN > a.Aliq_Icms_NFE_For_SN_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_SN < a.Aliq_Icms_NFE_For_SN_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_SN == a.Aliq_Icms_NFE_For_SN_INTERNO && a.ALIQ_ICMS_NFE_FOR_SN != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_SN == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_SN != null && a.Aliq_Icms_NFE_For_SN_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_SN > a.Aliq_Icms_NFE_For_SN_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_SN < a.Aliq_Icms_NFE_For_SN_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_SN == a.Aliq_Icms_NFE_For_SN_INTERNO && a.ALIQ_ICMS_NFE_FOR_SN != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_SN == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_SN != null && a.Aliq_Icms_NFE_For_SN_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_SN > a.Aliq_Icms_NFE_For_SN_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_SN < a.Aliq_Icms_NFE_For_SN_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_SN == a.Aliq_Icms_NFE_For_SN_INTERNO && a.ALIQ_ICMS_NFE_FOR_SN != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_SN == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_SN != null && a.Aliq_Icms_NFE_For_SN_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_SN > a.Aliq_Icms_NFE_For_SN_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_SN < a.Aliq_Icms_NFE_For_SN_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_SN == a.Aliq_Icms_NFE_For_SN_INTERNO && a.ALIQ_ICMS_NFE_FOR_SN != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_SN == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_SN != null && a.Aliq_Icms_NFE_For_SN_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
            }//fim switche opcao

            //Action de procura
            analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);


            switch (ordenacao)
            {
                case "Produto_desc":
                    analise = analise.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    analise = analise.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNSalvos = (qtdNSalvos != null) ? qtdNSalvos : "";

            int numeroPagina = (page ?? 1);
            return View(analise.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada


        }




        /*Analise ICMS NFE COMPRA DE SN*/

        [HttpGet]
        public ActionResult EditClienteAliqIcmsNFECompSNMassaSn(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem para o cabeçalho do card da view
            ViewBag.Mensagem = "Alíquota ICMS NFE compra de SIMPLES NACIONAL no Cliente X  no MTX";

            //Resultado da edição
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else
            {
                this.empresa = (Empresa)Session["empresas"];
            }



            //se o filtro corrente estiver nulo ele busca pelo parametro procurar por
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;

            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 à pagina caso venham nulo
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;//atribui 1 a pagina caso os parametreos nao sejam nulos

            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            //viewbag
            ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM;

            VerificaTempDataSN();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            ViewBag.Opcao = opcao;

            //Aliquotas ICMS compra industria

            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_SN > a.Aliq_Icms_NFE_For_SN_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_SN < a.Aliq_Icms_NFE_For_SN_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_SN == a.Aliq_Icms_NFE_For_SN_INTERNO && a.ALIQ_ICMS_NFE_FOR_SN != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_SN == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_SN != null && a.Aliq_Icms_NFE_For_SN_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_SN > a.Aliq_Icms_NFE_For_SN_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_SN < a.Aliq_Icms_NFE_For_SN_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_SN == a.Aliq_Icms_NFE_For_SN_INTERNO && a.ALIQ_ICMS_NFE_FOR_SN != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_SN == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_SN != null && a.Aliq_Icms_NFE_For_SN_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_SN > a.Aliq_Icms_NFE_For_SN_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_SN < a.Aliq_Icms_NFE_For_SN_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_SN == a.Aliq_Icms_NFE_For_SN_INTERNO && a.ALIQ_ICMS_NFE_FOR_SN != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_SN == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_SN != null && a.Aliq_Icms_NFE_For_SN_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_SN > a.Aliq_Icms_NFE_For_SN_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_SN < a.Aliq_Icms_NFE_For_SN_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_SN == a.Aliq_Icms_NFE_For_SN_INTERNO && a.ALIQ_ICMS_NFE_FOR_SN != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_SN == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_SN != null && a.Aliq_Icms_NFE_For_SN_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_SN > a.Aliq_Icms_NFE_For_SN_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_SN < a.Aliq_Icms_NFE_For_SN_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_SN == a.Aliq_Icms_NFE_For_SN_INTERNO && a.ALIQ_ICMS_NFE_FOR_SN != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_SN == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_SN != null && a.Aliq_Icms_NFE_For_SN_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
            }//fim switche opcao

            //Action para procurar
            this.analiseSn = ProcuraPorSn(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analiseSn);


            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analiseSn = this.analiseSn.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analiseSn = this.analiseSn.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNSalvos = (qtdNSalvos != null) ? qtdNSalvos : "";

            int numeroPagina = (page ?? 1);
            return View(this.analiseSn.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada


        }




        [HttpGet]
        public ActionResult EditClienteAliqIcmsNFECompSNMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();

            //registros salvos
            int regSalv = 0;
            int regNsalv = 0;
            string analiseRetorno = "0";
            string analiseTrib = "0";

            try
            {
                if (this.empresa.simples_nacional.Equals(1))
                {
                    //laço de repetição para percorrer o array com os registros
                    for (int i = 0; i < idTrib.Length; i++)
                    {
                        //converter em inteiro
                        int idTrb = int.Parse(idTrib[i]);

                        //faz a busca no objeto criado instanciando um so objeto
                        trib = db.TributacaoEmpresas.Find(idTrb);

                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        AnaliseTributariaSn analiseSn = (from a in db.Analise_TributariaSn where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();
                        //pegar valores

                        analiseRetorno = (analiseSn.Aliq_Icms_NFE_For_SN_INTERNO == null) ? analiseRetorno : analiseSn.Aliq_Icms_NFE_For_SN_INTERNO.ToString();


                        analiseTrib = (analiseSn.ALIQ_ICMS_NFE_FOR_SN == null) ? analiseTrib : (trib.ALIQ_ICMS_NFE_FOR_SN);
                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.ALIQ_ICMS_NFE_FOR_SN = null;
                            }
                            else
                            {
                                trib.ALIQ_ICMS_NFE_FOR_SN = analiseSn.Aliq_Icms_NFE_For_SN_INTERNO.ToString().Replace(",", ".");

                            }
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos
                        }


                    }
                }
                else
                {
                    //laço de repetição para percorrer o array com os registros
                    for (int i = 0; i < idTrib.Length; i++)
                    {
                        //converter em inteiro
                        int idTrb = int.Parse(idTrib[i]);

                        //faz a busca no objeto criado instanciando um so objeto
                        trib = db.TributacaoEmpresas.Find(idTrb);

                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();
                        //pegar valores

                        analiseRetorno = (analise.Aliq_Icms_NFE_For_SN_INTERNO == null) ? analiseRetorno : analise.Aliq_Icms_NFE_For_SN_INTERNO.ToString();


                        analiseTrib = (analise.ALIQ_ICMS_NFE_FOR_SN == null) ? analiseTrib : (trib.ALIQ_ICMS_NFE_FOR_SN);
                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.ALIQ_ICMS_NFE_FOR_SN = null;
                            }
                            else
                            {
                                trib.ALIQ_ICMS_NFE_FOR_SN = analise.Aliq_Icms_NFE_For_SN_INTERNO.ToString().Replace(",", ".");

                            }
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos
                        }


                    }
                }

                    
               
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();

            }

            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EditClienteAliqIcmsNFECompSNMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EditClienteAliqIcmsNFECompSNMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }


            
        }

        [HttpGet]
        public ActionResult EditClienteAliqIcmsNFECompSNMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;
            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();
            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                //faz a busca no objeto criado instanciando um so objeto e adicionando à lista
                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }

            return View(trib);
        }

        [HttpGet]
        public ActionResult EditClienteAliqIcmsNFECompSNMassaManualModalPost(string strDados, string aliqIcmsNFECompSN)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }

            this.empresa = (Empresa)Session["empresas"];
            //trocando o ponto por virgula
            aliqIcmsNFECompSN = aliqIcmsNFECompSN.Replace(",", ".");

            //separar a String em um array
            string[] idTrib = strDados.Split(',');
            string resultado = "";
            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();


            int regSalv = 0;
            int regNsalv = 0;
            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.ALIQ_ICMS_NFE_FOR_SN = (aliqIcmsNFECompSN != "") ? trib.ALIQ_ICMS_NFE_FOR_SN = aliqIcmsNFECompSN : null;
                    trib.DT_ALTERACAO = DateTime.Now;
                    try
                    {
                        db.SaveChanges();
                        regSalv++;
                    }
                    catch (Exception e)
                    {
                        resultado = "Problemas ao salvar o registro: " + e.ToString();
                        regNsalv++;
                    }


                }

                TempData["analise"] = null;
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }

            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EditClienteAliqIcmsNFECompSNMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EditClienteAliqIcmsNFECompSNMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }
            
        }




        /*Analise ICMS NFE COMPRA DE ATACADO*/

        [HttpGet]
        public ActionResult EditClienteAliqIcmsNFECompAtaMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem para o cabeçalho do card da view
            ViewBag.Mensagem = "Alíquota ICMS NFE compra de ATACADO no Cliente X  no MTX";

            //Resultado da edição
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else
            {
                this.empresa = (Empresa)Session["empresas"];
            }



            //se o filtro corrente estiver nulo ele busca pelo parametro procurar por
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;

            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 à pagina caso venham nulo
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;//atribui 1 a pagina caso os parametreos nao sejam nulos

            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            //viewbag
            ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM;


            if (this.empresa.simples_nacional.Equals(1))
            {
                return RedirectToAction("EditClienteAliqIcmsNFECompAtaMassaSn", new { opcao = opcao });

            }



            VerificaTempData();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;


            ViewBag.Opcao = opcao;

            //Aliquotas ICMS compra industria

            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA > a.Aliq_Icms_NFE_For_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA < a.Aliq_Icms_NFE_For_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA == a.Aliq_Icms_NFE_For_Ata_INTERNO && a.ALIQ_ICMS_NFE_FOR_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA != null && a.Aliq_Icms_NFE_For_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA > a.Aliq_Icms_NFE_For_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA < a.Aliq_Icms_NFE_For_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA == a.Aliq_Icms_NFE_For_Ata_INTERNO && a.ALIQ_ICMS_NFE_FOR_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA != null && a.Aliq_Icms_NFE_For_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA > a.Aliq_Icms_NFE_For_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA < a.Aliq_Icms_NFE_For_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA == a.Aliq_Icms_NFE_For_Ata_INTERNO && a.ALIQ_ICMS_NFE_FOR_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA != null && a.Aliq_Icms_NFE_For_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA > a.Aliq_Icms_NFE_For_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA < a.Aliq_Icms_NFE_For_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA == a.Aliq_Icms_NFE_For_Ata_INTERNO && a.ALIQ_ICMS_NFE_FOR_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA != null && a.Aliq_Icms_NFE_For_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA > a.Aliq_Icms_NFE_For_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA < a.Aliq_Icms_NFE_For_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA == a.Aliq_Icms_NFE_For_Ata_INTERNO && a.ALIQ_ICMS_NFE_FOR_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA != null && a.Aliq_Icms_NFE_For_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
            }//fim switche opcao

            //Action de procura
            analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);


            switch (ordenacao)
            {
                case "Produto_desc":
                    analise = analise.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    analise = analise.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNSalvos = (qtdNSalvos != null) ? qtdNSalvos : "";

            int numeroPagina = (page ?? 1);
            return View(analise.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada


        }




        /*Analise ICMS NFE COMPRA DE ATACADO*/

        [HttpGet]
        public ActionResult EditClienteAliqIcmsNFECompAtaMassaSn(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem para o cabeçalho do card da view
            ViewBag.Mensagem = "Alíquota ICMS NFE compra de ATACADO no Cliente X  no MTX";

            //Resultado da edição
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else
            {
                this.empresa = (Empresa)Session["empresas"];
            }



            //se o filtro corrente estiver nulo ele busca pelo parametro procurar por
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;

            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 à pagina caso venham nulo
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;//atribui 1 a pagina caso os parametreos nao sejam nulos

            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            //viewbag
            ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM;

            VerificaTempDataSN();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;


            ViewBag.Opcao = opcao;

            //Aliquotas ICMS compra industria

            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA > a.Aliq_Icms_NFE_For_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA < a.Aliq_Icms_NFE_For_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA == a.Aliq_Icms_NFE_For_Ata_INTERNO && a.ALIQ_ICMS_NFE_FOR_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA != null && a.Aliq_Icms_NFE_For_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA > a.Aliq_Icms_NFE_For_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA < a.Aliq_Icms_NFE_For_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA == a.Aliq_Icms_NFE_For_Ata_INTERNO && a.ALIQ_ICMS_NFE_FOR_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA != null && a.Aliq_Icms_NFE_For_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA > a.Aliq_Icms_NFE_For_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA < a.Aliq_Icms_NFE_For_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA == a.Aliq_Icms_NFE_For_Ata_INTERNO && a.ALIQ_ICMS_NFE_FOR_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA != null && a.Aliq_Icms_NFE_For_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA > a.Aliq_Icms_NFE_For_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA < a.Aliq_Icms_NFE_For_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA == a.Aliq_Icms_NFE_For_Ata_INTERNO && a.ALIQ_ICMS_NFE_FOR_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA != null && a.Aliq_Icms_NFE_For_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";
                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA > a.Aliq_Icms_NFE_For_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA < a.Aliq_Icms_NFE_For_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA == a.Aliq_Icms_NFE_For_Ata_INTERNO && a.ALIQ_ICMS_NFE_FOR_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList(); ;
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.ALIQ_ICMS_NFE_FOR_ATA != null && a.Aliq_Icms_NFE_For_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
            }//fim switche opcao

            //Action para procurar
            this.analiseSn = ProcuraPorSn(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analiseSn);


            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analiseSn = this.analiseSn.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analiseSn = this.analiseSn.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNSalvos = (qtdNSalvos != null) ? qtdNSalvos : "";

            int numeroPagina = (page ?? 1);
            return View(this.analiseSn.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada


        }



        [HttpGet]
        public ActionResult EditClienteAliqIcmsNFECompAtaMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();

            //registros salvos
            int regSalv = 0;
            int regNsalv = 0;
            string analiseRetorno = "0";
            string analiseTrib = "0";

            try
            {
                if (this.empresa.simples_nacional.Equals(1))
                {
                    //laço de repetição para percorrer o array com os registros
                    for (int i = 0; i < idTrib.Length; i++)
                    {
                        //converter em inteiro
                        int idTrb = int.Parse(idTrib[i]);

                        //faz a busca no objeto criado instanciando um so objeto
                        trib = db.TributacaoEmpresas.Find(idTrb);

                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        AnaliseTributariaSn analiseSn = (from a in db.Analise_TributariaSn where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

                        //pegar valores

                        analiseRetorno = (analiseSn.Aliq_Icms_NFE_For_Ata_INTERNO == null) ? analiseRetorno : analiseSn.Aliq_Icms_NFE_For_Ata_INTERNO.ToString();


                        analiseTrib = (analiseSn.ALIQ_ICMS_NFE_FOR_ATA == null) ? analiseTrib : (trib.ALIQ_ICMS_NFE_FOR_ATA).ToString();
                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.ALIQ_ICMS_NFE_FOR_ATA = null;
                            }
                            else
                            {
                                trib.ALIQ_ICMS_NFE_FOR_ATA = analiseSn.Aliq_Icms_NFE_For_Ata_INTERNO.ToString().Replace(",", ".");

                            }
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos
                        }


                    }
                }
                else
                {
                    //laço de repetição para percorrer o array com os registros
                    for (int i = 0; i < idTrib.Length; i++)
                    {
                        //converter em inteiro
                        int idTrb = int.Parse(idTrib[i]);

                        //faz a busca no objeto criado instanciando um so objeto
                        trib = db.TributacaoEmpresas.Find(idTrb);

                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

                        //pegar valores

                        analiseRetorno = (analise.Aliq_Icms_NFE_For_Ata_INTERNO == null) ? analiseRetorno : analise.Aliq_Icms_NFE_For_Ata_INTERNO.ToString();


                        analiseTrib = (analise.ALIQ_ICMS_NFE_FOR_ATA == null) ? analiseTrib : (trib.ALIQ_ICMS_NFE_FOR_ATA);
                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.ALIQ_ICMS_NFE_FOR_ATA = null;
                            }
                            else
                            {
                                trib.ALIQ_ICMS_NFE_FOR_ATA = analise.Aliq_Icms_NFE_For_Ata_INTERNO.ToString().Replace(",", ".");

                            }
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos
                        }


                    }
                }
               
                
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();

            }

            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EditClienteAliqIcmsNFECompAtaMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EditClienteAliqIcmsNFECompAtaMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }


        }

        [HttpGet]
        public ActionResult EditClienteAliqIcmsNFECompAtaMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;
            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();
            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                //faz a busca no objeto criado instanciando um so objeto e adicionando à lista
                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }

            return View(trib);
        }

        [HttpGet]
        public ActionResult EditClienteAliqIcmsNFECompAtaMassaManualModalPost(string strDados, string aliqIcmsNFECompAta)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //trocando o ponto por virgula
            aliqIcmsNFECompAta = aliqIcmsNFECompAta.Replace(",", ".");

            //separar a String em um array
            string[] idTrib = strDados.Split(',');
            string resultado = "";
            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();


            int regSalv = 0;
            int regNsalv = 0;
            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.ALIQ_ICMS_NFE_FOR_ATA = (aliqIcmsNFECompAta != "") ? trib.ALIQ_ICMS_NFE_FOR_ATA = aliqIcmsNFECompAta : null;
                    trib.DT_ALTERACAO = DateTime.Now;
                    try
                    {
                        db.SaveChanges();
                        regSalv++;
                    }
                    catch (Exception e)
                    {
                        resultado = "Problemas ao salvar o registro: " + e.ToString();
                        regNsalv++;
                    }


                }

                TempData["analise"] = null;
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }

            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EditClienteAliqIcmsNFECompAtaMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EditClienteAliqIcmsNFECompAtaMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }
           
        }



        /*Edição Red Base de Calc ICMS Compra de Industria*/
        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsCompIndMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Redução Base de Calc. ICMS de Compra de INDÚSTRIA no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;

            if (this.empresa.simples_nacional.Equals(1))
            {
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsCompIndMassaSn", new { opcao = opcao });

            }


            VerificaTempData();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND > a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND < a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND == a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO && a.RED_BASE_CALC_ICMS_COMPRA_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND != null && a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND > a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND < a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND == a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO && a.RED_BASE_CALC_ICMS_COMPRA_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND != null && a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND > a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND < a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND == a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO && a.RED_BASE_CALC_ICMS_COMPRA_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND != null && a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND > a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND < a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND == a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO && a.RED_BASE_CALC_ICMS_COMPRA_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND != null && a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND > a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND < a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND == a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO && a.RED_BASE_CALC_ICMS_COMPRA_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND != null && a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;


            }//fim do switche

            //Action para procurar
            analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);

            switch (ordenacao)
            {
                case "Produto_desc":
                    analise = analise.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    analise = analise.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            int numeroPagina = (page ?? 1);

            return View(analise.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }




        /*Edição Red Base de Calc ICMS Compra de Industria*/
        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsCompIndMassaSn(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Redução Base de Calc. ICMS de Compra de INDÚSTRIA no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;

            VerificaTempDataSN();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND > a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND < a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND == a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO && a.RED_BASE_CALC_ICMS_COMPRA_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND != null && a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND > a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND < a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND == a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO && a.RED_BASE_CALC_ICMS_COMPRA_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND != null && a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND > a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND < a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND == a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO && a.RED_BASE_CALC_ICMS_COMPRA_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND != null && a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND > a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND < a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND == a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO && a.RED_BASE_CALC_ICMS_COMPRA_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND != null && a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND > a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND < a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND == a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO && a.RED_BASE_CALC_ICMS_COMPRA_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_IND != null && a.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;


            }//fim do switche

            //Action para procurar
            this.analiseSn = ProcuraPorSn(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analiseSn);

            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analiseSn = this.analiseSn.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analiseSn = this.analiseSn.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            int numeroPagina = (page ?? 1);

            return View(this.analiseSn.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }





        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsCompIndMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();


            //registros salvos
            int regSalv = 0;
            int regNsalv = 0;
            string analiseRetorno = "0";
            string analiseTrib = "0";
            try
            {
                if (this.empresa.simples_nacional.Equals(1))
                {
                    //laço de repetição para percorrer o array com os registros
                    for (int i = 0; i < idTrib.Length; i++)
                    {
                        //converter em inteiro
                        int idTrb = int.Parse(idTrib[i]);

                        //faz a busca no objeto criado instanciando um so objeto
                        trib = db.TributacaoEmpresas.Find(idTrb);

                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        AnaliseTributariaSn analiseSn = (from a in db.Analise_TributariaSn where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

                        //pegar valores
                        analiseRetorno = (analiseSn.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO == null) ? analiseRetorno : analiseSn.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO.ToString();

                        analiseTrib = (analiseSn.RED_BASE_CALC_ICMS_COMPRA_DE_IND == null) ? analiseTrib : (trib.RED_BASE_CALC_ICMS_COMPRA_DE_IND);


                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {

                            if (analiseRetorno == "0")
                            {
                                trib.RED_BASE_CALC_ICMS_COMPRA_DE_IND = null;
                            }
                            else
                            {
                                //atribui o valor procurado na analise ao objeto instanciado
                                trib.RED_BASE_CALC_ICMS_COMPRA_DE_IND = analiseSn.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO.ToString().Replace(",", ".");

                            }

                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos
                        }


                    }
                }
                else
                {
                    //laço de repetição para percorrer o array com os registros
                    for (int i = 0; i < idTrib.Length; i++)
                    {
                        //converter em inteiro
                        int idTrb = int.Parse(idTrib[i]);

                        //faz a busca no objeto criado instanciando um so objeto
                        trib = db.TributacaoEmpresas.Find(idTrb);

                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

                        //pegar valores
                        analiseRetorno = (analise.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO == null) ? analiseRetorno : analise.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO.ToString();

                        analiseTrib = (analise.RED_BASE_CALC_ICMS_COMPRA_DE_IND == null) ? analiseTrib : (trib.RED_BASE_CALC_ICMS_COMPRA_DE_IND);


                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {

                            if (analiseRetorno == "0")
                            {
                                trib.RED_BASE_CALC_ICMS_COMPRA_DE_IND = null;
                            }
                            else
                            {
                                //atribui o valor procurado na analise ao objeto instanciado
                                trib.RED_BASE_CALC_ICMS_COMPRA_DE_IND = analise.Red_Base_Calc_Icms_Compra_de_Ind_INTERNO.ToString().Replace(",", ".");

                            }

                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos
                        }


                    }
                }
                
                
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();

            }

            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsCompIndMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsCompIndMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }


            
        }

        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsCompIndMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();

            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }

            return View(trib);
        }

        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsCompIndMassaManualModalPost(string strDados, string redBasCalcAliqIcmsCompInd)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //trocando o ponto por virgula
            redBasCalcAliqIcmsCompInd = redBasCalcAliqIcmsCompInd.Replace(",", ".");

            //separar a String em um array
            string[] idTrib = strDados.Split(',');
            string resultado = "";
            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();
            int regSalv = 0;
            int regNsalv = 0;
            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.RED_BASE_CALC_ICMS_COMPRA_DE_IND = (redBasCalcAliqIcmsCompInd != "") ? trib.RED_BASE_CALC_ICMS_COMPRA_DE_IND = redBasCalcAliqIcmsCompInd : null;

                    db.SaveChanges();
                    regSalv++;

                }

              
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
                regNsalv++;
            }
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsCompIndMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsCompIndMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }

        }

        /*Edição Red Base de Calc ICMS ST Compra de Industria*/
        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsSTCompIndMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Redução Base de Calc. ICMS ST de Compra de INDÚSTRIA no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;


            if (this.empresa.simples_nacional.Equals(1))
            {
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsSTCompIndMassaSn", new { opcao = opcao });

            }


            VerificaTempData();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND > a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND < a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND == a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO && a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND != null && a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND > a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND < a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND == a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO && a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND != null && a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND > a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND < a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND == a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO && a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND != null && a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND > a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND < a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND == a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO && a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND != null && a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND > a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND < a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND == a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO && a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND != null && a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;


            }//fim do switche

            //Action para procurar
            analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);

            switch (ordenacao)
            {
                case "Produto_desc":
                    analise = analise.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    analise = analise.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            int numeroPagina = (page ?? 1);

            return View(analise.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }




        /*Edição Red Base de Calc ICMS ST Compra de Industria*/
        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsSTCompIndMassaSn(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Redução Base de Calc. ICMS ST de Compra de INDÚSTRIA no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;

            VerificaTempDataSN();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND > a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND < a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND == a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO && a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND != null && a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND > a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND < a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND == a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO && a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND != null && a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND > a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND < a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND == a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO && a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND != null && a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND > a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND < a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND == a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO && a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND != null && a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND > a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND < a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND == a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO && a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND != null && a.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;


            }//fim do switche

            //Action para procurar
            this.analiseSn = ProcuraPorSn(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analiseSn);

            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analiseSn = this.analiseSn.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analiseSn = this.analiseSn.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            int numeroPagina = (page ?? 1);

            return View(this.analiseSn.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }




        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsSTCompIndMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();


            //registros salvos
            int regSalv = 0;
            int regNsalv = 0;
            string analiseRetorno = "0";
            string analiseTrib = "0";
            try
            {
                if (this.empresa.simples_nacional.Equals(1))
                {
                    //laço de repetição para percorrer o array com os registros
                    for (int i = 0; i < idTrib.Length; i++)
                    {
                        //converter em inteiro
                        int idTrb = int.Parse(idTrib[i]);

                        //faz a busca no objeto criado instanciando um so objeto
                        trib = db.TributacaoEmpresas.Find(idTrb);

                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        AnaliseTributariaSn analiseSn = (from a in db.Analise_TributariaSn where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

                        //pegar valores
                        //analiseRetorno = (decimal)analise.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO; //da tabela de analise
                        analiseRetorno = (analiseSn.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO == null) ? analiseRetorno : analiseSn.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO.ToString();

                        analiseTrib = (analiseSn.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND == null) ? analiseTrib : (trib.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND);


                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            if (analiseRetorno == "0")
                            {
                                trib.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND = null;
                            }
                            else
                            {
                                //atribui o valor procurado na analise ao objeto instanciado
                                trib.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND = analiseSn.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO.ToString().Replace(",", ".");
                            }

                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos
                        }


                    }
                }
                else
                {
                    //laço de repetição para percorrer o array com os registros
                    for (int i = 0; i < idTrib.Length; i++)
                    {
                        //converter em inteiro
                        int idTrb = int.Parse(idTrib[i]);

                        //faz a busca no objeto criado instanciando um so objeto
                        trib = db.TributacaoEmpresas.Find(idTrb);

                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

                        //pegar valores
                        //analiseRetorno = (decimal)analise.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO; //da tabela de analise
                        analiseRetorno = (analise.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO == null) ? analiseRetorno : analise.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO.ToString();

                        analiseTrib = (analise.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND == null) ? analiseTrib : (trib.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND);


                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            if (analiseRetorno == "0")
                            {
                                trib.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND = null;
                            }
                            else
                            {
                                //atribui o valor procurado na analise ao objeto instanciado
                                trib.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND = analise.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO.ToString().Replace(",", ".");
                            }

                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos
                        }


                    }
                }
              
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();

            }

            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsSTCompIndMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsSTCompIndMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }


        }

        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsSTCompIndMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();

            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }

            return View(trib);
        }

        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsSTCompIndMassaManualModalPost(string strDados, string redBasCalcAliqIcmsSTCompInd)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //trocando o ponto por virgula
            redBasCalcAliqIcmsSTCompInd = redBasCalcAliqIcmsSTCompInd.Replace(",", ".");

            //separar a String em um array
            string[] idTrib = strDados.Split(',');
            string resultado = "";
            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();
            int regSalv = 0;
            int regNsalv = 0;
            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND = (redBasCalcAliqIcmsSTCompInd != "") ? trib.RED_BASE_CALC_ICMS_ST_COMPRA_DE_IND = redBasCalcAliqIcmsSTCompInd : null;

                    db.SaveChanges();
                    regSalv++;

                }

                
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsSTCompIndMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsSTCompIndMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }

        }
        /*Actions auxiliares*/


        
        /*Edição Red Base de Calc ICMS  Compra de Atacado*/
        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsCompAtaMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Redução Base de Calc. ICMS  Compra de ATACADO no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;


            if (this.empresa.simples_nacional.Equals(1))
            {
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsCompAtaMassaSn", new { opcao = opcao });

            }


            VerificaTempData();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA > a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA < a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA == a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO && a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA != null && a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA > a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA < a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA == a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO && a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA != null && a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA > a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA < a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA == a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO && a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA != null && a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA > a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA < a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA == a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO && a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA != null && a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA > a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA < a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA == a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO && a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA != null && a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;


            }//fim do switche

            //Action para procurar
            analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);

            switch (ordenacao)
            {
                case "Produto_desc":
                    analise = analise.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    analise = analise.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            int numeroPagina = (page ?? 1);

            return View(analise.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }



        /*Edição Red Base de Calc ICMS  Compra de Atacado*/
        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsCompAtaMassaSn(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Redução Base de Calc. ICMS  Compra de ATACADO no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;

            VerificaTempDataSN();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA > a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA < a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA == a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO && a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA != null && a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA > a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA < a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA == a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO && a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA != null && a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA > a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA < a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA == a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO && a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA != null && a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA > a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA < a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA == a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO && a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA != null && a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA > a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA < a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA == a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO && a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_DE_ATA != null && a.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;


            }//fim do switche

            //Action para procurar
            this.analiseSn = ProcuraPorSn(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analiseSn);

            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analiseSn = this.analiseSn.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analiseSn = this.analiseSn.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            int numeroPagina = (page ?? 1);

            return View(this.analiseSn.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }






        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsCompAtaMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();


            //registros salvos
            int regSalv = 0;
            int regNsalv = 0;
            string analiseRetorno = "0";
            string analiseTrib = "0";
            try
            {
                if (this.empresa.simples_nacional.Equals(1)) 
                {
                    //laço de repetição para percorrer o array com os registros
                    for (int i = 0; i < idTrib.Length; i++)
                    {
                        //converter em inteiro
                        int idTrb = int.Parse(idTrib[i]);

                        //faz a busca no objeto criado instanciando um so objeto
                        trib = db.TributacaoEmpresas.Find(idTrb);

                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        AnaliseTributariaSn analiseSn = (from a in db.Analise_TributariaSn where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

                        //pegar valores
                        //analiseRetorno = (decimal)analise.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO; //da tabela de analise
                        analiseRetorno = (analiseSn.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO == null) ? analiseRetorno : analiseSn.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO.ToString();

                        analiseTrib = (analiseSn.RED_BASE_CALC_ICMS_COMPRA_DE_ATA == null) ? analiseTrib : (trib.RED_BASE_CALC_ICMS_COMPRA_DE_ATA);


                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            if (analiseRetorno == "0")
                            {
                                trib.RED_BASE_CALC_ICMS_COMPRA_DE_ATA = null;
                            }
                            else
                            {
                                //atribui o valor procurado na analise ao objeto instanciado
                                trib.RED_BASE_CALC_ICMS_COMPRA_DE_ATA = analiseSn.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO.ToString().Replace(",", ".");
                            }

                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos
                        }


                    }
                }
                else
                {
                    //laço de repetição para percorrer o array com os registros
                    for (int i = 0; i < idTrib.Length; i++)
                    {
                        //converter em inteiro
                        int idTrb = int.Parse(idTrib[i]);

                        //faz a busca no objeto criado instanciando um so objeto
                        trib = db.TributacaoEmpresas.Find(idTrb);

                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

                        //pegar valores
                        //analiseRetorno = (decimal)analise.Red_Base_Calc_Icms_ST_Compra_de_Ind_INTERNO; //da tabela de analise
                        analiseRetorno = (analise.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO == null) ? analiseRetorno : analise.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO.ToString();

                        analiseTrib = (analise.RED_BASE_CALC_ICMS_COMPRA_DE_ATA == null) ? analiseTrib : (trib.RED_BASE_CALC_ICMS_COMPRA_DE_ATA).ToString();


                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            if (analiseRetorno == "0")
                            {
                                trib.RED_BASE_CALC_ICMS_COMPRA_DE_ATA = null;
                            }
                            else
                            {
                                //atribui o valor procurado na analise ao objeto instanciado
                                trib.RED_BASE_CALC_ICMS_COMPRA_DE_ATA = analise.Red_Base_Calc_Icms_Compra_de_Ata_INTERNO.ToString().Replace(",", ".");
                            }

                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos
                        }


                    }
                }
                
                
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();

            }
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsSTCompIndMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsSTCompIndMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }

        }

        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsCompAtaMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();

            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }

            return View(trib);
        }

        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsCompAtaMassaManualModalPost(string strDados, string redBasCalcAliqIcmsCompAta)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //trocando o ponto por virgula
            redBasCalcAliqIcmsCompAta = redBasCalcAliqIcmsCompAta.Replace(",", ".");

            //separar a String em um array
            string[] idTrib = strDados.Split(',');
            string resultado = "";
            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();
            int regSalv = 0;
            int regNsalv = 0;
            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.RED_BASE_CALC_ICMS_COMPRA_DE_ATA = (redBasCalcAliqIcmsCompAta != "") ? trib.RED_BASE_CALC_ICMS_COMPRA_DE_ATA = redBasCalcAliqIcmsCompAta : null;

                    trib.DT_ALTERACAO = DateTime.Now;
                    try
                    {
                        db.SaveChanges();
                        regSalv++;
                    }
                    catch (Exception e)
                    {
                        resultado = "Problemas ao salvar o registro: " + e.ToString();
                        regNsalv++;
                    }

                }

              
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }

            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsCompAtaMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsCompAtaMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }

        }


        /*Edição Red Base de Cals ICMS ST compra de Atacado EdtCliAliqRedBasCalcIcmsSTCompAtaMassa*/
        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsSTCompAtaMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Redução Base de Calc. ICMS ST  Compra de ATACADO no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;


            if (this.empresa.simples_nacional.Equals(1))
            {
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsSTCompAtaMassaSn", new { opcao = opcao });

            }


            VerificaTempData();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA > a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA < a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA == a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO && a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA != null && a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA > a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA < a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA == a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO && a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA != null && a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;



                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA > a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA < a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA == a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO && a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA != null && a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA > a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA < a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA == a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO && a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA != null && a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA > a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA < a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA == a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO && a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA != null && a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;


            }//fim do switche

            //Action para procurar
            analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);

            switch (ordenacao)
            {
                case "Produto_desc":
                    analise = analise.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    analise = analise.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            int numeroPagina = (page ?? 1);

            return View(analise.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }




        /*Edição Red Base de Cals ICMS ST compra de Atacado EdtCliAliqRedBasCalcIcmsSTCompAtaMassa*/
        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsSTCompAtaMassaSn(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Redução Base de Calc. ICMS ST  Compra de ATACADO no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;

            VerificaTempDataSN();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA > a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA < a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA == a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO && a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA != null && a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA > a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA < a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA == a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO && a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA != null && a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA > a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA < a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA == a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO && a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA != null && a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA > a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA < a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA == a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO && a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA != null && a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA > a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA < a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA == a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO && a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA != null && a.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;


            }//fim do switche

            //Action para procurar
            this.analiseSn = ProcuraPorSn(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analiseSn);

            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analiseSn = this.analiseSn.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analiseSn = this.analiseSn.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            int numeroPagina = (page ?? 1);

            return View(this.analiseSn.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }



        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsSTCompAtaMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();


            //Variaveis auxiliares
            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            string analiseRetorno = "0";
            string analiseTrib = "0";
            try
            {
                if (this.empresa.simples_nacional.Equals(1))
                {
                    //laço de repetição para percorrer o array com os registros
                    for (int i = 0; i < idTrib.Length; i++)
                    {
                        //converter em inteiro
                        int idTrb = int.Parse(idTrib[i]);

                        //faz a busca no objeto criado instanciando um so objeto
                        trib = db.TributacaoEmpresas.Find(idTrb);

                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        AnaliseTributariaSn analiseSn = (from a in db.Analise_TributariaSn where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

                        //pegar valores
                        /*Caso esteja nulo o retorno do valor a variavel continuar com 0 evitando erro de valores nulos*/
                        analiseRetorno = (analiseSn.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO == null) ? analiseRetorno : analiseSn.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO.ToString();

                        analiseTrib = (analiseSn.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA == null) ? analiseTrib : (trib.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA);


                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++; //se são iguais não salva
                        }
                        else
                        { //se são diferentes
                            if (analiseRetorno == "0")
                            {  //se o valor continnuar 0 atribui-se ao valor na base de dados nulo
                                trib.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA = null;
                            }
                            else
                            {
                                //caso contrario atribui o valor procurado na analise ao objeto instanciado
                                trib.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA = analiseSn.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO.ToString().Replace(",", ".");
                            }

                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos
                        }


                    }
                }
                else
                {
                    //laço de repetição para percorrer o array com os registros
                    for (int i = 0; i < idTrib.Length; i++)
                    {
                        //converter em inteiro
                        int idTrb = int.Parse(idTrib[i]);

                        //faz a busca no objeto criado instanciando um so objeto
                        trib = db.TributacaoEmpresas.Find(idTrb);

                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

                        //pegar valores
                        /*Caso esteja nulo o retorno do valor a variavel continuar com 0 evitando erro de valores nulos*/
                        analiseRetorno = (analise.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO == null) ? analiseRetorno : analise.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO.ToString();

                        analiseTrib = (analise.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA == null) ? analiseTrib : (trib.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA);


                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++; //se são iguais não salva
                        }
                        else
                        { //se são diferentes
                            if (analiseRetorno == "0")
                            {  //se o valor continnuar 0 atribui-se ao valor na base de dados nulo
                                trib.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA = null;
                            }
                            else
                            {
                                //caso contrario atribui o valor procurado na analise ao objeto instanciado
                                trib.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA = analise.Red_Base_Calc_Icms_ST_Compra_de_Ata_INTERNO.ToString().Replace(",", ".");
                            }

                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos
                        }


                    }
                }
                

                
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();

            }

            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsSTCompAtaMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsSTCompAtaMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }

          
        }

        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsSTCompAtaMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();

            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }

            return View(trib);
        }

        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsSTCompAtaMassaManualModalPost(string strDados, string redBasCalcAliqIcmsSTCompAta)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //trocando o ponto por virgula
            redBasCalcAliqIcmsSTCompAta = redBasCalcAliqIcmsSTCompAta.Replace(",", ".");

            //separar a String em um array
            string[] idTrib = strDados.Split(',');
            string resultado = "";
            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();
            int regSalv = 0;
            int regNsalv = 0;
            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA = (redBasCalcAliqIcmsSTCompAta != "") ? trib.RED_BASE_CALC_ICMS_ST_COMPRA_DE_ATA = redBasCalcAliqIcmsSTCompAta : null;

                    try
                    {
                        db.SaveChanges();
                        regSalv++;
                    }
                    catch (Exception e)
                    {
                        resultado = "Problemas ao salvar o registro: " + e.ToString();
                        regNsalv++;
                    }

                }

               
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }

            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsSTCompAtaMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsSTCompAtaMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }
            

        }


        
        /*Edição Red Base de Cals ICMS  compra de Simples Nacional*/
        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsCompSNMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Redução Base de Calc. ICMS Compra de SIMPLES NACIONAL no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;

            if (this.empresa.simples_nacional.Equals(1))
            {
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsSTVenAtaContMassaSn", new { opcao = opcao });

            }


            VerificaTempData();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL > a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL < a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL == a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO && a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL != null && a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL > a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL < a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL == a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO && a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL != null && a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL > a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL < a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL == a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO && a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL != null && a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL > a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL < a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL == a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO && a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL != null && a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL > a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL < a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL == a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO && a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL != null && a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;


            }//fim do switche

            //Action para procurar
            analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);

            switch (ordenacao)
            {
                case "Produto_desc":
                    analise = analise.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    analise = analise.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            int numeroPagina = (page ?? 1);

            return View(analise.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }

        /*Edição Red Base de Cals ICMS  compra de Simples Nacional*/
        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsCompSNMassaSn(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Redução Base de Calc. ICMS Compra de SIMPLES NACIONAL no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;

            VerificaTempDataSN();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL > a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL < a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL == a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO && a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL != null && a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL > a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL < a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL == a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO && a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL != null && a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL > a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL < a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL == a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO && a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL != null && a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL > a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL < a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL == a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO && a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL != null && a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL > a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL < a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL == a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO && a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL != null && a.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;


            }//fim do switche

            //Action para procurar
            this.analiseSn = ProcuraPorSn(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analiseSn);

            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analiseSn = this.analiseSn.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analiseSn = this.analiseSn.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            int numeroPagina = (page ?? 1);

            return View(this.analiseSn.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }



        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsCompSNMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();


            //Variaveis auxiliares
            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            string analiseRetorno = "0";
            string analiseTrib = "0";
            try
            {
                if (this.empresa.simples_nacional.Equals(1))
                {
                    //laço de repetição para percorrer o array com os registros
                    for (int i = 0; i < idTrib.Length; i++)
                    {
                        //converter em inteiro
                        int idTrb = int.Parse(idTrib[i]);

                        //faz a busca no objeto criado instanciando um so objeto
                        trib = db.TributacaoEmpresas.Find(idTrb);

                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        AnaliseTributariaSn analiseSn = (from a in db.Analise_TributariaSn where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

                        //pegar valores
                        /*Caso esteja nulo o retorno do valor a variavel continuar com 0 evitando erro de valores nulos*/
                        analiseRetorno = (analiseSn.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO == null) ? analiseRetorno : analiseSn.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO.ToString();

                        analiseTrib = (analiseSn.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL == null) ? analiseTrib : (trib.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL);


                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++; //se são iguais não salva
                        }
                        else
                        { //se são diferentes
                            if (analiseRetorno == "0")
                            {  //se o valor continnuar 0 atribui-se ao valor na base de dados nulo
                                trib.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL = null;
                            }
                            else
                            {
                                //caso contrario atribui o valor procurado na analise ao objeto instanciado
                                trib.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL = analiseSn.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO.ToString().Replace(",", ".");
                            }

                            try
                            {
                                db.SaveChanges();
                                regSalv++;
                            }
                            catch (Exception e)
                            {
                                resultado = "Problemas ao salvar o registro: " + e.ToString();
                                regNsalv++;
                            }
                        }


                    }

                }
                else
                {
                    //laço de repetição para percorrer o array com os registros
                    for (int i = 0; i < idTrib.Length; i++)
                    {
                        //converter em inteiro
                        int idTrb = int.Parse(idTrib[i]);

                        //faz a busca no objeto criado instanciando um so objeto
                        trib = db.TributacaoEmpresas.Find(idTrb);

                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

                        //pegar valores
                        /*Caso esteja nulo o retorno do valor a variavel continuar com 0 evitando erro de valores nulos*/
                        analiseRetorno = (analise.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO == null) ? analiseRetorno : analise.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO.ToString();

                        analiseTrib = (analise.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL == null) ? analiseTrib : (trib.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL);


                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++; //se são iguais não salva
                        }
                        else
                        { //se são diferentes
                            if (analiseRetorno == "0")
                            {  //se o valor continnuar 0 atribui-se ao valor na base de dados nulo
                                trib.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL = null;
                            }
                            else
                            {
                                //caso contrario atribui o valor procurado na analise ao objeto instanciado
                                trib.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL = analise.Red_Base_Calc_Icms_Compra_de_Simp_Nacional_INTERNO.ToString().Replace(",", ".");
                            }

                            try
                            {
                                db.SaveChanges();
                                regSalv++;
                            }
                            catch (Exception e)
                            {
                                resultado = "Problemas ao salvar o registro: " + e.ToString();
                                regNsalv++;
                            }
                        }


                    }
                }

                
              
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();

            }

            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsCompSNMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsCompSNMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }

        }

        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsCompSNMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();

            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }

            return View(trib);
        }

        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsCompSNMassaManualModalPost(string strDados, string redBasCalcAliqIcmsCompSN)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //trocando o ponto por virgula
            redBasCalcAliqIcmsCompSN = redBasCalcAliqIcmsCompSN.Replace(",", ".");

            //separar a String em um array
            string[] idTrib = strDados.Split(',');
            string resultado = "";
            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();
            int regSalv = 0;
            int regNsalv = 0;
            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL = (redBasCalcAliqIcmsCompSN != "") ? trib.RED_BASE_CALC_ICMS_COMPRA_SIMP_NACIONAL = redBasCalcAliqIcmsCompSN : null;

                    try
                    {
                        db.SaveChanges();
                        regSalv++;
                    }
                    catch (Exception e)
                    {
                        resultado = "Problemas ao salvar o registro: " + e.ToString();
                        regNsalv++;
                    }

                }

                
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }

            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsCompSNMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsCompSNMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }
            
        }

       
        /*Edição Red Base de Cals ICMS ST  compra de Simples Nacional*/
        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsSTCompSNMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Redução Base de Calc. ICMS ST Compra de SIMPLES NACIONAL no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;

            if (this.empresa.simples_nacional.Equals(1))
            {
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsSTCompSNMassaSn", new { opcao = opcao });

            }
            VerificaTempData();
            
            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL > a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL < a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL > a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL < a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;



                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL > a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL < a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL > a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL < a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;



                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL > a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL < a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;


            }//fim do switche

            //Action para procurar
            analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);

            switch (ordenacao)
            {
                case "Produto_desc":
                    analise = analise.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    analise = analise.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            int numeroPagina = (page ?? 1);

            return View(analise.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }


        /*Edição Red Base de Cals ICMS ST  compra de Simples Nacional*/
        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsSTCompSNMassaSn(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Redução Base de Calc. ICMS ST Compra de SIMPLES NACIONAL no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;

            VerificaTempDataSN();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL > a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL < a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL > a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL < a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;



                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL > a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL < a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL > a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL < a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL > a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL < a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO && a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analiseSn = this.analiseSn.Where(a => a.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL != null && a.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;


            }//fim do switche

            //Action para procurar
            this.analiseSn = ProcuraPorSn(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analiseSn);

            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analiseSn = this.analiseSn.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analiseSn = this.analiseSn.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            int numeroPagina = (page ?? 1);

            return View(this.analiseSn.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }



        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsSTCompSNMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }

            this.empresa = (Empresa)Session["empresas"];
            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();


            //Variaveis auxiliares
            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            string analiseRetorno = "0";
            string analiseTrib = "0";
            try
            {
                if (this.empresa.simples_nacional.Equals(1))
                {
                    //laço de repetição para percorrer o array com os registros
                    for (int i = 0; i < idTrib.Length; i++)
                    {
                        //converter em inteiro
                        int idTrb = int.Parse(idTrib[i]);

                        //faz a busca no objeto criado instanciando um so objeto
                        trib = db.TributacaoEmpresas.Find(idTrb);

                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        AnaliseTributariaSn analiseSn = (from a in db.Analise_TributariaSn where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

                        //pegar valores
                        /*Caso esteja nulo o retorno do valor a variavel continuar com 0 evitando erro de valores nulos*/
                        analiseRetorno = (analiseSn.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO == null) ? analiseRetorno : analiseSn.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO.ToString();

                        analiseTrib = (analiseSn.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == null) ? analiseTrib : (trib.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL).ToString();


                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++; //se são iguais não salva
                        }
                        else
                        { //se são diferentes
                            if (analiseRetorno == "0")
                            {  //se o valor continnuar 0 atribui-se ao valor na base de dados nulo
                                trib.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL = null;
                            }
                            else
                            {
                                //caso contrario atribui o valor procurado na analise ao objeto instanciado
                                trib.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL = analiseSn.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO.ToString().Replace(",", ".");
                            }

                            try
                            {
                                db.SaveChanges();
                                regSalv++;
                            }
                            catch (Exception e)
                            {
                                resultado = "Problemas ao salvar o registro: " + e.ToString();
                                regNsalv++;
                            }
                        }


                    }
                }
                else
                {
                    //laço de repetição para percorrer o array com os registros
                    for (int i = 0; i < idTrib.Length; i++)
                    {
                        //converter em inteiro
                        int idTrb = int.Parse(idTrib[i]);

                        //faz a busca no objeto criado instanciando um so objeto
                        trib = db.TributacaoEmpresas.Find(idTrb);

                        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                        AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

                        //pegar valores
                        /*Caso esteja nulo o retorno do valor a variavel continuar com 0 evitando erro de valores nulos*/
                        analiseRetorno = (analise.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO == null) ? analiseRetorno : analise.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO.ToString();

                        analiseTrib = (analise.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL == null) ? analiseTrib : (trib.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL).ToString();


                        //analisar se já são iguais
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++; //se são iguais não salva
                        }
                        else
                        { //se são diferentes
                            if (analiseRetorno == "0")
                            {  //se o valor continnuar 0 atribui-se ao valor na base de dados nulo
                                trib.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL = null;
                            }
                            else
                            {
                                //caso contrario atribui o valor procurado na analise ao objeto instanciado
                                trib.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL = analise.Red_Base_Calc_Icms_ST_Compra_de_Simp_Nacional_INTERNO.ToString().Replace(",", ".");
                            }

                            try
                            {
                                db.SaveChanges();
                                regSalv++;
                            }
                            catch (Exception e)
                            {
                                resultado = "Problemas ao salvar o registro: " + e.ToString();
                                regNsalv++;
                            }
                        }


                    }
                }

                   
              
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();

            }
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsSTCompSNMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsSTCompSNMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }

        }

        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsSTCompSNMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }

          
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();

            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }

            return View(trib);
        }

        [HttpGet]
        public ActionResult EdtCliAliqRedBasCalcIcmsSTCompSNMassaManualModalPost(string strDados, string redBasCalcAliqIcmsSTCompSN)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            this.empresa = (Empresa)Session["empresas"];
            //trocando o ponto por virgula
            redBasCalcAliqIcmsSTCompSN = redBasCalcAliqIcmsSTCompSN.Replace(",", ".");

            //separar a String em um array
            string[] idTrib = strDados.Split(',');
            string resultado = "";
            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();
            int regSalv = 0;
            int regNsalv = 0;
            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL = (redBasCalcAliqIcmsSTCompSN != "") ? trib.RED_BASE_CALC_ICMS_ST_COMPRA_DE_SIMP_NACIONAL = redBasCalcAliqIcmsSTCompSN : null;

                    try
                    {
                        db.SaveChanges();
                        regSalv++;
                    }
                    catch (Exception e)
                    {
                        resultado = "Problemas ao salvar o registro: " + e.ToString();
                        regNsalv++;
                    }

                }

               
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }

            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["analiseSN"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsSTCompSNMassaSn", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });


            }
            else
            {
                TempData["analise"] = null;
                return RedirectToAction("EdtCliAliqRedBasCalcIcmsSTCompSNMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });

            }
           
        }



        /*Edição Aliquota de Pis de entrada*/
        [HttpGet]
        public ActionResult EdtCliAliqEntradaPisMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Alíquota de Entrada para PIS no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            //ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;
            if (numeroLinhas != null)
            {

                if (TempData["linhas"] != null)
                {
                    if (!numeroLinhas.Equals(int.Parse(TempData["linhas"].ToString())))
                    {
                        TempData["linhas"] = numeroLinhas;
                        TempData.Keep("linhas");
                        ViewBag.NumeroLinhas = numeroLinhas;
                    }
                    else
                    {
                        ViewBag.NumeroLinhas = numeroLinhas;
                    }

                }
                else
                {
                    TempData["linhas"] = numeroLinhas;
                    TempData.Keep("linhas");
                    ViewBag.NumeroLinhas = numeroLinhas;

                }


            }
            else
            {
                if (TempData["linhas"] == null)
                {
                    TempData["linhas"] = 10;
                    TempData.Keep("linhas");
                    ViewBag.NumeroLinhas = 10;
                }
                else
                {
                    ViewBag.NumeroLinhas = TempData["linhas"];
                }
            }


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            //TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            //opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            ////persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            //TempData.Keep("opcao");
            if (filtroNulo != null)
            {
                switch (filtroNulo)
                {
                    case "1":
                        TempData["opcao"] = "Maiores";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "2":
                        TempData["opcao"] = "Menores";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "3":
                        TempData["opcao"] = "Iguais";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "4":
                        TempData["opcao"] = "Nulas Cliente";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "5":
                        TempData["opcao"] = "Nulas MTX";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "6":
                        TempData["opcao"] = "Nulas Ambos";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "7":
                        TempData["opcao"] = "Isentas";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "8":
                        TempData["opcao"] = "Não Tributadas";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "9":
                        TempData["opcao"] = "Uso Consumo";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                }
            }
            else
            {

                TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
                opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                                                                               //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
                TempData.Keep("opcao");
            }


            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;

            //VerificaTempData();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;


            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao


            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ENTRADA_PIS > a.ALIQ_ENT_PIS_BASE && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ENTRADA_PIS < a.ALIQ_ENT_PIS_BASE && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ENTRADA_PIS == a.ALIQ_ENT_PIS_BASE && a.ALIQ_ENTRADA_PIS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ENTRADA_PIS == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ENTRADA_PIS != null && a.ALIQ_ENT_PIS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ENTRADA_PIS > a.ALIQ_ENT_PIS_BASE && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ENTRADA_PIS < a.ALIQ_ENT_PIS_BASE && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ENTRADA_PIS == a.ALIQ_ENT_PIS_BASE && a.ALIQ_ENTRADA_PIS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ENTRADA_PIS == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ENTRADA_PIS != null && a.ALIQ_ENT_PIS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;



                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ENTRADA_PIS > a.ALIQ_ENT_PIS_BASE && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ENTRADA_PIS < a.ALIQ_ENT_PIS_BASE && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ENTRADA_PIS == a.ALIQ_ENT_PIS_BASE && a.ALIQ_ENTRADA_PIS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ENTRADA_PIS == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ENTRADA_PIS != null && a.ALIQ_ENT_PIS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;



                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ENTRADA_PIS > a.ALIQ_ENT_PIS_BASE && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ENTRADA_PIS < a.ALIQ_ENT_PIS_BASE && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ENTRADA_PIS == a.ALIQ_ENT_PIS_BASE && a.ALIQ_ENTRADA_PIS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ENTRADA_PIS == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ENTRADA_PIS != null && a.ALIQ_ENT_PIS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ENTRADA_PIS > a.ALIQ_ENT_PIS_BASE && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ENTRADA_PIS < a.ALIQ_ENT_PIS_BASE && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ENTRADA_PIS == a.ALIQ_ENT_PIS_BASE && a.ALIQ_ENTRADA_PIS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ENTRADA_PIS == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_ENTRADA_PIS != null && a.ALIQ_ENT_PIS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;


            }//fim do switche

            //Action para procurar
            //analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);
            this.analise_NCM = ProcuraPorSnPorNCM(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analise_NCM);

            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analise_NCM = this.analise_NCM.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analise_NCM = this.analise_NCM.OrderBy(s => s.PRODUTO_NCM).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            //mandar a opção para que o javascript veja
            ViewBag.Opcao = opcao;

            int numeroPagina = (page ?? 1);

            return View(this.analise_NCM.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }

        [HttpGet]
        public ActionResult EdtCliAliqEntradaPisMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }

            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();


            //Variaveis auxiliares
            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            decimal analiseRetorno = 0.0M; //atribui zero ao valor
            decimal analiseTrib = 0.0M; //atribui zero ao valor
            try
            {

                //laço de repetição para percorrer o array com os registros
                for (int i = 0; i < idTrib.Length; i++)
                {
                    //converter em inteiro
                    int idTrb = int.Parse(idTrib[i]);

                    //faz a busca no objeto criado instanciando um so objeto
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                    AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

                    //pegar valores
                    /*Caso esteja nulo o retorno do valor a variavel continuar com 0 evitando erro de valores nulos*/
                    analiseRetorno = (analise.Aliq_Ent_Pis_INTERNO == null) ? analiseRetorno : (decimal)analise.Aliq_Ent_Pis_INTERNO;

                    analiseTrib = (analise.ALIQ_ENTRADA_PIS == null) ? analiseTrib : decimal.Parse(trib.ALIQ_ENTRADA_PIS);


                    //analisar se já são iguais
                    if (analiseTrib == analiseRetorno)
                    {
                        regNsalv++; //se são iguais não salva
                    }
                    else
                    { //se são diferentes
                        if (analiseRetorno == 0.0M)
                        {  //se o valor continnuar 0 atribui-se ao valor na base de dados nulo
                            trib.ALIQ_ENTRADA_PIS = null;
                        }
                        else
                        {
                            //caso contrario atribui o valor procurado na analise ao objeto instanciado
                            trib.ALIQ_ENTRADA_PIS = analise.Aliq_Ent_Pis_INTERNO.ToString().Replace(",", ".");
                        }

                        db.SaveChanges();
                        regSalv++; //contagem de registros salvos
                    }


                }
                TempData["analise"] = null;
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();

            }


            //Redirecionar para a tela de graficos
            return RedirectToAction("EdtCliAliqEntradaPisMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });
        }

        [HttpGet]
        public ActionResult EdtCliAliqEntradaPisMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();

            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }

            return View(trib);
        }

        [HttpGet]
        public ActionResult EdtCliAliqEntradaPisMassaManualModalPost(string strDados, string aliqEntradaPis)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }

            //trocando o ponto por virgula
            aliqEntradaPis = aliqEntradaPis.Replace(",", ".");

            //separar a String em um array
            string[] idTrib = strDados.Split(',');
            string resultado = "";
            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();
            int regSalvos = 0;
            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.ALIQ_ENTRADA_PIS = (aliqEntradaPis != "") ? trib.ALIQ_ENTRADA_PIS = aliqEntradaPis : null;

                    db.SaveChanges();
                    regSalvos++;

                }

                TempData["analise"] = null;
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }


            //Redirecionar para a tela de graficos
            return RedirectToAction("EdtCliAliqEntradaPisMassa", new { param = resultado, qtdSalvos = regSalvos });
        }



        /*Edição Aliquota de Pis de saída*/
        [HttpGet]
        public ActionResult EdtCliAliqSaidaPisMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Alíquota de Saída para PIS no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }
            //se for simples nacional direciona para essa action
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["tributacao"] = "SIMPLES";
                TempData.Keep("tributacao");
            }
            else
            {
                TempData["tributacao"] = "OUTROS";
                TempData.Keep("tributacao");
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            //ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;
            if (numeroLinhas != null)
            {

                if (TempData["linhas"] != null)
                {
                    if (!numeroLinhas.Equals(int.Parse(TempData["linhas"].ToString())))
                    {
                        TempData["linhas"] = numeroLinhas;
                        TempData.Keep("linhas");
                        ViewBag.NumeroLinhas = numeroLinhas;
                    }
                    else
                    {
                        ViewBag.NumeroLinhas = numeroLinhas;
                    }

                }
                else
                {
                    TempData["linhas"] = numeroLinhas;
                    TempData.Keep("linhas");
                    ViewBag.NumeroLinhas = numeroLinhas;

                }


            }
            else
            {
                if (TempData["linhas"] == null)
                {
                    TempData["linhas"] = 10;
                    TempData.Keep("linhas");
                    ViewBag.NumeroLinhas = 10;
                }
                else
                {
                    ViewBag.NumeroLinhas = TempData["linhas"];
                }
            }


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            //TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            //opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            ////persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            //TempData.Keep("opcao");

            if (filtroNulo != null)
            {
                switch (filtroNulo)
                {
                    case "1":
                        TempData["opcao"] = "Maiores";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "2":
                        TempData["opcao"] = "Menores";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "3":
                        TempData["opcao"] = "Iguais";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "4":
                        TempData["opcao"] = "Nulas Cliente";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "5":
                        TempData["opcao"] = "Nulas MTX";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "6":
                        TempData["opcao"] = "Nulas Ambos";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                   
                }
            }
            else
            {

                TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
                opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                                                                               //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
                TempData.Keep("opcao");
            }

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;

            //VerificaTempData();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao

            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                case "Alíquotas Maiores":
                    
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_PIS > a.ALIQ_SAIDA_PIS_BASE && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_PIS < a.ALIQ_SAIDA_PIS_BASE && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_PIS == a.ALIQ_SAIDA_PIS_BASE && a.ALIQ_SAIDA_PIS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_PIS == null && a.ALIQ_SAIDA_COFINS_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_PIS != null && a.ALIQ_SAIDA_PIS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_PIS == null && a.ALIQ_SAIDA_PIS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Menores":
                case "Alíquotas Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_PIS > a.ALIQ_SAIDA_PIS_BASE && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_PIS < a.ALIQ_SAIDA_PIS_BASE && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_PIS == a.ALIQ_SAIDA_PIS_BASE && a.ALIQ_SAIDA_PIS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_PIS == null && a.ALIQ_SAIDA_COFINS_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_PIS != null && a.ALIQ_SAIDA_PIS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_PIS == null && a.ALIQ_SAIDA_PIS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;



                    }
                    break;
                case "Iguais":
                case "Alíquotas Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_PIS > a.ALIQ_SAIDA_PIS_BASE && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_PIS < a.ALIQ_SAIDA_PIS_BASE && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_PIS == a.ALIQ_SAIDA_PIS_BASE && a.ALIQ_SAIDA_PIS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_PIS == null && a.ALIQ_SAIDA_COFINS_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_PIS != null && a.ALIQ_SAIDA_PIS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_PIS == null && a.ALIQ_SAIDA_PIS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;



                    }
                    break;
                case "Nulas Cliente":
                case "Alíquotas Nulas no Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_PIS > a.ALIQ_SAIDA_PIS_BASE && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_PIS < a.ALIQ_SAIDA_PIS_BASE && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_PIS == a.ALIQ_SAIDA_PIS_BASE && a.ALIQ_SAIDA_PIS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_PIS == null && a.ALIQ_SAIDA_COFINS_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_PIS != null && a.ALIQ_SAIDA_PIS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_PIS == null && a.ALIQ_SAIDA_PIS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Nulas MTX":
                case "Alíquotas Nulas no MTX":
                  
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_PIS > a.ALIQ_SAIDA_PIS_BASE && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_PIS < a.ALIQ_SAIDA_PIS_BASE && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_PIS == a.ALIQ_SAIDA_PIS_BASE && a.ALIQ_SAIDA_PIS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_PIS == null && a.ALIQ_SAIDA_COFINS_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_PIS != null && a.ALIQ_SAIDA_PIS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_PIS == null && a.ALIQ_SAIDA_PIS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Nulas Ambos":
                case "Alíquotas Nulas em Ambos":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_PIS > a.ALIQ_SAIDA_PIS_BASE && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_PIS < a.ALIQ_SAIDA_PIS_BASE && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_PIS == a.ALIQ_SAIDA_PIS_BASE && a.ALIQ_SAIDA_PIS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_PIS == null && a.ALIQ_SAIDA_COFINS_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_PIS != null && a.ALIQ_SAIDA_PIS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_PIS == null && a.ALIQ_SAIDA_PIS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;



            }//fim do switche

            //Action para procurar
            //analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);
            this.analise_NCM = ProcuraPorSnPorNCM(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analise_NCM);

            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analise_NCM = this.analise_NCM.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analise_NCM = this.analise_NCM.OrderBy(s => s.PRODUTO_NCM).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";
            ViewBag.CstPisCofinsS = db.CstPisCofinsSaidas.ToList();

            //mandar a opção para que o javascript veja
            ViewBag.Opcao = opcao;
            int numeroPagina = (page ?? 1);

            return View(this.analise_NCM.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }

        [HttpGet]
        public ActionResult EdtCliAliqSaidaPisMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }

            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();


            //Variaveis auxiliares
            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            decimal analiseRetorno = 0.0M; //atribui zero ao valor
            decimal analiseTrib = 0.0M; //atribui zero ao valor
            try
            {

                //laço de repetição para percorrer o array com os registros
                for (int i = 0; i < idTrib.Length; i++)
                {
                    //converter em inteiro
                    int idTrb = int.Parse(idTrib[i]);

                    //faz a busca no objeto criado instanciando um so objeto
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                    AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

                    //pegar valores
                    /*Caso esteja nulo o retorno do valor a variavel continuar com 0 evitando erro de valores nulos*/
                    analiseRetorno = (analise.Aliq_Saida_Pis_INTERNO == null) ? analiseRetorno : (decimal)analise.Aliq_Saida_Pis_INTERNO;

                    analiseTrib = (analise.ALIQ_SAIDA_PIS == null) ? analiseTrib : decimal.Parse(trib.ALIQ_SAIDA_PIS);


                    //analisar se já são iguais
                    if (analiseTrib == analiseRetorno)
                    {
                        regNsalv++; //se são iguais não salva
                    }
                    else
                    { //se são diferentes
                        if (analiseRetorno == 0.0M)
                        {  //se o valor continnuar 0 atribui-se ao valor na base de dados nulo
                            trib.ALIQ_SAIDA_PIS = null;
                        }
                        else
                        {
                            //caso contrario atribui o valor procurado na analise ao objeto instanciado
                            trib.ALIQ_SAIDA_PIS = analise.Aliq_Saida_Pis_INTERNO.ToString().Replace(",", ".");
                        }

                        db.SaveChanges();
                        regSalv++; //contagem de registros salvos
                    }


                }
                TempData["analise"] = null;
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();

            }


            //Redirecionar para a tela de graficos
            return RedirectToAction("EdtCliAliqSaidaPisMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });
        }

        [HttpGet]
        public ActionResult EdtCliAliqSaidaPisMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();

            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }

            return View(trib);
        }

        [HttpGet]
        public ActionResult EdtCliAliqSaidaPisMassaManualModalPost(string strDados, string aliqSaidaPis)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }

            //trocando o ponto por virgula
            aliqSaidaPis = aliqSaidaPis.Replace(",", ".");

            //separar a String em um array
            string[] idTrib = strDados.Split(',');
            string resultado = "";
            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();
            int regSalvos = 0;
            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.ALIQ_SAIDA_PIS = (aliqSaidaPis != "") ? trib.ALIQ_SAIDA_PIS = aliqSaidaPis : null;

                    db.SaveChanges();
                    regSalvos++;

                }

                TempData["analise"] = null;
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }


            //Redirecionar para a tela de graficos
            return RedirectToAction("EdtCliAliqSaidaPisMassa", new { param = resultado, qtdSalvos = regSalvos });
        }



        [HttpGet]
        public ActionResult EdtCliAliqSaidaPisMassaTODOS(string opcao)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            string ufOrigem = TempData["UfOrigem"].ToString();
            string ufDestino = TempData["UfDestino"].ToString();

            ViewBag.Tributacao = TempData["tributacao"].ToString();
            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao

            TributacaoEmpresa trib = new TributacaoEmpresa();

            if (opcao == "Alíquotas Maiores")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_PIS > a.ALIQ_SAIDA_PIS_BASE && a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }
            if (opcao == "Alíquotas Menores")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_PIS < a.ALIQ_SAIDA_PIS_BASE && a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }
            if (opcao == "Alíquotas Nulas no Cliente")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_PIS== null && a.ALIQ_SAIDA_PIS_BASE != null && a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }

            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            string resultado = ""; //variavel auxiliar;

            for (int i = 0; i < this.analise_NCM.Count(); i++)
            {

                //converter em inteiro
                int? idTrb = (this.analise_NCM[i].TE_ID);
                trib = db.TributacaoEmpresas.Find(idTrb);//busca o registro
                trib.ALIQ_SAIDA_PIS = this.analise_NCM[i].ALIQ_SAIDA_PIS_BASE.ToString().Replace(",", ".");
                trib.DT_ALTERACAO = DateTime.Now;
                try
                {

                    db.SaveChanges();
                    regSalv++; //contagem de registros salvos

                }
                catch (Exception e)
                {
                    resultado = "Problemas ao salvar o registro: " + e.ToString();
                    regNsalv++;
                }

            }
            resultado = "Registro Salvo com Sucesso!!";


            //TempData["analiseSN"] = null;
            TempData["analise_NCM"] = null;
            TempData.Keep("analise_NCM");
            //string[] idTrib = this.alanliseSN.
            //a analise vai me dar todos os ids


            return RedirectToAction("EdtCliAliqSaidaPisMassa", new { param = resultado, qtdSalvos = regSalv });


        }


        /*Edição Aliquota Cofins de Entrada*/
        [HttpGet]
        public ActionResult EdtCliAliqEntCofinsMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Alíquota de Saída para PIS no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;

            VerificaTempData();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            analise = analise.Where(a => a.ALIQ_ENTRADA_COFINS > a.Aliq_Ent_Cofins_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ENTRADA_COFINS < a.Aliq_Ent_Cofins_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ENTRADA_COFINS == a.Aliq_Ent_Cofins_INTERNO && a.ALIQ_ENTRADA_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ENTRADA_COFINS == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ENTRADA_COFINS != null && a.Aliq_Ent_Cofins_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.ALIQ_ENTRADA_COFINS > a.Aliq_Ent_Cofins_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ENTRADA_COFINS < a.Aliq_Ent_Cofins_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ENTRADA_COFINS == a.Aliq_Ent_Cofins_INTERNO && a.ALIQ_ENTRADA_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ENTRADA_COFINS == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ENTRADA_COFINS != null && a.Aliq_Ent_Cofins_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            analise = analise.Where(a => a.ALIQ_ENTRADA_COFINS > a.Aliq_Ent_Cofins_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ENTRADA_COFINS < a.Aliq_Ent_Cofins_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ENTRADA_COFINS == a.Aliq_Ent_Cofins_INTERNO && a.ALIQ_ENTRADA_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ENTRADA_COFINS == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ENTRADA_COFINS != null && a.Aliq_Ent_Cofins_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;



                    }
                    break;
                case "Nulas Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            analise = analise.Where(a => a.ALIQ_ENTRADA_COFINS > a.Aliq_Ent_Cofins_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ENTRADA_COFINS < a.Aliq_Ent_Cofins_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ENTRADA_COFINS == a.Aliq_Ent_Cofins_INTERNO && a.ALIQ_ENTRADA_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ENTRADA_COFINS == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ENTRADA_COFINS != null && a.Aliq_Ent_Cofins_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Nulas MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            analise = analise.Where(a => a.ALIQ_ENTRADA_COFINS > a.Aliq_Ent_Cofins_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.ALIQ_ENTRADA_COFINS < a.Aliq_Ent_Cofins_INTERNO && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.ALIQ_ENTRADA_COFINS == a.Aliq_Ent_Cofins_INTERNO && a.ALIQ_ENTRADA_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.ALIQ_ENTRADA_COFINS == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            analise = analise.Where(a => a.ALIQ_ENTRADA_COFINS != null && a.Aliq_Ent_Cofins_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;



                    }
                    break;


            }//fim do switche

            //Action para procurar
            analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);

            switch (ordenacao)
            {
                case "Produto_desc":
                    analise = analise.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    analise = analise.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            int numeroPagina = (page ?? 1);

            return View(analise.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }

        [HttpGet]
        public ActionResult EdtCliAliqEntCofinsMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }

            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();


            //Variaveis auxiliares
            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            decimal analiseRetorno = 0.0M; //atribui zero ao valor
            decimal analiseTrib = 0.0M; //atribui zero ao valor
            try
            {

                //laço de repetição para percorrer o array com os registros
                for (int i = 0; i < idTrib.Length; i++)
                {
                    //converter em inteiro
                    int idTrb = int.Parse(idTrib[i]);

                    //faz a busca no objeto criado instanciando um so objeto
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                    AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

                    //pegar valores
                    /*Caso esteja nulo o retorno do valor a variavel continuar com 0 evitando erro de valores nulos*/
                    analiseRetorno = (analise.Aliq_Ent_Cofins_INTERNO == null) ? analiseRetorno : (decimal)analise.Aliq_Ent_Cofins_INTERNO;

                    analiseTrib = (analise.ALIQ_ENTRADA_COFINS == null) ? analiseTrib : decimal.Parse(trib.ALIQ_ENTRADA_COFINS);


                    //analisar se já são iguais
                    if (analiseTrib == analiseRetorno)
                    {
                        regNsalv++; //se são iguais não salva
                    }
                    else
                    { //se são diferentes
                        if (analiseRetorno == 0.0M)
                        {  //se o valor continnuar 0 atribui-se ao valor na base de dados nulo
                            trib.ALIQ_ENTRADA_COFINS = null;
                        }
                        else
                        {
                            //caso contrario atribui o valor procurado na analise ao objeto instanciado
                            trib.ALIQ_ENTRADA_COFINS = analise.Aliq_Ent_Cofins_INTERNO.ToString().Replace(",", ".");
                        }

                        db.SaveChanges();
                        regSalv++; //contagem de registros salvos
                    }


                }
                TempData["analise"] = null;
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();

            }


            //Redirecionar para a tela de graficos
            return RedirectToAction("EdtCliAliqEntCofinsMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });
        }

        [HttpGet]
        public ActionResult EdtCliAliqEntCofinsMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();

            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }

            return View(trib);
        }

        [HttpGet]
        public ActionResult EdtCliAliqEntCofinsMassaManualModalPost(string strDados, string aliqEntCofins)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }

            //trocando o ponto por virgula
            aliqEntCofins = aliqEntCofins.Replace(",", ".");

            //separar a String em um array
            string[] idTrib = strDados.Split(',');
            string resultado = "";
            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();
            int regSalvos = 0;
            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.ALIQ_ENTRADA_COFINS = (aliqEntCofins != "") ? trib.ALIQ_ENTRADA_COFINS = aliqEntCofins : null;

                    db.SaveChanges();
                    regSalvos++;

                }

                TempData["analise"] = null;
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }


            //Redirecionar para a tela de graficos
            return RedirectToAction("EdtCliAliqEntCofinsMassa", new { param = resultado, qtdSalvos = regSalvos });
        }



     
        /*Edição Aliquota cofins de saída*/
        [HttpGet]
        public ActionResult EdtCliAliqSaiCofinsMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "Alíquota de Saída para COFINS no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se for simples nacional direciona para essa action
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["tributacao"] = "SIMPLES";
                TempData.Keep("tributacao");
            }
            else
            {
                TempData["tributacao"] = "OUTROS";
                TempData.Keep("tributacao");
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            //ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;

            if (numeroLinhas != null)
            {

                if (TempData["linhas"] != null)
                {
                    if (!numeroLinhas.Equals(int.Parse(TempData["linhas"].ToString())))
                    {
                        TempData["linhas"] = numeroLinhas;
                        TempData.Keep("linhas");
                        ViewBag.NumeroLinhas = numeroLinhas;
                    }
                    else
                    {
                        ViewBag.NumeroLinhas = numeroLinhas;
                    }

                }
                else
                {
                    TempData["linhas"] = numeroLinhas;
                    TempData.Keep("linhas");
                    ViewBag.NumeroLinhas = numeroLinhas;

                }


            }
            else
            {
                if (TempData["linhas"] == null)
                {
                    TempData["linhas"] = 10;
                    TempData.Keep("linhas");
                    ViewBag.NumeroLinhas = 10;
                }
                else
                {
                    ViewBag.NumeroLinhas = TempData["linhas"];
                }
            }


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            ////Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            //ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            ///*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            //TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            //opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            ////persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            //TempData.Keep("opcao");
            if (filtroNulo != null)
            {
                switch (filtroNulo)
                {
                    case "1":
                        TempData["opcao"] = "Maiores";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "2":
                        TempData["opcao"] = "Menores";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "3":
                        TempData["opcao"] = "Iguais";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "4":
                        TempData["opcao"] = "Nulas Cliente";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "5":
                        TempData["opcao"] = "Nulas MTX";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "6":
                        TempData["opcao"] = "Nulas Ambos";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;

                }
            }
            else
            {

                TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
                opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                                                                               //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
                TempData.Keep("opcao");
            }


            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;

            //VerificaTempData();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao

            /*Switch da opção*/
            switch (opcao)
            {
                case "Maiores":
                case "Alíquotas Maiores":
                    
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_COFINS > a.ALIQ_SAIDA_COFINS_BASE && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_COFINS < a.ALIQ_SAIDA_COFINS_BASE && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_COFINS == a.ALIQ_SAIDA_COFINS_BASE && a.ALIQ_SAIDA_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_COFINS == null &&  a.ALIQ_SAIDA_COFINS_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_COFINS != null && a.ALIQ_SAIDA_COFINS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_COFINS == null && a.ALIQ_SAIDA_COFINS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Menores":
                case "Alíquotas Menores":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_COFINS > a.ALIQ_SAIDA_COFINS_BASE && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_COFINS < a.ALIQ_SAIDA_COFINS_BASE && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_COFINS == a.ALIQ_SAIDA_COFINS_BASE && a.ALIQ_SAIDA_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_COFINS == null && a.ALIQ_SAIDA_COFINS_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_COFINS != null && a.ALIQ_SAIDA_COFINS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_COFINS == null && a.ALIQ_SAIDA_COFINS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;



                    }
                    break;
                case "Iguais":
                case "Alíquotas Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_COFINS > a.ALIQ_SAIDA_COFINS_BASE && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_COFINS < a.ALIQ_SAIDA_COFINS_BASE && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_COFINS == a.ALIQ_SAIDA_COFINS_BASE && a.ALIQ_SAIDA_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_COFINS == null && a.ALIQ_SAIDA_COFINS_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_COFINS != null && a.ALIQ_SAIDA_COFINS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_COFINS == null && a.ALIQ_SAIDA_COFINS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Nulas Cliente":
                case "Alíquotas Nulas no Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_COFINS > a.ALIQ_SAIDA_COFINS_BASE && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_COFINS < a.ALIQ_SAIDA_COFINS_BASE && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_COFINS == a.ALIQ_SAIDA_COFINS_BASE && a.ALIQ_SAIDA_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_COFINS == null && a.ALIQ_SAIDA_COFINS_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_COFINS != null && a.ALIQ_SAIDA_COFINS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_COFINS == null && a.ALIQ_SAIDA_COFINS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break; 
                case "Nulas MTX":
                case "Alíquotas Nulas no MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_COFINS > a.ALIQ_SAIDA_COFINS_BASE && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_COFINS < a.ALIQ_SAIDA_COFINS_BASE && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_COFINS == a.ALIQ_SAIDA_COFINS_BASE && a.ALIQ_SAIDA_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_COFINS == null && a.ALIQ_SAIDA_COFINS_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_COFINS != null && a.ALIQ_SAIDA_COFINS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_COFINS == null && a.ALIQ_SAIDA_COFINS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;



                    }
                    break;
                case "Nulas Ambos":
                case "Alíquotas Nulas em Ambos":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_COFINS > a.ALIQ_SAIDA_COFINS_BASE && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_COFINS < a.ALIQ_SAIDA_COFINS_BASE && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_COFINS == a.ALIQ_SAIDA_COFINS_BASE && a.ALIQ_SAIDA_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_COFINS == null && a.ALIQ_SAIDA_COFINS_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_COFINS != null && a.ALIQ_SAIDA_COFINS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "6":
                            this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_COFINS == null && a.ALIQ_SAIDA_COFINS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;



                    }
                    break;


            }//fim do switche

            //Action para procurar
            //analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);
            this.analise_NCM = ProcuraPorSnPorNCM(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analise_NCM);

            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analise_NCM = this.analise_NCM.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analise_NCM = this.analise_NCM.OrderBy(s => s.PRODUTO_NCM).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";
            //mandar a opção para que o javascript veja
            ViewBag.Opcao = opcao;

            ViewBag.CstPisCofinsS = db.CstPisCofinsSaidas.ToList();
            int numeroPagina = (page ?? 1);

            return View(this.analise_NCM.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }

        [HttpGet]
        public ActionResult EdtCliAliqSaiCofinsMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }

            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();


            //Variaveis auxiliares
            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            decimal analiseRetorno = 0.0M; //atribui zero ao valor
            decimal analiseTrib = 0.0M; //atribui zero ao valor
            try
            {

                //laço de repetição para percorrer o array com os registros
                for (int i = 0; i < idTrib.Length; i++)
                {
                    //converter em inteiro
                    int idTrb = int.Parse(idTrib[i]);

                    //faz a busca no objeto criado instanciando um so objeto
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                    AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

                    //pegar valores
                    /*Caso esteja nulo o retorno do valor a variavel continuar com 0 evitando erro de valores nulos*/
                    analiseRetorno = (analise.Aliq_Saida_Cofins_INTERNO == null) ? analiseRetorno : (decimal)analise.Aliq_Saida_Cofins_INTERNO;

                    analiseTrib = (analise.ALIQ_SAIDA_COFINS == null) ? analiseTrib : decimal.Parse(trib.ALIQ_SAIDA_COFINS);


                    //analisar se já são iguais
                    if (analiseTrib == analiseRetorno)
                    {
                        regNsalv++; //se são iguais não salva
                    }
                    else
                    { //se são diferentes
                        if (analiseRetorno == 0.0M)
                        {  //se o valor continnuar 0 atribui-se ao valor na base de dados nulo
                            trib.ALIQ_SAIDA_COFINS = null;
                        }
                        else
                        {
                            //caso contrario atribui o valor procurado na analise ao objeto instanciado
                            trib.ALIQ_SAIDA_COFINS = analise.Aliq_Saida_Cofins_INTERNO.ToString().Replace(",", ".");
                        }

                        db.SaveChanges();
                        regSalv++; //contagem de registros salvos
                    }


                }
                TempData["analise"] = null;
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();

            }


            //Redirecionar para a tela de graficos
            return RedirectToAction("EdtCliAliqSaiCofinsMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });
        }

        [HttpGet]
        public ActionResult EdtCliAliqSaiCofinsMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();

            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }

            return View(trib);
        }

        [HttpGet]
        public ActionResult EdtCliAliqSaiCofinsMassaManualModalPost(string strDados, string aliqSaiCofins)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }

            //trocando o ponto por virgula
            aliqSaiCofins = aliqSaiCofins.Replace(",", ".");

            //separar a String em um array
            string[] idTrib = strDados.Split(',');
            string resultado = "";
            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();
            int regSalvos = 0;
            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.ALIQ_SAIDA_COFINS = (aliqSaiCofins != "") ? trib.ALIQ_SAIDA_COFINS = aliqSaiCofins : null;

                    db.SaveChanges();
                    regSalvos++;

                }

                TempData["analise"] = null;
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }


            //Redirecionar para a tela de graficos
            return RedirectToAction("EdtCliAliqSaiCofinsMassa", new { param = resultado, qtdSalvos = regSalvos });
        }
     


        [HttpGet]
        public ActionResult EdtCliAliqSaiCofinsMassaTODOS(string opcao)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            string ufOrigem = TempData["UfOrigem"].ToString();
            string ufDestino = TempData["UfDestino"].ToString();

            ViewBag.Tributacao = TempData["tributacao"].ToString();
            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao

            TributacaoEmpresa trib = new TributacaoEmpresa();

            if (opcao == "Alíquotas Maiores")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_COFINS > a.ALIQ_SAIDA_COFINS_BASE && a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }
            if (opcao == "Alíquotas Menores")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_COFINS < a.ALIQ_SAIDA_COFINS_BASE && a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }
            if (opcao == "Alíquotas Nulas no Cliente")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.ALIQ_SAIDA_COFINS == null && a.ALIQ_SAIDA_COFINS_BASE != null && a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }

            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            string resultado = ""; //variavel auxiliar;

            for (int i = 0; i < this.analise_NCM.Count(); i++)
            {

                //converter em inteiro
                int? idTrb = (this.analise_NCM[i].TE_ID);
                trib = db.TributacaoEmpresas.Find(idTrb);//busca o registro
                trib.ALIQ_SAIDA_COFINS = this.analise_NCM[i].ALIQ_SAIDA_COFINS_BASE.ToString().Replace(",", ".");
                trib.DT_ALTERACAO = DateTime.Now;
                try
                {

                    db.SaveChanges();
                    regSalv++; //contagem de registros salvos

                }
                catch (Exception e)
                {
                    resultado = "Problemas ao salvar o registro: " + e.ToString();
                    regNsalv++;
                }

            }
            resultado = "Registro Salvo com Sucesso!!";


            //TempData["analiseSN"] = null;
            TempData["analise_NCM"] = null;
            TempData.Keep("analise_NCM");
            //string[] idTrib = this.alanliseSN.
            //a analise vai me dar todos os ids


            return RedirectToAction("EdtCliAliqSaiCofinsMassa", new { param = resultado, qtdSalvos = regSalv });


        }

        /*Edição de CST de Pis Cofins de Entrada*/
        [HttpGet]
        public ActionResult EdtCliCstEntradaPisCofinsMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "CST de Entrada para Pis Cofins no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;


            //TO-DO: CONDICINAL PARA VERIFICAR SE É SIMPLES NACIONAL OU NÃO
            //se for simples nacional direciona para essa action
            if (this.empresa.simples_nacional.Equals(1))
            {
                VerificaTempDataSN();

                //origem e destino

                //montar select estado origem e destino
                ViewBag.EstadosOrigem = db.Estados.ToList();
                ViewBag.EstadosDestinos = db.Estados.ToList();

                ViewBag.CstPisCofinsE = db.CstPisCofinsEntradas.ToList();
                // ViewBag.CstPisCofinsS = db.CstPisCofinsSaidas.ToList();

                //verifica estados origem e destino
                VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


                //aplica estado origem e destino
                ViewBag.UfOrigem = this.ufOrigem;
                ViewBag.UfDestino = this.ufDestino;


                /*Switch da opção*/
                switch (opcao)
                {
                    case "Iguais":
                        //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                        ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                        switch (ViewBag.Filtro)
                        {

                            case "1":
                                analiseSn = analiseSn.Where(a => a.CST_ENTRADA_PIS_COFINS == a.Cst_Entrada_PisCofins_INTERNO && a.CST_ENTRADA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                                break;
                            case "2":
                                analiseSn = analiseSn.Where(a => a.CST_ENTRADA_PIS_COFINS != a.Cst_Entrada_PisCofins_INTERNO && a.CST_ENTRADA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                                break;
                            case "3":
                                analiseSn = analiseSn.Where(a => a.CST_ENTRADA_PIS_COFINS == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                                break;
                            case "4":
                                analiseSn = analiseSn.Where(a => a.Cst_Entrada_PisCofins_INTERNO == null && a.CST_ENTRADA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                                break;


                        }
                        break;
                    case "Diferentes":
                        //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                        ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                        switch (ViewBag.Filtro)
                        {
                            case "1":
                                analiseSn = analiseSn.Where(a => a.CST_ENTRADA_PIS_COFINS == a.Cst_Entrada_PisCofins_INTERNO && a.CST_ENTRADA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                                break;
                            case "2":
                                analiseSn = analiseSn.Where(a => a.CST_ENTRADA_PIS_COFINS != a.Cst_Entrada_PisCofins_INTERNO && a.CST_ENTRADA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                                break;
                            case "3":
                                analiseSn = analiseSn.Where(a => a.CST_ENTRADA_PIS_COFINS == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                                break;
                            case "4":
                                analiseSn = analiseSn.Where(a => a.Cst_Entrada_PisCofins_INTERNO == null && a.CST_ENTRADA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                                break;



                        }
                        break;
                    case "Nulos Cliente":
                        //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                        ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                        switch (ViewBag.Filtro)
                        {

                            case "1":
                                analiseSn = analiseSn.Where(a => a.CST_ENTRADA_PIS_COFINS == a.Cst_Entrada_PisCofins_INTERNO && a.CST_ENTRADA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                                break;
                            case "2":
                                analiseSn = analiseSn.Where(a => a.CST_ENTRADA_PIS_COFINS != a.Cst_Entrada_PisCofins_INTERNO && a.CST_ENTRADA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                                break;
                            case "3":
                                analiseSn = analiseSn.Where(a => a.CST_ENTRADA_PIS_COFINS == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                                break;
                            case "4":
                                analiseSn = analiseSn.Where(a => a.Cst_Entrada_PisCofins_INTERNO == null && a.CST_ENTRADA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                                break;



                        }
                        break;
                    case "Nulos MTX":
                        //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                        ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                        switch (ViewBag.Filtro)
                        {

                            case "1":
                                analiseSn = analiseSn.Where(a => a.CST_ENTRADA_PIS_COFINS == a.Cst_Entrada_PisCofins_INTERNO && a.CST_ENTRADA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                                break;
                            case "2":
                                analiseSn = analiseSn.Where(a => a.CST_ENTRADA_PIS_COFINS != a.Cst_Entrada_PisCofins_INTERNO && a.CST_ENTRADA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                                break;
                            case "3":
                                analiseSn = analiseSn.Where(a => a.CST_ENTRADA_PIS_COFINS == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                                break;
                            case "4":
                                analiseSn = analiseSn.Where(a => a.Cst_Entrada_PisCofins_INTERNO == null && a.CST_ENTRADA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                                break;
                        }
                        break;


                }//fim do switche

                //Action para procurar
                analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);

                switch (ordenacao)
                {
                    case "Produto_desc":
                        analiseSn = analiseSn.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                        break;
                    default:
                        analiseSn = analiseSn.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                        break;
                }

                //montar a pagina
                int tamaanhoPagina = 0;

                //ternario para tamanho da pagina
                tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

                //Mensagens de retorno
                ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
                ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
                ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

                int numeroPagina = (page ?? 1);

                return View(analiseSn.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada


              //  return RedirectToAction("AnaliseTributariaSN");

            }
            else
            {
                VerificaTempData();

                //origem e destino

                //montar select estado origem e destino
                ViewBag.EstadosOrigem = db.Estados.ToList();
                ViewBag.EstadosDestinos = db.Estados.ToList();

                ViewBag.CstPisCofinsE = db.CstPisCofinsEntradas.ToList();
                // ViewBag.CstPisCofinsS = db.CstPisCofinsSaidas.ToList();

                //verifica estados origem e destino
                VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


                //aplica estado origem e destino
                ViewBag.UfOrigem = this.ufOrigem;
                ViewBag.UfDestino = this.ufDestino;


                /*Switch da opção*/
                switch (opcao)
                {
                    case "Iguais":
                        //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                        ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                        switch (ViewBag.Filtro)
                        {

                            case "1":
                                analise = analise.Where(a => a.CST_ENTRADA_PIS_COFINS == a.Cst_Entrada_PisCofins_INTERNO && a.CST_ENTRADA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                                break;
                            case "2":
                                analise = analise.Where(a => a.CST_ENTRADA_PIS_COFINS != a.Cst_Entrada_PisCofins_INTERNO && a.CST_ENTRADA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                                break;
                            case "3":
                                analise = analise.Where(a => a.CST_ENTRADA_PIS_COFINS == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                                break;
                            case "4":
                                analise = analise.Where(a => a.Cst_Entrada_PisCofins_INTERNO == null && a.CST_ENTRADA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                                break;


                        }
                        break;
                    case "Diferentes":
                        //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                        ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                        switch (ViewBag.Filtro)
                        {
                            case "1":
                                analise = analise.Where(a => a.CST_ENTRADA_PIS_COFINS == a.Cst_Entrada_PisCofins_INTERNO && a.CST_ENTRADA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                                break;
                            case "2":
                                analise = analise.Where(a => a.CST_ENTRADA_PIS_COFINS != a.Cst_Entrada_PisCofins_INTERNO && a.CST_ENTRADA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                                break;
                            case "3":
                                analise = analise.Where(a => a.CST_ENTRADA_PIS_COFINS == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                                break;
                            case "4":
                                analise = analise.Where(a => a.Cst_Entrada_PisCofins_INTERNO == null && a.CST_ENTRADA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                                break;




                        }
                        break;
                    case "Nulos Cliente":
                        //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                        ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                        switch (ViewBag.Filtro)
                        {

                            case "1":
                                analise = analise.Where(a => a.CST_ENTRADA_PIS_COFINS == a.Cst_Entrada_PisCofins_INTERNO && a.CST_ENTRADA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                                break;
                            case "2":
                                analise = analise.Where(a => a.CST_ENTRADA_PIS_COFINS != a.Cst_Entrada_PisCofins_INTERNO && a.CST_ENTRADA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                                break;
                            case "3":
                                analise = analise.Where(a => a.CST_ENTRADA_PIS_COFINS == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                                break;
                            case "4":
                                analise = analise.Where(a => a.Cst_Entrada_PisCofins_INTERNO == null && a.CST_ENTRADA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                                break;




                        }
                        break;
                    case "Nulos MTX":
                        //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                        ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                        switch (ViewBag.Filtro)
                        {

                            case "1":
                                analise = analise.Where(a => a.CST_ENTRADA_PIS_COFINS == a.Cst_Entrada_PisCofins_INTERNO && a.CST_ENTRADA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                                break;
                            case "2":
                                analise = analise.Where(a => a.CST_ENTRADA_PIS_COFINS != a.Cst_Entrada_PisCofins_INTERNO && a.CST_ENTRADA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                                break;
                            case "3":
                                analise = analise.Where(a => a.CST_ENTRADA_PIS_COFINS == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                                break;
                            case "4":
                                analise = analise.Where(a => a.Cst_Entrada_PisCofins_INTERNO == null && a.CST_ENTRADA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                                break;

                        }
                        break;


                }//fim do switche

                //Action para procurar
                analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);

                switch (ordenacao)
                {
                    case "Produto_desc":
                        analise = analise.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                        break;
                    default:
                        analise = analise.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                        break;
                }

                //montar a pagina
                int tamaanhoPagina = 0;

                //ternario para tamanho da pagina
                tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

                //Mensagens de retorno
                ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
                ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
                ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

                int numeroPagina = (page ?? 1);

                return View(analise.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
            }
               
        }

        [HttpGet]
        public ActionResult EdtCliCstEntradaPisCofinsMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();


            //Variaveis auxiliares
            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            int? analiseRetorno = 0; //atribui zero ao valor
            int? analiseTrib = 0; //atribui zero ao valor
            try
            {

                //laço de repetição para percorrer o array com os registros
                for (int i = 0; i < idTrib.Length; i++)
                {
                    //converter em inteiro
                    int idTrb = int.Parse(idTrib[i]);

                    //faz a busca no objeto criado instanciando um so objeto
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                    AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

                    //pegar valores
                    /*Caso esteja nulo o retorno do valor a variavel continuar com 0 evitando erro de valores nulos*/
                    analiseRetorno = (analise.Cst_Entrada_PisCofins_INTERNO == null) ? analiseRetorno : analise.Cst_Entrada_PisCofins_INTERNO;

                    analiseTrib = (analise.CST_ENTRADA_PIS_COFINS == null) ? analiseTrib : int.Parse(trib.CST_ENTRADA_PIS_COFINS);


                    //analisar se já são iguais
                    if (analiseTrib == analiseRetorno)
                    {
                        regNsalv++; //se são iguais não salva
                    }
                    else
                    { //se são diferentes
                        if (analiseRetorno == 0)
                        {  //se o valor continnuar 0 atribui-se ao valor na base de dados nulo
                            trib.CST_ENTRADA_PIS_COFINS = null;
                        }
                        else
                        {
                            //caso contrario atribui o valor procurado na analise ao objeto instanciado
                            trib.CST_ENTRADA_PIS_COFINS = analise.Cst_Entrada_PisCofins_INTERNO.ToString();
                        }

                        db.SaveChanges();
                        regSalv++; //contagem de registros salvos
                    }


                }
                TempData["analise"] = null;
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();

            }


            //Redirecionar para a tela de graficos
            return RedirectToAction("EdtCliCstEntradaPisCofinsMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });
        }

        [HttpGet]
        public ActionResult EdtCliCstEntradaPisCofinsMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();

            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }
            //montar dropdown list para as cst
            var cstEntrada = db.CstPisCofinsEntradas.Select(c => new
            {
                codigo = c.codigo,
                descricao = c.descricao


            }).ToList();

            ViewBag.CstEntradaPisCofins = new SelectList(cstEntrada, "descricao", "codigo");


            return View(trib);
        }

        [HttpGet]
        public ActionResult EdtCliCstEntradaPisCofinsMassaManualModalPost(string strDados, string cstEntPisCofins)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //variavel auxiliar para receber o codigo do cst
            int? cstCodigo = 0;

            //pegar o codigo da cst
            cstCodigo = (cstEntPisCofins == "") ? null : (int?)(long)(from a in db.CstPisCofinsEntradas where a.descricao == cstEntPisCofins select a.codigo).FirstOrDefault();

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //variavel auxiliar para guardar o resultado
            string resultado = "";
            int regSalvos = 0;

            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();

           
            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.CST_ENTRADA_PIS_COFINS = (cstCodigo.ToString() != "") ? trib.CST_ENTRADA_PIS_COFINS = cstCodigo.ToString() : null;

                    db.SaveChanges();
                    regSalvos++;

                }

                TempData["analise"] = null; //recarrega a lista
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }


            //Redirecionar para a tela de graficos
            return RedirectToAction("EdtCliCstEntradaPisCofinsMassa", new { param = resultado, qtdSalvos = regSalvos });
        }

        /*Edição de CST de Pis Cofins de Saída*/
        [HttpGet]
        public ActionResult EdtCliCstSaidaPisCofinsMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "CST de Saída para Pis Cofins no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }
            //se for simples nacional direciona para essa action
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["tributacao"] = "SIMPLES";
                TempData.Keep("tributacao");
            }
            else
            {
                TempData["tributacao"] = "OUTROS";
                TempData.Keep("tributacao");
            }
            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            //ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;
            if (numeroLinhas != null)
            {

                if (TempData["linhas"] != null)
                {
                    if (!numeroLinhas.Equals(int.Parse(TempData["linhas"].ToString())))
                    {
                        TempData["linhas"] = numeroLinhas;
                        TempData.Keep("linhas");
                        ViewBag.NumeroLinhas = numeroLinhas;
                    }
                    else
                    {
                        ViewBag.NumeroLinhas = numeroLinhas;
                    }

                }
                else
                {
                    TempData["linhas"] = numeroLinhas;
                    TempData.Keep("linhas");
                    ViewBag.NumeroLinhas = numeroLinhas;

                }


            }
            else
            {
                if (TempData["linhas"] == null)
                {
                    TempData["linhas"] = 10;
                    TempData.Keep("linhas");
                    ViewBag.NumeroLinhas = 10;
                }
                else
                {
                    ViewBag.NumeroLinhas = TempData["linhas"];
                }
            }


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            //TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            //opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
            if (filtroNulo != null)
            {
                switch (filtroNulo)
                {
                    case "1":
                        TempData["opcao"] = "Iguais";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "2":
                        TempData["opcao"] = "Diferentes";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "3":
                        TempData["opcao"] = "Nulos Cliente";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "4":
                        TempData["opcao"] = "Nulos MTX";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "5":
                        TempData["opcao"] = "Nulos Ambos";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                   

                }
            }
            else
            {

                TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
                opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                                                                               //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
                TempData.Keep("opcao");
            }

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            //TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;

          

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();


            ViewBag.CstPisCofinsS = db.CstPisCofinsSaidas.ToList();


            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            //MUDA PARA SIMPLES NACIONAL NESTE PONTO
            if (this.empresa.simples_nacional.Equals(1))
            {
                return RedirectToAction("EdtCliCstSaidaPisCofinsMassaSN", new { opcao = opcao });

            }

            //VerificaTempData();
            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao

            /*Switch da opção*/
            switch (opcao)
            {
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS == a.CST_SAIDA_PISCOFINS_BASE && a.CST_SAIDA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS != a.CST_SAIDA_PISCOFINS_BASE && a.CST_SAIDA_PIS_COFINS != null && a.CST_SAIDA_PISCOFINS_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS == null && a.CST_SAIDA_PISCOFINS_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PISCOFINS_BASE == null && a.CST_SAIDA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS == null && a.CST_SAIDA_PISCOFINS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Diferentes":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS == a.CST_SAIDA_PISCOFINS_BASE && a.CST_SAIDA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS != a.CST_SAIDA_PISCOFINS_BASE && a.CST_SAIDA_PIS_COFINS != null && a.CST_SAIDA_PISCOFINS_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS == null && a.CST_SAIDA_PISCOFINS_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PISCOFINS_BASE == null && a.CST_SAIDA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS == null && a.CST_SAIDA_PISCOFINS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;



                    }
                    break;
                case "Nulos Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS == a.CST_SAIDA_PISCOFINS_BASE && a.CST_SAIDA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS != a.CST_SAIDA_PISCOFINS_BASE && a.CST_SAIDA_PIS_COFINS != null && a.CST_SAIDA_PISCOFINS_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS == null && a.CST_SAIDA_PISCOFINS_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PISCOFINS_BASE == null && a.CST_SAIDA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS == null && a.CST_SAIDA_PISCOFINS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulos MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS == a.CST_SAIDA_PISCOFINS_BASE && a.CST_SAIDA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS != a.CST_SAIDA_PISCOFINS_BASE && a.CST_SAIDA_PIS_COFINS != null && a.CST_SAIDA_PISCOFINS_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS == null && a.CST_SAIDA_PISCOFINS_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PISCOFINS_BASE == null && a.CST_SAIDA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS == null && a.CST_SAIDA_PISCOFINS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulos Ambos":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS == a.CST_SAIDA_PISCOFINS_BASE && a.CST_SAIDA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS != a.CST_SAIDA_PISCOFINS_BASE && a.CST_SAIDA_PIS_COFINS != null && a.CST_SAIDA_PISCOFINS_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS == null && a.CST_SAIDA_PISCOFINS_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PISCOFINS_BASE == null && a.CST_SAIDA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS == null && a.CST_SAIDA_PISCOFINS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;


            }//fim do switche

            //Action para procurar
            //analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);
            this.analise_NCM = ProcuraPorSnPorNCM(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analise_NCM);

            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analise_NCM = this.analise_NCM.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analise_NCM = this.analise_NCM.OrderBy(s => s.PRODUTO_NCM).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            //mandar a opção para que o javascript veja
            ViewBag.Opcao = opcao;
            int numeroPagina = (page ?? 1);

            return View(this.analise_NCM.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }


        [HttpGet]
        public ActionResult EdtCliCstSaidaPisCofinsMassaTODOS(string opcao)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            string ufOrigem = TempData["UfOrigem"].ToString();
            string ufDestino = TempData["UfDestino"].ToString();

            ViewBag.Tributacao = TempData["tributacao"].ToString();

            //VerificaTempDataSN();

            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao

            TributacaoEmpresa trib = new TributacaoEmpresa();

            if (opcao == "Cst Diferentes")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS != a.CST_SAIDA_PISCOFINS_BASE && a.CST_SAIDA_PIS_COFINS != null && a.CST_SAIDA_PISCOFINS_BASE != null && a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }
            if (opcao == "Cst Nulos no Cliente")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS == null && a.CST_SAIDA_PISCOFINS_BASE != null && a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }

            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            string resultado = ""; //variavel auxiliar;
            //pega todos os ID para serem alterados
            //this.analiseSn.Count()
            for (int i = 0; i < this.analise_NCM.Count(); i++)
            {

                //converter em inteiro
                int? idTrb = (this.analise_NCM[i].TE_ID);
                trib = db.TributacaoEmpresas.Find(idTrb);//busca o registro
                trib.CST_SAIDA_PIS_COFINS = this.analise_NCM[i].CST_SAIDA_PISCOFINS_BASE.ToString();
                trib.DT_ALTERACAO = DateTime.Now;
                try
                {

                    db.SaveChanges();
                    regSalv++; //contagem de registros salvos

                }
                catch (Exception e)
                {
                    resultado = "Problemas ao salvar o registro: " + e.ToString();
                    regNsalv++;
                }

            }
            resultado = "Registro Salvo com Sucesso!!";


            //TempData["analiseSN"] = null;
            TempData["analise_NCM"] = null;
            TempData.Keep("analise_NCM");
            //string[] idTrib = this.alanliseSN.
            //a analise vai me dar todos os ids


            return RedirectToAction("EdtCliCstSaidaPisCofinsMassa", new { param = resultado, qtdSalvos = regSalv });

        }


        /*Edição de CST de Pis Cofins de Saída*/
        [HttpGet]
        public ActionResult EdtCliCstSaidaPisCofinsMassaSN(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "CST de Saída para Pis Cofins no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se for simples nacional direciona para essa action
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["tributacao"] = "SIMPLES";
                TempData.Keep("tributacao");
            }
            else
            {
                TempData["tributacao"] = "OUTROS";
                TempData.Keep("tributacao");
            }


            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            //ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;
            if (numeroLinhas != null)
            {

                if (TempData["linhas"] != null)
                {
                    if (!numeroLinhas.Equals(int.Parse(TempData["linhas"].ToString())))
                    {
                        TempData["linhas"] = numeroLinhas;
                        TempData.Keep("linhas");
                        ViewBag.NumeroLinhas = numeroLinhas;
                    }
                    else
                    {
                        ViewBag.NumeroLinhas = numeroLinhas;
                    }

                }
                else
                {
                    TempData["linhas"] = numeroLinhas;
                    TempData.Keep("linhas");
                    ViewBag.NumeroLinhas = numeroLinhas;

                }


            }
            else
            {
                if (TempData["linhas"] == null)
                {
                    TempData["linhas"] = 10;
                    TempData.Keep("linhas");
                    ViewBag.NumeroLinhas = 10;
                }
                else
                {
                    ViewBag.NumeroLinhas = TempData["linhas"];
                }
            }


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            if (filtroNulo != null)
            {
                switch (filtroNulo)
                {
                    case "1":
                        TempData["opcao"] = "Iguais";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "2":
                        TempData["opcao"] = "Diferentes";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "3":
                        TempData["opcao"] = "Nulos Cliente";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "4":
                        TempData["opcao"] = "Nulos MTX";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "5":
                        TempData["opcao"] = "Nulos Ambos";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;

                }
            }
            else
            {

                TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
                opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                                                                               //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
                TempData.Keep("opcao");
            }

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;



            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();


         
            ViewBag.CstPisCofinsS = db.CstPisCofinsSaidas.AsNoTracking().OrderBy(s => s.descricao); ; //para montar a descrição da cst na view



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;


            ViewBag.Tributacao = TempData["tributacao"].ToString();

            //VerificaTempDataSN();

            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao

            /*Switch da opção*/
            switch (opcao)
            {
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS == a.CST_SAIDA_PISCOFINS_BASE && a.CST_SAIDA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS != a.CST_SAIDA_PISCOFINS_BASE && a.CST_SAIDA_PIS_COFINS != null  && a.CST_SAIDA_PISCOFINS_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS == null && a.CST_SAIDA_PISCOFINS_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PISCOFINS_BASE == null && a.CST_SAIDA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS == null && a.CST_SAIDA_PISCOFINS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Diferentes":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {


                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS == a.CST_SAIDA_PISCOFINS_BASE && a.CST_SAIDA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS != a.CST_SAIDA_PISCOFINS_BASE && a.CST_SAIDA_PIS_COFINS != null && a.CST_SAIDA_PISCOFINS_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS == null && a.CST_SAIDA_PISCOFINS_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PISCOFINS_BASE == null && a.CST_SAIDA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS == null && a.CST_SAIDA_PISCOFINS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;




                    }
                    break;
                case "Nulos Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {



                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS == a.CST_SAIDA_PISCOFINS_BASE && a.CST_SAIDA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS != a.CST_SAIDA_PISCOFINS_BASE && a.CST_SAIDA_PIS_COFINS != null && a.CST_SAIDA_PISCOFINS_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS == null && a.CST_SAIDA_PISCOFINS_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PISCOFINS_BASE == null && a.CST_SAIDA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS == null && a.CST_SAIDA_PISCOFINS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;




                    }
                    break;
                case "Nulos MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {


                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS == a.CST_SAIDA_PISCOFINS_BASE && a.CST_SAIDA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS != a.CST_SAIDA_PISCOFINS_BASE && a.CST_SAIDA_PIS_COFINS != null && a.CST_SAIDA_PISCOFINS_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS == null && a.CST_SAIDA_PISCOFINS_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PISCOFINS_BASE == null && a.CST_SAIDA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS == null && a.CST_SAIDA_PISCOFINS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulos Ambos":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {


                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS == a.CST_SAIDA_PISCOFINS_BASE && a.CST_SAIDA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS != a.CST_SAIDA_PISCOFINS_BASE && a.CST_SAIDA_PIS_COFINS != null && a.CST_SAIDA_PISCOFINS_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS == null && a.CST_SAIDA_PISCOFINS_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PISCOFINS_BASE == null && a.CST_SAIDA_PIS_COFINS != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS == null && a.CST_SAIDA_PISCOFINS_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;


            }//fim do switche

            //Action para procurar
            //Action para procurar
            //this.analiseSn = ProcuraPorSn(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analiseSn);
            this.analise_NCM = ProcuraPorSnPorNCM(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analise_NCM);

            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analise_NCM = this.analise_NCM.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analise_NCM = this.analise_NCM.OrderBy(s => s.PRODUTO_NCM).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            //mandar a opção para que o javascript veja
            ViewBag.Opcao = opcao;

            int numeroPagina = (page ?? 1);

            return View(this.analise_NCM.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }


        [HttpGet]
        public ActionResult EdtCliCstSaidaPisCofinsMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            this.empresa = (Empresa)Session["empresas"]; //se nao for nula basta carregar a empresa


            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();


            //Variaveis auxiliares
            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            string analiseRetorno = "0"; //atribui zero ao valor
            string analiseTrib = "0"; //atribui zero ao valor

           
            string ufOrigem = TempData["UfOrigem"].ToString();
            string ufDestino = TempData["UfDestino"].ToString();

            try
            {
                //laço de repetição para percorrer o array com os registros
                for (int i = 0; i < idTrib.Length; i++)
                {
                    //converter em inteiro
                    int idTrb = int.Parse(idTrib[i]);

                    //faz a busca no objeto criado instanciando um so objeto
                    trib = db.TributacaoEmpresas.Find(idTrb);
                    if (this.empresa.simples_nacional == 1)
                    {
                        AnaliseTributariaNCM analiseNCM = (from a in db.Analise_TributariaNCM where a.PRODUTO_NCM == trib.PRODUTO_NCM && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino && a.SIMP_NACIONAL_BASE == 1 select a).First();

                        analiseRetorno = (analiseNCM.CST_SAIDA_PISCOFINS_BASE == null) ? analiseRetorno : (analiseNCM.CST_SAIDA_PISCOFINS_BASE).ToString();
                        //verifica na analise qual o valor que esta no cliente, se estiver nulo,continua 0 se nao pega o valor que tem
                        analiseTrib = (analiseNCM.CST_SAIDA_PIS_COFINS == null) ? analiseTrib : (trib.CST_SAIDA_PIS_COFINS).ToString();

                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.CST_SAIDA_PIS_COFINS = null;
                            }
                            else
                            {
                               
                                trib.CST_SAIDA_PIS_COFINS = analiseNCM.CST_SAIDA_PISCOFINS_BASE.ToString();
                            }
                            trib.DT_ALTERACAO = DateTime.Now;
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos

                        }
                    }
                    else//se nao forem simples nacional
                    {
                        AnaliseTributariaNCM analiseNCM = (from a in db.Analise_TributariaNCM where a.PRODUTO_NCM == trib.PRODUTO_NCM && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino && a.SIMP_NACIONAL_BASE == 0 select a).First();
                        analiseRetorno = (analiseNCM.CST_SAIDA_PISCOFINS_BASE == null) ? analiseRetorno : (analiseNCM.CST_SAIDA_PISCOFINS_BASE).ToString();
                        analiseTrib = (analiseNCM.CST_SAIDA_PIS_COFINS == null) ? analiseTrib : (trib.CST_SAIDA_PIS_COFINS).ToString();
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.CST_SAIDA_PIS_COFINS = null;
                            }
                            else
                            {

                                trib.CST_SAIDA_PIS_COFINS = analiseNCM.CST_SAIDA_PISCOFINS_BASE.ToString();
                            }
                            trib.DT_ALTERACAO = DateTime.Now;
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos
                        }
                    }
                }
                if (this.empresa.simples_nacional.Equals(1))
                {
                    TempData["analiseSN"] = null;
                    TempData["analise_NCM"] = null;

                }
                else
                {
                    TempData["analise"] = null;
                    TempData["analise_NCM"] = null;
                }

                resultado = "Registro Salvo com Sucesso!!";


                //if (this.empresa.simples_nacional == 1)
                //{
                //    //laço de repetição para percorrer o array com os registros
                //    for (int i = 0; i < idTrib.Length; i++)
                //    {
                //        //converter em inteiro
                //        int idTrb = int.Parse(idTrib[i]);

                //        //faz a busca no objeto criado instanciando um so objeto
                //        trib = db.TributacaoEmpresas.Find(idTrb);

                //        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                //        AnaliseTributariaSn analiseSN = (from a in db.Analise_TributariaSn where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS && a.CNPJ_EMPRESA.Equals(this.empresa.cnpj) && a.ATIVO.Equals(1) select a).FirstOrDefault();

                //        //pegar valores
                //        /*Caso esteja nulo o retorno do valor a variavel continuar com 0 evitando erro de valores nulos*/
                //        analiseRetorno = (analiseSN.Cst_Saida_PisCofins_INTERNO == null) ? analiseRetorno : analiseSN.Cst_Saida_PisCofins_INTERNO;

                //        analiseTrib = (analiseSN.CST_SAIDA_PIS_COFINS == null) ? analiseTrib : int.Parse(trib.CST_SAIDA_PIS_COFINS);


                //        //analisar se já são iguais
                //        if (analiseTrib == analiseRetorno)
                //        {
                //            regNsalv++; //se são iguais não salva
                //        }
                //        else
                //        { //se são diferentes
                //            if (analiseRetorno == "0")
                //            {  //se o valor continnuar 0 atribui-se ao valor na base de dados nulo
                //                trib.CST_SAIDA_PIS_COFINS = null;
                //            }
                //            else
                //            {
                //                //caso contrario atribui o valor procurado na analise ao objeto instanciado
                //                trib.CST_SAIDA_PIS_COFINS = analiseSN.Cst_Saida_PisCofins_INTERNO.ToString();
                //            }

                //            db.SaveChanges();
                //            regSalv++; //contagem de registros salvos
                //        }


                //    }
                //    TempData["analiseSN"] = null;
                //    resultado = "Registro Salvo com Sucesso!!";

                //}
                //else
                //{
                //    //laço de repetição para percorrer o array com os registros
                //    for (int i = 0; i < idTrib.Length; i++)
                //    {
                //        //converter em inteiro
                //        int idTrb = int.Parse(idTrib[i]);

                //        //faz a busca no objeto criado instanciando um so objeto
                //        trib = db.TributacaoEmpresas.Find(idTrb);

                //        //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                //        AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

                //        //pegar valores
                //        /*Caso esteja nulo o retorno do valor a variavel continuar com 0 evitando erro de valores nulos*/
                //        analiseRetorno = (analise.Cst_Saida_PisCofins_INTERNO == null) ? analiseRetorno : analise.Cst_Saida_PisCofins_INTERNO;

                //        analiseTrib = (analise.CST_SAIDA_PIS_COFINS == null) ? analiseTrib : int.Parse(trib.CST_SAIDA_PIS_COFINS);


                //        //analisar se já são iguais
                //        if (analiseTrib == analiseRetorno)
                //        {
                //            regNsalv++; //se são iguais não salva
                //        }
                //        else
                //        { //se são diferentes
                //            if (analiseRetorno == 0)
                //            {  //se o valor continnuar 0 atribui-se ao valor na base de dados nulo
                //                trib.CST_SAIDA_PIS_COFINS = null;
                //            }
                //            else
                //            {
                //                //caso contrario atribui o valor procurado na analise ao objeto instanciado
                //                trib.CST_SAIDA_PIS_COFINS = analise.Cst_Saida_PisCofins_INTERNO.ToString();
                //            }

                //            db.SaveChanges();
                //            regSalv++; //contagem de registros salvos
                //        }


                //    }
                //    TempData["analise"] = null;
                //    resultado = "Registro Salvo com Sucesso!!";

                //}
                

                    

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();

            }

            //verifica novamente
            if (this.empresa.simples_nacional == 1)
            {
                //Redirecionar para a tela de graficos
                return RedirectToAction("EdtCliCstSaidaPisCofinsMassaSN", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });
            }
            else
            {
                //Redirecionar para a tela de graficos
                return RedirectToAction("EdtCliCstSaidaPisCofinsMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });
            }
        }

        
        [HttpGet]
        public ActionResult EdtCliCstSaidaPisCofinsMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();

            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }
            //montar dropdown list para as cst
            var cstEntrada = db.CstPisCofinsSaidas.Select(c => new
            {
                codigo = c.codigo,
                descricao = c.descricao


            }).ToList();

            ViewBag.CstSaidaPisCofins = new SelectList(cstEntrada, "descricao", "codigo");


            return View(trib);
        }

        
        [HttpGet]
        public ActionResult EdtCliCstSaidaPisCofinsMassaManualModalPost(string strDados, string cstSaiPisCofins)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //variavel auxiliar para receber o codigo do cst
            int? cstCodigo = 0;

            //pegar o codigo da cst
            cstCodigo = (cstSaiPisCofins == "") ? null : (int?)(long)(from a in db.CstPisCofinsSaidas where a.descricao == cstSaiPisCofins select a.codigo).FirstOrDefault();

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //variavel auxiliar para guardar o resultado
            string resultado = "";
            int regSalvos = 0;

            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();


            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.CST_SAIDA_PIS_COFINS = (cstCodigo.ToString() != "") ? trib.CST_SAIDA_PIS_COFINS = cstCodigo.ToString() : null;

                    db.SaveChanges();
                    regSalvos++;

                }

                TempData["analise"] = null; //recarrega a lista
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }


            //Redirecionar para a tela de graficos
            return RedirectToAction("EdtCliCstSaidaPisCofinsMassa", new { param = resultado, qtdSalvos = regSalvos });
        }


        //alteração de todos os itens
        [HttpGet]
        public ActionResult EdtCliCstSaidaPisCofinsMassaSNTODOS(string opcao)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            string ufOrigem = TempData["UfOrigem"].ToString();
            string ufDestino = TempData["UfDestino"].ToString();

            ViewBag.Tributacao = TempData["tributacao"].ToString();

            //VerificaTempDataSN();

            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao

            TributacaoEmpresa trib = new TributacaoEmpresa();

            if (opcao == "Cst Diferentes")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS != a.CST_SAIDA_PISCOFINS_BASE && a.CST_SAIDA_PIS_COFINS != null && a.CST_SAIDA_PISCOFINS_BASE != null && a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }
            if (opcao == "Cst Nulos no Cliente")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.CST_SAIDA_PIS_COFINS == null && a.CST_SAIDA_PISCOFINS_BASE != null && a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }

            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            string resultado = ""; //variavel auxiliar;
            //pega todos os ID para serem alterados
            //this.analiseSn.Count()
            for (int i = 0; i < this.analise_NCM.Count(); i++)
            {

                //converter em inteiro
                int? idTrb = (this.analise_NCM[i].TE_ID);
                trib = db.TributacaoEmpresas.Find(idTrb);//busca o registro
                trib.CST_SAIDA_PIS_COFINS = this.analise_NCM[i].CST_SAIDA_PISCOFINS_BASE.ToString();
                trib.DT_ALTERACAO = DateTime.Now;
                try
                {

                    db.SaveChanges();
                    regSalv++; //contagem de registros salvos

                }
                catch (Exception e)
                {
                    resultado = "Problemas ao salvar o registro: " + e.ToString();
                    regNsalv++;
                }

            }
            resultado = "Registro Salvo com Sucesso!!";


            //TempData["analiseSN"] = null;
            TempData["analise_NCM"] = null;
            TempData.Keep("analise_NCM");
            //string[] idTrib = this.alanliseSN.
            //a analise vai me dar todos os ids


            return RedirectToAction("EdtCliCstSaidaPisCofinsMassaSN", new { param = resultado, qtdSalvos = regSalv });


        }






        /*Edição de CST de Venda varejo para consumidor final*/
        [HttpGet]
        public ActionResult EdtCliCstVendaVarCFMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            

            //Mensagem do card
            ViewBag.Mensagem = "CST de Venda Varejo para Consumidor Final no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se for simples nacional direciona para essa action
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["tributacao"] = "SIMPLES";
                TempData.Keep("tributacao");
            }
            else
            {
                TempData["tributacao"] = "OUTROS";
                TempData.Keep("tributacao");
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            //ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;

          

            VerificarLinhas(numeroLinhas);




            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            ///*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            //TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            //opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            ////persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            //TempData.Keep("opcao");
            if (filtroNulo != null)
            {
                switch (filtroNulo)
                {
                    case "1":
                        TempData["opcao"] = "Iguais";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "2":
                        TempData["opcao"] = "Diferentes";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "3":
                        TempData["opcao"] = "Nulos Cliente";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "4":
                        TempData["opcao"] = "Nulos MTX";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "5":
                        TempData["opcao"] = "Nulos Ambos";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;


                }
            }
            else
            {

                TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
                opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                                                                               //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
                TempData.Keep("opcao");
            }
            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;


            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();


            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 
            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            ViewBag.CstGeral = db.CstIcmsGerais.ToList();


            //VerificaTempData();
            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao






            //MUDA PARA SIMPLES NACIONAL NESTE PONTO
            if (this.empresa.simples_nacional.Equals(1))
            {
                return RedirectToAction("EdtCliCstVendaVarCFMassaSN", new { opcao = opcao });

            }


            /*Switch da opção*/
            switch (opcao)
            {
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == a.CST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //DIFERENTES
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL != a.CST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //NULOS NO CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4": //NULOS NO MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULOS EM AMBOS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Diferentes":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == a.CST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //DIFERENTES
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL != a.CST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //NULOS NO CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4": //NULOS NO MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULOS EM AMBOS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;



                    }
                    break;
                case "Nulos Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {

                        case "1": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == a.CST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //DIFERENTES
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL != a.CST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //NULOS NO CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4": //NULOS NO MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULOS EM AMBOS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;





                    }
                    break;
                case "Nulos MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == a.CST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //DIFERENTES
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL != a.CST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //NULOS NO CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4": //NULOS NO MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULOS EM AMBOS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Nulos Ambos":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {
                        case "1": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == a.CST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //DIFERENTES
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL != a.CST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3": //NULOS NO CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4": //NULOS NO MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULOS EM AMBOS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;


            }//fim do switche

            //Action para procurar
            //analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);
            this.analise_NCM = ProcuraPorSnPorNCM(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analise_NCM);

            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analise_NCM = this.analise_NCM.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analise_NCM = this.analise_NCM.OrderBy(s => s.PRODUTO_NCM).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";
            //mandar a opção para que o javascript veja
            ViewBag.Opcao = opcao;
            int numeroPagina = (page ?? 1);

            return View(this.analise_NCM.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }



        /*Edição de CST de Venda varejo para consumidor final*/
        [HttpGet]
        public ActionResult EdtCliCstVendaVarCFMassaSN(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "CST de Venda Varejo para Consumidor Final no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }


            //se for simples nacional direciona para essa action
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["tributacao"] = "SIMPLES";
                TempData.Keep("tributacao");
            }
            else
            {
                TempData["tributacao"] = "OUTROS";
                TempData.Keep("tributacao");
            }
            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            // ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;
            if (numeroLinhas != null)
            {

                if (TempData["linhas"] != null)
                {
                    if (!numeroLinhas.Equals(int.Parse(TempData["linhas"].ToString())))
                    {
                        TempData["linhas"] = numeroLinhas;
                        TempData.Keep("linhas");
                        ViewBag.NumeroLinhas = numeroLinhas;
                    }
                    else
                    {
                        ViewBag.NumeroLinhas = numeroLinhas;
                    }

                }
                else
                {
                    TempData["linhas"] = numeroLinhas;
                    TempData.Keep("linhas");
                    ViewBag.NumeroLinhas = numeroLinhas;

                }
                
               
            }
            else
            {
                if (TempData["linhas"] == null)
                {
                    TempData["linhas"] = 10;
                    TempData.Keep("linhas");
                    ViewBag.NumeroLinhas = 10;
                }
                else
                {
                    ViewBag.NumeroLinhas = TempData["linhas"];
                }
            }


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");


            if (filtroNulo != null)
            {
                switch (filtroNulo)
                {
                    case "1":
                        TempData["opcao"] = "Iguais";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "2":
                        TempData["opcao"] = "Diferentes";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "3":
                        TempData["opcao"] = "Nulos Cliente";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "4":
                        TempData["opcao"] = "Nulos MTX";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "5":
                        TempData["opcao"] = "Nulos Ambos";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;

                }
            }
            else
            {

                TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
                opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                                                                               //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
                TempData.Keep("opcao");
            }






            ///*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            //TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            //opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;

          

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            ViewBag.Tributacao = TempData["tributacao"].ToString();

           // VerificaTempDataSN();

            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao


            /*Switch da opção*/
            switch (opcao)
            {
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        //case "1":
                        //    this.analiseSn = this.analiseSn.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == a.Cst_Venda_Varejo_Cons_Final_INTERNO && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                        //    break;
                        //case "2":
                        //    this.analiseSn = this.analiseSn.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL != a.Cst_Venda_Varejo_Cons_Final_INTERNO && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.Cst_Venda_Varejo_Cons_Final_INTERNO != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                        //    break;
                        //case "3":
                        //    this.analiseSn = this.analiseSn.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == null && a.Cst_Venda_Varejo_Cons_Final_INTERNO != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                        //    break;
                        //case "4":
                        //    this.analiseSn = this.analiseSn.Where(a => a.Cst_Venda_Varejo_Cons_Final_INTERNO == null && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                        //    break;
                        //case "5":
                        //    this.analiseSn = this.analiseSn.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == null && a.Cst_Venda_Varejo_Cons_Final_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                        //    break;
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == a.CST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL != a.CST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;



                    }
                    break;
                case "Diferentes":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        //case "1":
                        //    this.analiseSn = this.analiseSn.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == a.Cst_Venda_Varejo_Cons_Final_INTERNO && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                        //    break;
                        //case "2":
                        //    this.analiseSn = this.analiseSn.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL != a.Cst_Venda_Varejo_Cons_Final_INTERNO && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.Cst_Venda_Varejo_Cons_Final_INTERNO != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                        //    break;
                        //case "3":
                        //    this.analiseSn = this.analiseSn.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == null && a.Cst_Venda_Varejo_Cons_Final_INTERNO != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                        //    break;
                        //case "4":
                        //    this.analiseSn = this.analiseSn.Where(a => a.Cst_Venda_Varejo_Cons_Final_INTERNO == null && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                        //    break;
                        //case "5":
                        //    this.analiseSn = this.analiseSn.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == null && a.Cst_Venda_Varejo_Cons_Final_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                        //    break;
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == a.CST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL != a.CST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Nulos Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {

                        //case "1":
                        //    this.analiseSn = this.analiseSn.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == a.Cst_Venda_Varejo_Cons_Final_INTERNO && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                        //    break;
                        //case "2":
                        //    this.analiseSn = this.analiseSn.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL != a.Cst_Venda_Varejo_Cons_Final_INTERNO && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.Cst_Venda_Varejo_Cons_Final_INTERNO != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                        //    break;
                        //case "3":
                        //    this.analiseSn = this.analiseSn.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == null && a.Cst_Venda_Varejo_Cons_Final_INTERNO != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                        //    break;
                        //case "4":
                        //    this.analiseSn = this.analiseSn.Where(a => a.Cst_Venda_Varejo_Cons_Final_INTERNO == null && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                        //    break;
                        //case "5":
                        //    this.analiseSn = this.analiseSn.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == null && a.Cst_Venda_Varejo_Cons_Final_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                        //    break;
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == a.CST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL != a.CST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Nulos MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        //case "1":
                        //    this.analiseSn = this.analiseSn.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == a.Cst_Venda_Varejo_Cons_Final_INTERNO && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                        //    break;
                        //case "2":
                        //    this.analiseSn = this.analiseSn.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL != a.Cst_Venda_Varejo_Cons_Final_INTERNO && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.Cst_Venda_Varejo_Cons_Final_INTERNO != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                        //    break;
                        //case "3":
                        //    this.analiseSn = this.analiseSn.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == null && a.Cst_Venda_Varejo_Cons_Final_INTERNO != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                        //    break;
                        //case "4":
                        //    this.analiseSn = this.analiseSn.Where(a => a.Cst_Venda_Varejo_Cons_Final_INTERNO == null && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                        //    break;
                        //case "5":
                        //    this.analiseSn = this.analiseSn.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == null && a.Cst_Venda_Varejo_Cons_Final_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                        //    break;
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == a.CST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL != a.CST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulos Ambos":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {
                        //case "1":
                        //    this.analiseSn = this.analiseSn.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == a.Cst_Venda_Varejo_Cons_Final_INTERNO && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                        //    break;
                        //case "2":
                        //    this.analiseSn = this.analiseSn.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL != a.Cst_Venda_Varejo_Cons_Final_INTERNO && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.Cst_Venda_Varejo_Cons_Final_INTERNO != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                        //    break;
                        //case "3":
                        //    this.analiseSn = this.analiseSn.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == null && a.Cst_Venda_Varejo_Cons_Final_INTERNO != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                        //    break;
                        //case "4":
                        //    this.analiseSn = this.analiseSn.Where(a => a.Cst_Venda_Varejo_Cons_Final_INTERNO == null && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                        //    break;
                        //case "5":
                        //    this.analiseSn = this.analiseSn.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == null && a.Cst_Venda_Varejo_Cons_Final_INTERNO == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                        //    break;
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == a.CST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL != a.CST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;


            }//fim do switche

            //Action para procurar
            //this.analiseSn = ProcuraPorSn(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analiseSn);

            this.analise_NCM = ProcuraPorSnPorNCM(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analise_NCM);

            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analise_NCM = this.analise_NCM.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analise_NCM = this.analise_NCM.OrderBy(s => s.PRODUTO_NCM).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            
            ViewBag.CstGeral = db.CstIcmsGerais.AsNoTracking().OrderBy(s => s.descricao); ; //para montar a descrição da cst na view

            //mandar a opção para que o javascript veja
            ViewBag.Opcao = opcao;

            int numeroPagina = (page ?? 1);

            return View(this.analise_NCM.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }




        [HttpGet]
        public ActionResult EdtCliCstVendaVarCFMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            this.empresa = (Empresa)Session["empresas"]; //se nao for nula basta carregar a empresa

            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;


            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();

            //Variaveis auxiliares
            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            string analiseRetorno = "0"; //atribui zero ao valor
            string analiseTrib = "0"; //atribui zero ao valor

            string ufOrigem = TempData["UfOrigem"].ToString();
            string ufDestino = TempData["UfDestino"].ToString();



            //VerificaTempDataSN();

            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao

            try
            {
                //laço de repetição para percorrer o array com os registros
                for (int i = 0; i < idTrib.Length; i++)
                {
                    //converter em inteiro
                    int idTrb = int.Parse(idTrib[i]);

                    //faz a busca no objeto criado instanciando um so objeto
                    trib = db.TributacaoEmpresas.Find(idTrb);
                    if (this.empresa.simples_nacional == 1)
                    {
                        AnaliseTributariaNCM analiseNCM = (from a in db.Analise_TributariaNCM where a.PRODUTO_NCM == trib.PRODUTO_NCM && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino && a.SIMP_NACIONAL_BASE == 1 select a).First();
                        analiseRetorno = (analiseNCM.CST_VENDA_VAREJO_CONS_FINAL_BASE == null) ? analiseRetorno : (analiseNCM.CST_VENDA_VAREJO_CONS_FINAL_BASE).ToString();
                        //verifica na analise qual o valor que esta no cliente, se estiver nulo,continua 0 se nao pega o valor que tem
                        analiseTrib = (analiseNCM.CST_VENDA_VAREJO_CONS_FINAL == null) ? analiseTrib : (trib.CST_VENDA_VAREJO_CONS_FINAL).ToString();
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.CST_VENDA_VAREJO_CONS_FINAL = null;
                            }
                            else
                            {

                                trib.CST_VENDA_VAREJO_CONS_FINAL = analiseNCM.CST_VENDA_VAREJO_CONS_FINAL_BASE.ToString();
                            }
                            trib.DT_ALTERACAO = DateTime.Now;
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos
                        }
                    }
                    else
                    {
                        AnaliseTributariaNCM analiseNCM = (from a in db.Analise_TributariaNCM where a.PRODUTO_NCM == trib.PRODUTO_NCM && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino && a.SIMP_NACIONAL_BASE == 0 select a).First();
                        analiseRetorno = (analiseNCM.CST_VENDA_VAREJO_CONS_FINAL_BASE == null) ? analiseRetorno : (analiseNCM.CST_VENDA_VAREJO_CONS_FINAL_BASE).ToString();
                        //verifica na analise qual o valor que esta no cliente, se estiver nulo,continua 0 se nao pega o valor que tem
                        analiseTrib = (analiseNCM.CST_VENDA_VAREJO_CONS_FINAL == null) ? analiseTrib : (trib.CST_VENDA_VAREJO_CONS_FINAL).ToString();
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.CST_VENDA_VAREJO_CONS_FINAL = null;
                            }
                            else
                            {

                                trib.CST_VENDA_VAREJO_CONS_FINAL = analiseNCM.CST_VENDA_VAREJO_CONS_FINAL_BASE.ToString();
                            }
                            trib.DT_ALTERACAO = DateTime.Now;
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos
                        }
                    }//fim else simp nacional
                }
                if (this.empresa.simples_nacional.Equals(1))
                {
                    TempData["analiseSN"] = null;
                    TempData["analise_NCM"] = null;

                }
                else
                {
                    TempData["analise"] = null;
                    TempData["analise_NCM"] = null;
                }

                resultado = "Registro Salvo com Sucesso!!";
            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();

            }


            //verifica novamente
            if (this.empresa.simples_nacional == 1)
            {
                //Redirecionar para a tela de graficos
                return RedirectToAction("EdtCliCstVendaVarCFMassaSN", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });
            }
            else
            {
                //Redirecionar para a tela de graficos
                return RedirectToAction("EdtCliCstVendaVarCFMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });
            }

               
        }

        
        [HttpGet]
        public ActionResult EdtCliCstVendaVarCFMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();

            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }
            //montar dropdown list para as cst
            var cstVenda = db.CstIcmsGerais.Select(c => new
            {
                codigo = c.codigo,
                descricao = c.descricao


            }).ToList();

            ViewBag.CstVenda = new SelectList(cstVenda, "descricao", "codigo");


            return View(trib);
        }


        [HttpGet]
        public ActionResult EdtCliCstVendaVarCFMassaManualModalPost(string strDados, string cstVenVarCF)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //variavel auxiliar para receber o codigo do cst
            int? cstCodigo = 0;

            //pegar o codigo da cst
            cstCodigo = (cstVenVarCF == "") ? null : (int?)(long)(from a in db.CstIcmsGerais where a.descricao == cstVenVarCF select a.codigo).FirstOrDefault();

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //variavel auxiliar para guardar o resultado
            string resultado = "";
            int regSalvos = 0;

            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();


            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.CST_VENDA_VAREJO_CONS_FINAL = (cstCodigo.ToString() != "") ? trib.CST_VENDA_VAREJO_CONS_FINAL = cstCodigo.ToString() : null;

                    db.SaveChanges();
                    regSalvos++;

                }

                TempData["analise"] = null; //recarrega a lista
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }


            //Redirecionar para a tela de graficos
            return RedirectToAction("EdtCliCstVendaVarCFMassa", new { param = resultado, qtdSalvos = regSalvos });
        }

        //Editar todos os Registros
        [HttpGet]
        public ActionResult EdtCliCstVendaVarCFMassaSNTODOS(string opcao)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            string ufOrigem = TempData["UfOrigem"].ToString();
            string ufDestino = TempData["UfDestino"].ToString();


            ViewBag.Tributacao = TempData["tributacao"].ToString();

            //VerificaTempDataSN();

            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao


           
            TributacaoEmpresa trib = new TributacaoEmpresa();

            if(opcao == "Cst Diferentes")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL != a.CST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != null && a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }
            if (opcao == "Cst Nulos no Cliente")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != null && a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }
                       
            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            string resultado = ""; //variavel auxiliar;
            //pega todos os ID para serem alterados
            //this.analiseSn.Count()
            for (int i = 0; i < this.analise_NCM.Count(); i++)
            {
               
                //converter em inteiro
                int? idTrb = (this.analise_NCM[i].TE_ID);
                trib = db.TributacaoEmpresas.Find(idTrb);//busca o registro
                trib.CST_VENDA_VAREJO_CONS_FINAL = this.analise_NCM[i].CST_VENDA_VAREJO_CONS_FINAL_BASE.ToString();
                trib.DT_ALTERACAO = DateTime.Now;
                try
                {
                   
                    db.SaveChanges();
                    regSalv++; //contagem de registros salvos
                    //toda vez que salvar, gravar uma nova lista e mandar para action
                   
                    //EdtCliCstVendaVarCFMassaSNTODOSCONTAGEM(opcao);
                   

                }catch (Exception e)
                {
                    resultado = "Problemas ao salvar o registro: " + e.ToString();
                    regNsalv++;
                }

            }
            resultado = "Registro Salvo com Sucesso!!";

           
            //TempData["analiseSN"] = null;
            TempData["analise_NCM"] = null;
            TempData.Keep("analise_NCM");
            //string[] idTrib = this.alanliseSN.
            //a analise vai me dar todos os ids


            return RedirectToAction("EdtCliCstVendaVarCFMassaSN", new { param = resultado, qtdSalvos = regSalv });
           
        }
       


        //Editar todos os Registros
        [HttpGet]          
        public ActionResult EdtCliCstVendaVarCFMassaTODOS(string opcao)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            string ufOrigem = TempData["UfOrigem"].ToString();
            string ufDestino = TempData["UfDestino"].ToString();


            ViewBag.Tributacao = TempData["tributacao"].ToString();

            //VerificaTempDataSN();

            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao



            TributacaoEmpresa trib = new TributacaoEmpresa();

            if (opcao == "Cst Diferentes")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL != a.CST_VENDA_VAREJO_CONS_FINAL_BASE && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != null && a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }
            if (opcao == "Cst Nulos no Cliente")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == null && a.CST_VENDA_VAREJO_CONS_FINAL_BASE != null && a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }

            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            string resultado = ""; //variavel auxiliar;
            //pega todos os ID para serem alterados
            //this.analiseSn.Count()
            for (int i = 0; i < this.analise_NCM.Count(); i++)
            {

                //converter em inteiro
                int? idTrb = (this.analise_NCM[i].TE_ID);
                trib = db.TributacaoEmpresas.Find(idTrb);//busca o registro
                trib.CST_VENDA_VAREJO_CONS_FINAL = this.analise_NCM[i].CST_VENDA_VAREJO_CONS_FINAL_BASE.ToString();
                trib.DT_ALTERACAO = DateTime.Now;
                try
                {

                    db.SaveChanges();
                    regSalv++; //contagem de registros salvos
                               //toda vez que salvar, gravar uma nova lista e mandar para action

                    //EdtCliCstVendaVarCFMassaSNTODOSCONTAGEM(opcao);


                }
                catch (Exception e)
                {
                    resultado = "Problemas ao salvar o registro: " + e.ToString();
                    regNsalv++;
                }

            }
            resultado = "Registro Salvo com Sucesso!!";


            //TempData["analiseSN"] = null;
            TempData["analise_NCM"] = null;
            TempData.Keep("analise_NCM");
            //string[] idTrib = this.alanliseSN.
            //a analise vai me dar todos os ids


            return RedirectToAction("EdtCliCstVendaVarCFMassa", new { param = resultado, qtdSalvos = regSalv });

        }

        public int EdtCliCstVendaVarCFMassaSNTODOSCONTAGEM(string opcao)
        {
            List<AnaliseTributariaSn> analiseSnContagem = new List<AnaliseTributariaSn>();


            // analiseSnContagem = (from a in db.Analise_TributariaSn where a.CNPJ_EMPRESA.Equals("10.629.289/0001-66") select a).ToList();
            analiseSnContagem = db.Analise_TributariaSn.Where(x => x.CNPJ_EMPRESA.Equals("10.629.289/0001-66")).ToList();
            analiseSnContagem = analiseSnContagem.Where(a => a.ATIVO == 1).ToList();


            if (opcao == "Diferentes")
            {
                analiseSnContagem = analiseSnContagem.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL != a.Cst_Venda_Varejo_Cons_Final_INTERNO && a.CST_VENDA_VAREJO_CONS_FINAL != null && a.Cst_Venda_Varejo_Cons_Final_INTERNO != null && a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }

            if (opcao == "Nulos Cliente")
            {
                analiseSnContagem = analiseSnContagem.Where(a => a.CST_VENDA_VAREJO_CONS_FINAL == null && a.Cst_Venda_Varejo_Cons_Final_INTERNO != null && a.UF_ORIGEM.Equals("RO") && a.UF_DESTINO.Equals("RO")).ToList();

            }


            var contador = analiseSnContagem.Count();
            
            ViewBag.MandaRegistros = contador;
            return contador;
        }



        /*Edição de CST de Venda varejo para Contribuinte*/
        [HttpGet]
        public ActionResult EdtCliCstVendaVarContMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "CST de Venda Varejo para Contribuinte no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se for simples nacional direciona para essa action
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["tributacao"] = "SIMPLES";
                TempData.Keep("tributacao");
            }
            else
            {
                TempData["tributacao"] = "OUTROS";
                TempData.Keep("tributacao");
            }

            ViewBag.CstGeral = db.CstIcmsGerais.ToList();

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            //ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;
            VerificarLinhas(numeroLinhas);

            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            ///*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            //TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            //opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            ////persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            //TempData.Keep("opcao");
            if (filtroNulo != null)
            {
                switch (filtroNulo)
                {
                    case "1":
                        TempData["opcao"] = "Iguais";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "2":
                        TempData["opcao"] = "Diferentes";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "3":
                        TempData["opcao"] = "Nulos Cliente";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "4":
                        TempData["opcao"] = "Nulos MTX";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "5":
                        TempData["opcao"] = "Nulos Ambos";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;


                }
            }
            else
            {

                TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
                opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                                                                               //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
                TempData.Keep("opcao");
            }
            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;

            //condicional para simples nacional

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();


           //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;


            //MUDA PARA SIMPLES NACIONAL NESTE PONTO
            if (this.empresa.simples_nacional.Equals(1))
            {
                return RedirectToAction("EdtCliCstVendaVarContMassaSN", new { opcao = opcao });

            }

            //VerificaTempData();
            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao


            /*Switch da opção*/
            switch (opcao)
            {
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1"://IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT == a.CST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2"://DIFERENTES
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT != a.CST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3"://NULOS NO CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4": //NULOS NO MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULOS EM AMBOS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT == null && a.CST_VENDA_VAREJO_CONT_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Diferentes":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1"://IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT == a.CST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2"://DIFERENTES
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT != a.CST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3"://NULOS NO CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4": //NULOS NO MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULOS EM AMBOS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT == null && a.CST_VENDA_VAREJO_CONT_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;



                    }
                    break;
                case "Nulos Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {

                        case "1"://IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT == a.CST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2"://DIFERENTES
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT != a.CST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3"://NULOS NO CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4": //NULOS NO MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULOS EM AMBOS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT == null && a.CST_VENDA_VAREJO_CONT_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulos MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1"://IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT == a.CST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2"://DIFERENTES
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT != a.CST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3"://NULOS NO CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4": //NULOS NO MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULOS EM AMBOS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT == null && a.CST_VENDA_VAREJO_CONT_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulos Ambos":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1"://IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT == a.CST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2"://DIFERENTES
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT != a.CST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3"://NULOS NO CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4": //NULOS NO MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5": //NULOS EM AMBOS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT == null && a.CST_VENDA_VAREJO_CONT_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;


            }//fim do switche

            //Action para procurar
            //analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);
            this.analise_NCM = ProcuraPorSnPorNCM(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analise_NCM);


            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analise_NCM = this.analise_NCM.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analise_NCM = this.analise_NCM.OrderBy(s => s.PRODUTO_NCM).ToList();
                    break;
            }


            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            //mandar a opção para que o javascript veja
            ViewBag.Opcao = opcao;

            int numeroPagina = (page ?? 1);

            return View(this.analise_NCM.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }

        /*Bloco VENDA VAREJO PARA CONTRIBUINTE*/

        [HttpGet]
        public ActionResult EdtCliCstVendaVarContMassaSN(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "CST de Venda Varejo para Contribuinte no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }


            //se for simples nacional direciona para essa action
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["tributacao"] = "SIMPLES";
                TempData.Keep("tributacao");
            }
            else
            {
                TempData["tributacao"] = "OUTROS";
                TempData.Keep("tributacao");
            }


            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            //ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;
            if (numeroLinhas != null)
            {

                if (TempData["linhas"] != null)
                {
                    if (!numeroLinhas.Equals(int.Parse(TempData["linhas"].ToString())))
                    {
                        TempData["linhas"] = numeroLinhas;
                        TempData.Keep("linhas");
                        ViewBag.NumeroLinhas = numeroLinhas;
                    }
                    else
                    {
                        ViewBag.NumeroLinhas = numeroLinhas;
                    }

                }
                else
                {
                    TempData["linhas"] = numeroLinhas;
                    TempData.Keep("linhas");
                    ViewBag.NumeroLinhas = numeroLinhas;

                }


            }
            else
            {
                if (TempData["linhas"] == null)
                {
                    TempData["linhas"] = 10;
                    TempData.Keep("linhas");
                    ViewBag.NumeroLinhas = 10;
                }
                else
                {
                    ViewBag.NumeroLinhas = TempData["linhas"];
                }
            }






            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            if (filtroNulo != null)
            {
                switch (filtroNulo)
                {
                    case "1":
                        TempData["opcao"] = "Iguais";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "2":
                        TempData["opcao"] = "Diferentes";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "3":
                        TempData["opcao"] = "Nulos Cliente";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "4":
                        TempData["opcao"] = "Nulos MTX";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "5":
                        TempData["opcao"] = "Nulos Ambos";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;

                }
            }
            else
            {

                TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
                opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                                                                               //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
                TempData.Keep("opcao");
            }

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;

            //condicional para simples nacional




            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;



            ViewBag.Tributacao = TempData["tributacao"].ToString();

            //VerificaTempDataSN();

            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao

            /*Switch da opção*/
            switch (opcao)
            {
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT == a.CST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT != a.CST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT != null && a.CST_VENDA_VAREJO_CONT_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT == null && a.CST_VENDA_VAREJO_CONT_BASE != null  && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT == null && a.CST_VENDA_VAREJO_CONT_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;




                    }
                    break;
                case "Diferentes":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT == a.CST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT != a.CST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT != null && a.CST_VENDA_VAREJO_CONT_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT == null && a.CST_VENDA_VAREJO_CONT_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT == null && a.CST_VENDA_VAREJO_CONT_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Nulos Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT == a.CST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT != a.CST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT != null && a.CST_VENDA_VAREJO_CONT_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT == null && a.CST_VENDA_VAREJO_CONT_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT == null && a.CST_VENDA_VAREJO_CONT_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;





                    }
                    break;
                case "Nulos MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT == a.CST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT != a.CST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT != null && a.CST_VENDA_VAREJO_CONT_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT == null && a.CST_VENDA_VAREJO_CONT_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT == null && a.CST_VENDA_VAREJO_CONT_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;




                    }
                    break;
                case "Nulos Ambos":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT == a.CST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT != a.CST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT != null && a.CST_VENDA_VAREJO_CONT_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT == null && a.CST_VENDA_VAREJO_CONT_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT_BASE == null && a.CST_VENDA_VAREJO_CONT != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT == null && a.CST_VENDA_VAREJO_CONT_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;




                    }
                    break;

                   
            }//fim do switche
             //Action para procurar
            //this.analiseSn = ProcuraPorSn(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analiseSn);
            this.analise_NCM = ProcuraPorSnPorNCM(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analise_NCM);

            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analise_NCM = this.analise_NCM.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analise_NCM = this.analise_NCM.OrderBy(s => s.PRODUTO_NCM).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";


            //PEGAR CST PARA GERAR A DESCRIÇÃO DOS MESMOS NA VIEW
            ViewBag.CstGeral = db.CstIcmsGerais.AsNoTracking().OrderBy(s => s.descricao); ; //para montar a descrição da cst na view


            //opcao para o javascript
            ViewBag.Opcao = opcao;
            int numeroPagina = (page ?? 1);

            return View(this.analise_NCM.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada

        }
        [HttpGet]
        public ActionResult EdtCliCstVendaVarContMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            //pega a empresa da seção
            this.empresa = (Empresa)Session["empresas"]; //se nao for nula basta carregar a empresa


            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();


            //Variaveis auxiliares
            //Variaveis auxiliares
            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            string analiseRetorno = "0"; //atribui zero ao valor
            string analiseTrib = "0"; //atribui zero ao valor

            string ufOrigem = TempData["UfOrigem"].ToString();
            string ufDestino = TempData["UfDestino"].ToString();

            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao

            try
            {
                //laço de repetição para percorrer o array com os registros
                for (int i = 0; i < idTrib.Length; i++)
                {
                    //converter em inteiro
                    int idTrb = int.Parse(idTrib[i]);

                    //faz a busca no objeto criado instanciando um so objeto
                    trib = db.TributacaoEmpresas.Find(idTrb);
                    if (this.empresa.simples_nacional == 1)
                    {
                        AnaliseTributariaNCM analiseNCM = (from a in db.Analise_TributariaNCM where a.PRODUTO_NCM == trib.PRODUTO_NCM && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino && a.SIMP_NACIONAL_BASE == 1 select a).First();
                        analiseRetorno = (analiseNCM.CST_VENDA_VAREJO_CONT_BASE == null) ? analiseRetorno : (analiseNCM.CST_VENDA_VAREJO_CONT_BASE).ToString();
                        //verifica na analise qual o valor que esta no cliente, se estiver nulo,continua 0 se nao pega o valor que tem
                        analiseTrib = (analiseNCM.CST_VENDA_VAREJO_CONT == null) ? analiseTrib : (trib.CST_VENDA_VAREJO_CONT).ToString();
                                     

                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.CST_VENDA_VAREJO_CONT = null;
                            }
                            else
                            {

                                trib.CST_VENDA_VAREJO_CONT = analiseNCM.CST_VENDA_VAREJO_CONT_BASE.ToString();
                            }
                            trib.DT_ALTERACAO = DateTime.Now;
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos
                        }
                    }
                    else
                    {
                        AnaliseTributariaNCM analiseNCM = (from a in db.Analise_TributariaNCM where a.PRODUTO_NCM == trib.PRODUTO_NCM && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino && a.SIMP_NACIONAL_BASE == 0 select a).First();
                        analiseRetorno = (analiseNCM.CST_VENDA_VAREJO_CONT_BASE == null) ? analiseRetorno : (analiseNCM.CST_VENDA_VAREJO_CONT_BASE).ToString();
                        //verifica na analise qual o valor que esta no cliente, se estiver nulo,continua 0 se nao pega o valor que tem
                        analiseTrib = (analiseNCM.CST_VENDA_VAREJO_CONT == null) ? analiseTrib : (trib.CST_VENDA_VAREJO_CONT).ToString();

                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.CST_VENDA_VAREJO_CONT = null;
                            }
                            else
                            {

                                trib.CST_VENDA_VAREJO_CONT = analiseNCM.CST_VENDA_VAREJO_CONT_BASE.ToString();
                            }
                            trib.DT_ALTERACAO = DateTime.Now;
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos
                        }
                    }//fim else simp nacional
                }
                if (this.empresa.simples_nacional.Equals(1))
                {
                    TempData["analiseSN"] = null;
                    TempData["analise_NCM"] = null;

                }
                else
                {
                    TempData["analise"] = null;
                    TempData["analise_NCM"] = null;
                }

                resultado = "Registro Salvo com Sucesso!!";
            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();

            }

            //try
            //{
            //    //verifica se a empresa é simples nacional

            //    if (this.empresa.simples_nacional == 1)
            //    {
            //        //laço de repetição para percorrer o array com os registros
            //        for (int i = 0; i < idTrib.Length; i++)
            //        {
            //            //converter em inteiro
            //            int idTrb = int.Parse(idTrib[i]);

            //            //faz a busca no objeto criado instanciando um so objeto
            //            trib = db.TributacaoEmpresas.Find(idTrb);

            //            //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
            //            AnaliseTributariaSn analiseSN = (from a in db.Analise_TributariaSn where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS && a.CNPJ_EMPRESA.Equals(this.empresa.cnpj) && a.ATIVO.Equals(1) select a).FirstOrDefault();

            //            //pegar valores
            //            /*Caso esteja nulo o retorno do valor a variavel continuar com 0 evitando erro de valores nulos*/
            //            analiseRetorno = (analiseSN.Cst_Venda_Varejo_Cont_INTERNO == null) ? analiseRetorno : analiseSN.Cst_Venda_Varejo_Cont_INTERNO;

            //            analiseTrib = (analiseSN.CST_VENDA_VAREJO_CONT == null) ? analiseTrib : int.Parse(trib.CST_VENDA_VAREJO_CONT);


            //            //analisar se já são iguais
            //            if (analiseTrib == analiseRetorno)
            //            {
            //                regNsalv++; //se são iguais não salva
            //            }
            //            else
            //            { //se são diferentes
            //                if (analiseRetorno == 0)
            //                {  //se o valor continnuar 0 atribui-se ao valor na base de dados nulo
            //                    trib.CST_VENDA_VAREJO_CONT = null;
            //                }
            //                else
            //                {
            //                    //caso contrario atribui o valor procurado na analise ao objeto instanciado
            //                    trib.CST_VENDA_VAREJO_CONT = analiseSN.Cst_Venda_Varejo_Cont_INTERNO.ToString();
            //                }

            //                db.SaveChanges();
            //                regSalv++; //contagem de registros salvos
            //            }


            //        }
            //        TempData["analiseSN"] = null;
            //        resultado = "Registro Salvo com Sucesso!!";


            //    }
            //    else //se nao for simples nacional segue o fluxo normal
            //    {
            //        //laço de repetição para percorrer o array com os registros
            //        for (int i = 0; i < idTrib.Length; i++)
            //        {
            //            //converter em inteiro
            //            int idTrb = int.Parse(idTrib[i]);

            //            //faz a busca no objeto criado instanciando um so objeto
            //            trib = db.TributacaoEmpresas.Find(idTrb);

            //            //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
            //            AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

            //            //pegar valores
            //            /*Caso esteja nulo o retorno do valor a variavel continuar com 0 evitando erro de valores nulos*/
            //            analiseRetorno = (analise.Cst_Venda_Varejo_Cont_INTERNO == null) ? analiseRetorno : analise.Cst_Venda_Varejo_Cont_INTERNO;

            //            analiseTrib = (analise.CST_VENDA_VAREJO_CONT == null) ? analiseTrib : int.Parse(trib.CST_VENDA_VAREJO_CONT);


            //            //analisar se já são iguais
            //            if (analiseTrib == analiseRetorno)
            //            {
            //                regNsalv++; //se são iguais não salva
            //            }
            //            else
            //            { //se são diferentes
            //                if (analiseRetorno == 0)
            //                {  //se o valor continnuar 0 atribui-se ao valor na base de dados nulo
            //                    trib.CST_VENDA_VAREJO_CONT = null;
            //                }
            //                else
            //                {
            //                    //caso contrario atribui o valor procurado na analise ao objeto instanciado
            //                    trib.CST_VENDA_VAREJO_CONT = analise.Cst_Venda_Varejo_Cont_INTERNO.ToString();
            //                }

            //                db.SaveChanges();
            //                regSalv++; //contagem de registros salvos
            //            }


            //        }
            //        TempData["analise"] = null;
            //        resultado = "Registro Salvo com Sucesso!!";

            //    }



                   

            //}
            //catch (Exception e)
            //{
            //    resultado = "Problemas ao salvar o registro: " + e.ToString();

            //}


           
            //verifica novamente
            if (this.empresa.simples_nacional == 1)
            {
                //Redirecionar para a tela de graficos
                return RedirectToAction("EdtCliCstVendaVarContMassaSN", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });
            }
            else
            {
                //Redirecionar para a tela de graficos
                return RedirectToAction("EdtCliCstVendaVarCFMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });
            }
        }


        [HttpGet]
        public ActionResult EdtCliCstVendaVarContMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();

            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }
            //montar dropdown list para as cst
            var cstVenda = db.CstIcmsGerais.Select(c => new
            {
                codigo = c.codigo,
                descricao = c.descricao


            }).ToList();

            ViewBag.CstVenda = new SelectList(cstVenda, "descricao", "codigo");


            return View(trib);
        }


        [HttpGet]
        public ActionResult EdtCliCstVendaVarContMassaManualModalPost(string strDados, string cstVenVarCont)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //variavel auxiliar para receber o codigo do cst
            int? cstCodigo = 0;

            //pegar o codigo da cst
            cstCodigo = (cstVenVarCont == "") ? null : (int?)(long)(from a in db.CstIcmsGerais where a.descricao == cstVenVarCont select a.codigo).FirstOrDefault();

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //variavel auxiliar para guardar o resultado
            string resultado = "";
            int regSalvos = 0;

            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();


            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.CST_VENDA_VAREJO_CONT = (cstCodigo.ToString() != "") ? trib.CST_VENDA_VAREJO_CONT = cstCodigo.ToString() : null;

                    db.SaveChanges();
                    regSalvos++;

                }

                TempData["analise"] = null; //recarrega a lista
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }


            //Redirecionar para a tela de graficos
            return RedirectToAction("EdtCliCstVendaVarContMassa", new { param = resultado, qtdSalvos = regSalvos });
        }

        [HttpGet]
        public ActionResult EdtCliCstVendaVarContMassaSNTODOS(string opcao)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            string ufOrigem = TempData["UfOrigem"].ToString();
            string ufDestino = TempData["UfDestino"].ToString();

            ViewBag.Tributacao = TempData["tributacao"].ToString();

            //VerificaTempDataSN();

            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao

            TributacaoEmpresa trib = new TributacaoEmpresa();

            if (opcao == "Cst Diferentes")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT != a.CST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT != null && a.CST_VENDA_VAREJO_CONT_BASE != null && a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }
            if (opcao == "Cst Nulos no Cliente")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT == null && a.CST_VENDA_VAREJO_CONT_BASE != null && a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }

            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            string resultado = ""; //variavel auxiliar;
            //pega todos os ID para serem alterados
            //this.analiseSn.Count()
            for (int i = 0; i < this.analise_NCM.Count(); i++)
            {

                //converter em inteiro
                int? idTrb = (this.analise_NCM[i].TE_ID);
                trib = db.TributacaoEmpresas.Find(idTrb);//busca o registro
                trib.CST_VENDA_VAREJO_CONT = this.analise_NCM[i].CST_VENDA_VAREJO_CONT_BASE.ToString();
                trib.DT_ALTERACAO = DateTime.Now;

                try
                {

                    db.SaveChanges();
                    regSalv++; //contagem de registros salvos

                }
                catch (Exception e)
                {
                    resultado = "Problemas ao salvar o registro: " + e.ToString();
                    regNsalv++;
                }

            }
            resultado = "Registro Salvo com Sucesso!!";


            //TempData["analiseSN"] = null;
            TempData["analise_NCM"] = null;
            TempData.Keep("analise_NCM");
            //string[] idTrib = this.alanliseSN.
            //a analise vai me dar todos os ids


            return RedirectToAction("EdtCliCstVendaVarContMassaSN", new { param = resultado, qtdSalvos = regSalv });

        }

        

         [HttpGet]
        public ActionResult EdtCliCstVendaVarContMassaTODOS(string opcao)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            string ufOrigem = TempData["UfOrigem"].ToString();
            string ufDestino = TempData["UfDestino"].ToString();

            ViewBag.Tributacao = TempData["tributacao"].ToString();

            //VerificaTempDataSN();

            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao

            TributacaoEmpresa trib = new TributacaoEmpresa();

            if (opcao == "Cst Diferentes")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT != a.CST_VENDA_VAREJO_CONT_BASE && a.CST_VENDA_VAREJO_CONT != null && a.CST_VENDA_VAREJO_CONT_BASE != null && a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }
            if (opcao == "Cst Nulos no Cliente")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_VAREJO_CONT == null && a.CST_VENDA_VAREJO_CONT_BASE != null && a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }

            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            string resultado = ""; //variavel auxiliar;
            //pega todos os ID para serem alterados
            //this.analiseSn.Count()
            for (int i = 0; i < this.analise_NCM.Count(); i++)
            {

                //converter em inteiro
                int? idTrb = (this.analise_NCM[i].TE_ID);
                trib = db.TributacaoEmpresas.Find(idTrb);//busca o registro
                trib.CST_VENDA_VAREJO_CONT = this.analise_NCM[i].CST_VENDA_VAREJO_CONT_BASE.ToString();
                trib.DT_ALTERACAO = DateTime.Now;

                try
                {

                    db.SaveChanges();
                    regSalv++; //contagem de registros salvos

                }
                catch (Exception e)
                {
                    resultado = "Problemas ao salvar o registro: " + e.ToString();
                    regNsalv++;
                }

            }
            resultado = "Registro Salvo com Sucesso!!";


            //TempData["analiseSN"] = null;
            TempData["analise_NCM"] = null;
            TempData.Keep("analise_NCM");
            //string[] idTrib = this.alanliseSN.
            //a analise vai me dar todos os ids


            return RedirectToAction("EdtCliCstVendaVarContMassaSN", new { param = resultado, qtdSalvos = regSalv });

        }



        /*Edição de CST de Venda Atacado para Contribuinte*/
        [HttpGet]
        public ActionResult EdtCliCstVendaAtaContMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "CST de Venda Atacado para Contribuinte no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se for simples nacional direciona para essa action
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["tributacao"] = "SIMPLES";
                TempData.Keep("tributacao");
            }
            else
            {
                TempData["tributacao"] = "OUTROS";
                TempData.Keep("tributacao");
            }
            ViewBag.CstGeral = db.CstIcmsGerais.ToList();
            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            //ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;
            VerificarLinhas(numeroLinhas);


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            ///*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            //TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            //opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            ////persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            //TempData.Keep("opcao");

            VerificarOpcao(filtroNulo, opcao);
            opcao = TempData["opcao"].ToString();

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;


            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;



            //MUDA PARA SIMPLES NACIONAL NESTE PONTO
            if (this.empresa.simples_nacional.Equals(1))
            {
                return RedirectToAction("EdtCliCstVendaAtaContMassaSN", new { opcao = opcao });

            }

            //VerificaTempData();
            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao


            /*Switch da opção*/
            switch (opcao)
            {
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA == a.CST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //DIFERENTES
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA != a.CST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3"://NULOS NO CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA == null && a.CST_VENDA_ATA_CONT_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4"://NULOS NO MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5"://NULOS EM AMBOS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Diferentes":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA == a.CST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //DIFERENTES
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA != a.CST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3"://NULOS NO CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA == null && a.CST_VENDA_ATA_CONT_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4"://NULOS NO MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5"://NULOS EM AMBOS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;




                    }
                    break;
                case "Nulos Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {

                        case "1": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA == a.CST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //DIFERENTES
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA != a.CST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3"://NULOS NO CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA == null && a.CST_VENDA_ATA_CONT_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4"://NULOS NO MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5"://NULOS EM AMBOS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;




                    }
                    break;
                case "Nulos MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA == a.CST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //DIFERENTES
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA != a.CST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3"://NULOS NO CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA == null && a.CST_VENDA_ATA_CONT_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4"://NULOS NO MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5"://NULOS EM AMBOS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;




                    }
                    break;
                case "Nulos Ambos":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA == a.CST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2": //DIFERENTES
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA != a.CST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3"://NULOS NO CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA == null && a.CST_VENDA_ATA_CONT_BASE !=null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4"://NULOS NO MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5"://NULOS EM AMBOS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;




                    }
                    break;


            }//fim do switche

            //Action para procurar
            //analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);
            this.analise_NCM = ProcuraPorSnPorNCM(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analise_NCM);

            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analise_NCM = this.analise_NCM.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analise_NCM = this.analise_NCM.OrderBy(s => s.PRODUTO_NCM).ToList();
                    break;
            }
            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            //mandar a opção para que o javascript veja
            ViewBag.Opcao = opcao;

            int numeroPagina = (page ?? 1);

            return View(this.analise_NCM.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }

              

        /*Edição de CST de Venda Atacado para Contribuinte*/
        [HttpGet]
        public ActionResult EdtCliCstVendaAtaContMassaSN(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "CST de Venda Atacado para Contribuinte no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se for simples nacional direciona para essa action
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["tributacao"] = "SIMPLES";
                TempData.Keep("tributacao");
            }
            else
            {
                TempData["tributacao"] = "OUTROS";
                TempData.Keep("tributacao");
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            //ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;
            if (numeroLinhas != null)
            {

                if (TempData["linhas"] != null)
                {
                    if (!numeroLinhas.Equals(int.Parse(TempData["linhas"].ToString())))
                    {
                        TempData["linhas"] = numeroLinhas;
                        TempData.Keep("linhas");
                        ViewBag.NumeroLinhas = numeroLinhas;
                    }
                    else
                    {
                        ViewBag.NumeroLinhas = numeroLinhas;
                    }

                }
                else
                {
                    TempData["linhas"] = numeroLinhas;
                    TempData.Keep("linhas");
                    ViewBag.NumeroLinhas = numeroLinhas;

                }


            }
            else
            {
                if (TempData["linhas"] == null)
                {
                    TempData["linhas"] = 10;
                    TempData.Keep("linhas");
                    ViewBag.NumeroLinhas = 10;
                }
                else
                {
                    ViewBag.NumeroLinhas = TempData["linhas"];
                }
            }


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            if (filtroNulo != null)
            {
                switch (filtroNulo)
                {
                    case "1":
                        TempData["opcao"] = "Iguais";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "2":
                        TempData["opcao"] = "Diferentes";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "3":
                        TempData["opcao"] = "Nulos Cliente";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "4":
                        TempData["opcao"] = "Nulos MTX";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "5":
                        TempData["opcao"] = "Nulos Ambos";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;

                }
            }
            else
            {

                TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
                opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                                                                               //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
                TempData.Keep("opcao");
            }

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;


            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;




            ViewBag.Tributacao = TempData["tributacao"].ToString();

            //VerificaTempDataSN();

            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao


            /*Switch da opção*/
            switch (opcao)
            {
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA == a.CST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA != a.CST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Diferentes":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA == a.CST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA != a.CST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Nulos Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA == a.CST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA != a.CST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Nulos MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA == a.CST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA != a.CST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_CONT_BASE == null && a.CST_VENDA_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;


            }//fim do switche

            //Action para procurar
            //this.analiseSn = ProcuraPorSn(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analiseSn);
            this.analise_NCM = ProcuraPorSnPorNCM(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analise_NCM);

            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analise_NCM = this.analise_NCM.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analise_NCM = this.analise_NCM.OrderBy(s => s.PRODUTO_NCM).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            ViewBag.CstGeral = db.CstIcmsGerais.AsNoTracking().OrderBy(s => s.descricao); ; //para montar a descrição da cst na view



            //opcao para o javascript
            ViewBag.Opcao = opcao;

            int numeroPagina = (page ?? 1);

            return View(this.analise_NCM.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }



        [HttpGet]
        public ActionResult EdtCliCstVendaAtaContMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            this.empresa = (Empresa)Session["empresas"]; //se nao for nula basta carregar a empresa

            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();


            //Variaveis auxiliares
            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            string analiseRetorno = "0"; //atribui zero ao valor
            string analiseTrib = "0"; //atribui zero ao valor

            string ufOrigem = TempData["UfOrigem"].ToString();
            string ufDestino = TempData["UfDestino"].ToString();

            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao

            try
            {
                //laço de repetição para percorrer o array com os registros
                for (int i = 0; i < idTrib.Length; i++)
                {
                    //converter em inteiro
                    int idTrb = int.Parse(idTrib[i]);

                    //faz a busca no objeto criado instanciando um so objeto
                    trib = db.TributacaoEmpresas.Find(idTrb);
                    if (this.empresa.simples_nacional == 1)
                    {
                        AnaliseTributariaNCM analiseNCM = (from a in db.Analise_TributariaNCM where a.PRODUTO_NCM == trib.PRODUTO_NCM && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino && a.SIMP_NACIONAL_BASE == 1 select a).First();
                        analiseRetorno = (analiseNCM.CST_VENDA_ATA_CONT_BASE == null) ? analiseRetorno : (analiseNCM.CST_VENDA_ATA_CONT_BASE).ToString();
                        //verifica na analise qual o valor que esta no cliente, se estiver nulo,continua 0 se nao pega o valor que tem
                        analiseTrib = (analiseNCM.CST_VENDA_ATA == null) ? analiseTrib : (trib.CST_VENDA_ATA).ToString();
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.CST_VENDA_ATA = null;
                            }
                            else
                            {

                                trib.CST_VENDA_ATA = analiseNCM.CST_VENDA_ATA_CONT_BASE.ToString();
                            }
                            trib.DT_ALTERACAO = DateTime.Now;
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos
                        }
                    }
                    else
                    {
                        AnaliseTributariaNCM analiseNCM = (from a in db.Analise_TributariaNCM where a.PRODUTO_NCM == trib.PRODUTO_NCM && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino && a.SIMP_NACIONAL_BASE == 0 select a).First();
                        analiseRetorno = (analiseNCM.CST_VENDA_ATA_CONT_BASE == null) ? analiseRetorno : (analiseNCM.CST_VENDA_ATA_CONT_BASE).ToString();
                        //verifica na analise qual o valor que esta no cliente, se estiver nulo,continua 0 se nao pega o valor que tem
                        analiseTrib = (analiseNCM.CST_VENDA_ATA == null) ? analiseTrib : (trib.CST_VENDA_ATA).ToString();
                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.CST_VENDA_ATA = null;
                            }
                            else
                            {

                                trib.CST_VENDA_ATA = analiseNCM.CST_VENDA_ATA_CONT_BASE.ToString();
                            }
                            trib.DT_ALTERACAO = DateTime.Now;
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos
                        }
                    }//fim else simp nacional
                }
                if (this.empresa.simples_nacional.Equals(1))
                {
                    TempData["analiseSN"] = null;
                    TempData["analise_NCM"] = null;

                }
                else
                {
                    TempData["analise"] = null;
                    TempData["analise_NCM"] = null;
                }

                resultado = "Registro Salvo com Sucesso!!";
            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();

            }





            //try
            //{
            //    if (this.empresa.simples_nacional == 1)
            //    {
            //        //laço de repetição para percorrer o array com os registros
            //        for (int i = 0; i < idTrib.Length; i++)
            //        {
            //            //converter em inteiro
            //            int idTrb = int.Parse(idTrib[i]);

            //            //faz a busca no objeto criado instanciando um so objeto
            //            trib = db.TributacaoEmpresas.Find(idTrb);

            //            //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
            //            AnaliseTributariaSn analiseSN = (from a in db.Analise_TributariaSn where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS && a.CNPJ_EMPRESA.Equals(this.empresa.cnpj) && a.ATIVO.Equals(1) select a).FirstOrDefault();

            //            //pegar valores
            //            /*Caso esteja nulo o retorno do valor a variavel continuar com 0 evitando erro de valores nulos*/
            //            analiseRetorno = (analiseSN.Cst_Venda_Ata_Cont_INTERNO == null) ? analiseRetorno : analiseSN.Cst_Venda_Ata_Cont_INTERNO;

            //            analiseTrib = (analiseSN.CST_VENDA_ATA == null) ? analiseTrib : int.Parse(trib.CST_VENDA_ATA);


            //            //analisar se já são iguais
            //            if (analiseTrib == analiseRetorno)
            //            {
            //                regNsalv++; //se são iguais não salva
            //            }
            //            else
            //            { //se são diferentes
            //                if (analiseRetorno == 0)
            //                {  //se o valor continnuar 0 atribui-se ao valor na base de dados nulo
            //                    trib.CST_VENDA_ATA = null;
            //                }
            //                else
            //                {
            //                    //caso contrario atribui o valor procurado na analise ao objeto instanciado
            //                    trib.CST_VENDA_ATA = analiseSN.Cst_Venda_Ata_Cont_INTERNO.ToString();
            //                }

            //                db.SaveChanges();
            //                regSalv++; //contagem de registros salvos
            //            }


            //        }
            //        TempData["analiseSN"] = null;
            //        resultado = "Registro Salvo com Sucesso!!";

            //    }
            //    else
            //    {
            //        //laço de repetição para percorrer o array com os registros
            //        for (int i = 0; i < idTrib.Length; i++)
            //        {
            //            //converter em inteiro
            //            int idTrb = int.Parse(idTrib[i]);

            //            //faz a busca no objeto criado instanciando um so objeto
            //            trib = db.TributacaoEmpresas.Find(idTrb);

            //            //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
            //            AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

            //            //pegar valores
            //            /*Caso esteja nulo o retorno do valor a variavel continuar com 0 evitando erro de valores nulos*/
            //            analiseRetorno = (analise.Cst_Venda_Ata_Cont_INTERNO == null) ? analiseRetorno : analise.Cst_Venda_Ata_Cont_INTERNO;

            //            analiseTrib = (analise.CST_VENDA_ATA == null) ? analiseTrib : int.Parse(trib.CST_VENDA_ATA);


            //            //analisar se já são iguais
            //            if (analiseTrib == analiseRetorno)
            //            {
            //                regNsalv++; //se são iguais não salva
            //            }
            //            else
            //            { //se são diferentes
            //                if (analiseRetorno == 0)
            //                {  //se o valor continnuar 0 atribui-se ao valor na base de dados nulo
            //                    trib.CST_VENDA_ATA = null;
            //                }
            //                else
            //                {
            //                    //caso contrario atribui o valor procurado na analise ao objeto instanciado
            //                    trib.CST_VENDA_ATA = analise.Cst_Venda_Ata_Cont_INTERNO.ToString();
            //                }

            //                db.SaveChanges();
            //                regSalv++; //contagem de registros salvos
            //            }


            //        }
            //        TempData["analise"] = null;
            //        resultado = "Registro Salvo com Sucesso!!";

            //    }

                    

            //}
            //catch (Exception e)
            //{
            //    resultado = "Problemas ao salvar o registro: " + e.ToString();

            //}



            //verifica novamente
            if (this.empresa.simples_nacional == 1)
            {
                //Redirecionar para a tela de graficos
                return RedirectToAction("EdtCliCstVendaAtaContMassaSN", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });
            }
            else
            {
                //Redirecionar para a tela de graficos
                return RedirectToAction("EdtCliCstVendaAtaContMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });
            }
        }


        [HttpGet]
        public ActionResult EdtCliCstVendaAtaContMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();

            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }
            //montar dropdown list para as cst
            var cstVenda = db.CstIcmsGerais.Select(c => new
            {
                codigo = c.codigo,
                descricao = c.descricao


            }).ToList();

            ViewBag.CstVenda = new SelectList(cstVenda, "descricao", "codigo");


            return View(trib);
        }


        [HttpGet]
        public ActionResult EdtCliCstVendaAtaContMassaManualModalPost(string strDados, string cstVenAtaCont)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //variavel auxiliar para receber o codigo do cst
            int? cstCodigo = 0;

            //pegar o codigo da cst
            cstCodigo = (cstVenAtaCont == "") ? null : (int?)(long)(from a in db.CstIcmsGerais where a.descricao == cstVenAtaCont select a.codigo).FirstOrDefault();

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //variavel auxiliar para guardar o resultado
            string resultado = "";
            int regSalvos = 0;

            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();


            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.CST_VENDA_ATA = (cstCodigo.ToString() != "") ? trib.CST_VENDA_ATA = cstCodigo.ToString() : null;

                    db.SaveChanges();
                    regSalvos++;

                }

                TempData["analise"] = null; //recarrega a lista
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }


            //Redirecionar para a tela de graficos
            return RedirectToAction("EdtCliCstVendaAtaContMassa", new { param = resultado, qtdSalvos = regSalvos });
        }



        //alterar todos
        [HttpGet]
        public ActionResult EdtCliCstVendaAtaContMassaSNTODOS(string opcao)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            string ufOrigem = TempData["UfOrigem"].ToString();
            string ufDestino = TempData["UfDestino"].ToString();

            ViewBag.Tributacao = TempData["tributacao"].ToString();

            //VerificaTempDataSN();

            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao

            TributacaoEmpresa trib = new TributacaoEmpresa();

            if (opcao == "Cst Diferentes")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA != a.CST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE != null && a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }
            if (opcao == "Cst Nulos no Cliente")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA == null && a.CST_VENDA_ATA_CONT_BASE !=null &&  a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }

            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            string resultado = ""; //variavel auxiliar;
            //pega todos os ID para serem alterados
            //this.analiseSn.Count()
            for (int i = 0; i < this.analise_NCM.Count(); i++)
            {
                //converter em inteiro
                int? idTrb = (this.analise_NCM[i].TE_ID);
                trib = db.TributacaoEmpresas.Find(idTrb);//busca o registro
                trib.CST_VENDA_ATA = this.analise_NCM[i].CST_VENDA_ATA_CONT_BASE.ToString();
                trib.DT_ALTERACAO = DateTime.Now;

                try
                {

                    db.SaveChanges();
                    regSalv++; //contagem de registros salvos

                }
                catch (Exception e)
                {
                    resultado = "Problemas ao salvar o registro: " + e.ToString();
                    regNsalv++;
                }

            }
            resultado = "Registro Salvo com Sucesso!!";


            //TempData["analiseSN"] = null;
            TempData["analise_NCM"] = null;
            TempData.Keep("analise_NCM");
            //string[] idTrib = this.alanliseSN.
            //a analise vai me dar todos os ids


            return RedirectToAction("EdtCliCstVendaAtaContMassaSN", new { param = resultado, qtdSalvos = regSalv});
        }

 
        //alterar todos
        [HttpGet]
        public ActionResult EdtCliCstVendaAtaContMassaTODOS(string opcao)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            string ufOrigem = TempData["UfOrigem"].ToString();
            string ufDestino = TempData["UfDestino"].ToString();

            ViewBag.Tributacao = TempData["tributacao"].ToString();

            //VerificaTempDataSN();

            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao

            TributacaoEmpresa trib = new TributacaoEmpresa();

            if (opcao == "Cst Diferentes")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA != a.CST_VENDA_ATA_CONT_BASE && a.CST_VENDA_ATA != null && a.CST_VENDA_ATA_CONT_BASE != null && a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }
            if (opcao == "Cst Nulos no Cliente")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA == null && a.CST_VENDA_ATA_CONT_BASE != null && a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }

            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            string resultado = ""; //variavel auxiliar;
            //pega todos os ID para serem alterados
            //this.analiseSn.Count()
            for (int i = 0; i < this.analise_NCM.Count(); i++)
            {
                //converter em inteiro
                int? idTrb = (this.analise_NCM[i].TE_ID);
                trib = db.TributacaoEmpresas.Find(idTrb);//busca o registro
                trib.CST_VENDA_ATA = this.analise_NCM[i].CST_VENDA_ATA_CONT_BASE.ToString();
                trib.DT_ALTERACAO = DateTime.Now;

                try
                {

                    db.SaveChanges();
                    regSalv++; //contagem de registros salvos

                }
                catch (Exception e)
                {
                    resultado = "Problemas ao salvar o registro: " + e.ToString();
                    regNsalv++;
                }

            }
            resultado = "Registro Salvo com Sucesso!!";


            //TempData["analiseSN"] = null;
            TempData["analise_NCM"] = null;
            TempData.Keep("analise_NCM");
            //string[] idTrib = this.alanliseSN.
            //a analise vai me dar todos os ids


            return RedirectToAction("EdtCliCstVendaAtaContMassa", new { param = resultado, qtdSalvos = regSalv });
        }

        /*Edição de CST de Venda Atacado para Simples Nacional*/
        [HttpGet]
        public ActionResult EdtCliCstVendaAtaSNMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "CST de Venda Atacado para Simples Nacional no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se for simples nacional direciona para essa action
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["tributacao"] = "SIMPLES";
                TempData.Keep("tributacao");
            }
            else
            {
                TempData["tributacao"] = "OUTROS";
                TempData.Keep("tributacao");
            }

            ViewBag.CstGeral = db.CstIcmsGerais.ToList();

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            //ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;
            VerificarLinhas(numeroLinhas);

            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            ///*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            //TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            //opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            //TempData.Keep("opcao");

            VerificarOpcao(filtroNulo, opcao);
            opcao = TempData["opcao"].ToString();

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;

           

            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();


            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;


            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            //MUDA PARA SIMPLES NACIONAL NESTE PONTO
            if (this.empresa.simples_nacional.Equals(1))
            {
                return RedirectToAction("EdtCliCstVendaAtaSNMassaSN", new { opcao = opcao });

            }
            //VerificaTempData();
            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao


            /*Switch da opção*/
            switch (opcao)
            {
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL == a.CST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2"://DIFERENTES
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL != a.CST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3"://NULOS NO CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4"://NULOS NO MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5"://NULOS EM AMBOS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Diferentes":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL == a.CST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2"://DIFERENTES
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL != a.CST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3"://NULOS NO CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4"://NULOS NO MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5"://NULOS EM AMBOS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Nulos Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {

                        case "1": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL == a.CST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2"://DIFERENTES
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL != a.CST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3"://NULOS NO CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4"://NULOS NO MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5"://NULOS EM AMBOS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Nulos MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL == a.CST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2"://DIFERENTES
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL != a.CST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3"://NULOS NO CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4"://NULOS NO MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5"://NULOS EM AMBOS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Nulos Ambos":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1": //IGUAIS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL == a.CST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2"://DIFERENTES
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL != a.CST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3"://NULOS NO CLIENTE
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4"://NULOS NO MTX
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5"://NULOS EM AMBOS
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;



            }//fim do switche

            //Action para procurar
            //analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);
            this.analise_NCM = ProcuraPorSnPorNCM(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analise_NCM);


            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analise_NCM = this.analise_NCM.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analise_NCM = this.analise_NCM.OrderBy(s => s.PRODUTO_NCM).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            //mandar a opção para que o javascript veja
            ViewBag.Opcao = opcao;

            int numeroPagina = (page ?? 1);

            return View(this.analise_NCM.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }



        
        /*Edição de CST de Venda Atacado para Simples Nacional - DE SIMPLES NACIONAL*/
        [HttpGet]
        public ActionResult EdtCliCstVendaAtaSNMassaSN(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "CST de Venda Atacado para Simples Nacional no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se for simples nacional direciona para essa action
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["tributacao"] = "SIMPLES";
                TempData.Keep("tributacao");
            }
            else
            {
                TempData["tributacao"] = "OUTROS";
                TempData.Keep("tributacao");
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            //ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;
            if (numeroLinhas != null)
            {

                if (TempData["linhas"] != null)
                {
                    if (!numeroLinhas.Equals(int.Parse(TempData["linhas"].ToString())))
                    {
                        TempData["linhas"] = numeroLinhas;
                        TempData.Keep("linhas");
                        ViewBag.NumeroLinhas = numeroLinhas;
                    }
                    else
                    {
                        ViewBag.NumeroLinhas = numeroLinhas;
                    }

                }
                else
                {
                    TempData["linhas"] = numeroLinhas;
                    TempData.Keep("linhas");
                    ViewBag.NumeroLinhas = numeroLinhas;

                }


            }
            else
            {
                if (TempData["linhas"] == null)
                {
                    TempData["linhas"] = 10;
                    TempData.Keep("linhas");
                    ViewBag.NumeroLinhas = 10;
                }
                else
                {
                    ViewBag.NumeroLinhas = TempData["linhas"];
                }
            }



            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            if (filtroNulo != null)
            {
                switch (filtroNulo)
                {
                    case "1":
                        TempData["opcao"] = "Iguais";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "2":
                        TempData["opcao"] = "Diferentes";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "3":
                        TempData["opcao"] = "Nulos Cliente";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "4":
                        TempData["opcao"] = "Nulos MTX";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                    case "5":
                        TempData["opcao"] = "Nulos Ambos";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;

                }
            }
            else
            {

                TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
                opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                                                                               //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
                TempData.Keep("opcao");
            }

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;



            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;


            ViewBag.Tributacao = TempData["tributacao"].ToString();

            //VerificaTempDataSN();

            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao

            /*Switch da opção*/
            switch (opcao)
            {
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL == a.CST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL != a.CST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Diferentes":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL == a.CST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL != a.CST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulos Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL == a.CST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL != a.CST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;
                case "Nulos MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL == a.CST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL != a.CST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulos Ambos":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "5";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL == a.CST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL != a.CST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "5":
                            this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;


            }//fim do switche

            //Action para procurar
            //this.analiseSn = ProcuraPorSn(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analiseSn);
            this.analise_NCM = ProcuraPorSnPorNCM(codBarrasL, procuraPor, procuraCEST, procuraNCM, this.analise_NCM);
            switch (ordenacao)
            {
                case "Produto_desc":
                    this.analise_NCM = this.analise_NCM.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    this.analise_NCM = this.analise_NCM.OrderBy(s => s.PRODUTO_NCM).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";


            ViewBag.CstGeral = db.CstIcmsGerais.AsNoTracking().OrderBy(s => s.descricao); ; //para montar a descrição da cst na view
            
            //para o java script
            ViewBag.Opcao = opcao;

            int numeroPagina = (page ?? 1);

            return View(this.analise_NCM.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }


        [HttpGet]
        public ActionResult EdtCliCstVendaAtaSNMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //seleciona a empresa
            this.empresa = (Empresa)Session["empresas"]; //se nao for nula basta carregar a empresa


            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();


            //Variaveis auxiliares
            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            string analiseRetorno = "0"; //atribui zero ao valor
            string analiseTrib = "0"; //atribui zero ao valor

            string ufOrigem = TempData["UfOrigem"].ToString();
            string ufDestino = TempData["UfDestino"].ToString();

            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao


            try
            {
                //laço de repetição para percorrer o array com os registros
                for (int i = 0; i < idTrib.Length; i++)
                {
                    //converter em inteiro
                    int idTrb = int.Parse(idTrib[i]);

                    //faz a busca no objeto criado instanciando um so objeto
                    trib = db.TributacaoEmpresas.Find(idTrb);
                    if (this.empresa.simples_nacional == 1)
                    {
                        AnaliseTributariaNCM analiseNCM = (from a in db.Analise_TributariaNCM where a.PRODUTO_NCM == trib.PRODUTO_NCM && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino && a.SIMP_NACIONAL_BASE == 1 select a).First();
                        analiseRetorno = (analiseNCM.CST_VENDA_ATA_SIMP_NACIONAL_BASE == null) ? analiseRetorno : (analiseNCM.CST_VENDA_ATA_SIMP_NACIONAL_BASE).ToString();
                        //verifica na analise qual o valor que esta no cliente, se estiver nulo,continua 0 se nao pega o valor que tem
                        analiseTrib = (analiseNCM.CST_VENDA_ATA_SIMP_NACIONAL == null) ? analiseTrib : (trib.CST_VENDA_ATA_SIMP_NACIONAL).ToString();


                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.CST_VENDA_ATA_SIMP_NACIONAL = null;
                            }
                            else
                            {

                                trib.CST_VENDA_ATA_SIMP_NACIONAL = analiseNCM.CST_VENDA_ATA_SIMP_NACIONAL_BASE.ToString();
                            }
                            trib.DT_ALTERACAO = DateTime.Now;
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos
                        }
                    }
                    else
                    {
                        AnaliseTributariaNCM analiseNCM = (from a in db.Analise_TributariaNCM where a.PRODUTO_NCM == trib.PRODUTO_NCM && trib.CNPJ_EMPRESA == this.empresa.cnpj && a.UF_ORIGEM == ufOrigem && a.UF_DESTINO == ufDestino && a.SIMP_NACIONAL_BASE == 0 select a).First();
                        analiseRetorno = (analiseNCM.CST_VENDA_ATA_SIMP_NACIONAL_BASE == null) ? analiseRetorno : (analiseNCM.CST_VENDA_ATA_SIMP_NACIONAL_BASE).ToString();
                        //verifica na analise qual o valor que esta no cliente, se estiver nulo,continua 0 se nao pega o valor que tem
                        analiseTrib = (analiseNCM.CST_VENDA_ATA_SIMP_NACIONAL == null) ? analiseTrib : (trib.CST_VENDA_ATA_SIMP_NACIONAL).ToString();

                        if (analiseTrib == analiseRetorno)
                        {
                            regNsalv++;
                        }
                        else
                        {
                            //verificar se a variavel veio 0.0
                            if (analiseRetorno == "0")
                            {
                                //se veio 0.0 o valor deve ser atribuido nulo
                                trib.CST_VENDA_ATA_SIMP_NACIONAL = null;
                            }
                            else
                            {

                                trib.CST_VENDA_ATA_SIMP_NACIONAL = analiseNCM.CST_VENDA_ATA_SIMP_NACIONAL_BASE.ToString();
                            }
                            trib.DT_ALTERACAO = DateTime.Now;
                            db.SaveChanges();
                            regSalv++; //contagem de registros salvos
                        }
                    }//fim else simp nacional
                }
                if (this.empresa.simples_nacional.Equals(1))
                {
                    TempData["analiseSN"] = null;
                    TempData["analise_NCM"] = null;

                }
                else
                {
                    TempData["analise"] = null;
                    TempData["analise_NCM"] = null;
                }

                resultado = "Registro Salvo com Sucesso!!";
            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();

            }


            //try
            //{
            //    if (this.empresa.simples_nacional == 1)
            //    {
            //        //laço de repetição para percorrer o array com os registros
            //        for (int i = 0; i < idTrib.Length; i++)
            //        {
            //            //converter em inteiro
            //            int idTrb = int.Parse(idTrib[i]);

            //            //faz a busca no objeto criado instanciando um so objeto
            //            trib = db.TributacaoEmpresas.Find(idTrb);

            //            //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
            //            AnaliseTributariaSn analiseSN = (from a in db.Analise_TributariaSn where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS && a.CNPJ_EMPRESA.Equals(this.empresa.cnpj) && a.ATIVO.Equals(1) select a).FirstOrDefault();

            //            //pegar valores
            //            /*Caso esteja nulo o retorno do valor a variavel continuar com 0 evitando erro de valores nulos*/
            //            analiseRetorno = (analiseSN.Cst_Venda_Ata_Simp_Nacional_INTERNO == null) ? analiseRetorno : analiseSN.Cst_Venda_Ata_Simp_Nacional_INTERNO;

            //            analiseTrib = (analiseSN.CST_VENDA_ATA_SIMP_NACIONAL == null) ? analiseTrib : int.Parse(trib.CST_VENDA_ATA_SIMP_NACIONAL);


            //            //analisar se já são iguais
            //            if (analiseTrib == analiseRetorno)
            //            {
            //                regNsalv++; //se são iguais não salva
            //            }
            //            else
            //            { //se são diferentes
            //                if (analiseRetorno == 0)
            //                {  //se o valor continnuar 0 atribui-se ao valor na base de dados nulo
            //                    trib.CST_VENDA_ATA_SIMP_NACIONAL = null;
            //                }
            //                else
            //                {
            //                    //caso contrario atribui o valor procurado na analise ao objeto instanciado
            //                    trib.CST_VENDA_ATA_SIMP_NACIONAL = analiseSN.Cst_Venda_Ata_Simp_Nacional_INTERNO.ToString();
            //                }

            //                db.SaveChanges();
            //                regSalv++; //contagem de registros salvos
            //            }


            //        }
            //        TempData["analiseSN"] = null;
            //        resultado = "Registro Salvo com Sucesso!!";

            //    }
            //    else
            //    {
            //        //laço de repetição para percorrer o array com os registros
            //        for (int i = 0; i < idTrib.Length; i++)
            //        {
            //            //converter em inteiro
            //            int idTrb = int.Parse(idTrib[i]);

            //            //faz a busca no objeto criado instanciando um so objeto
            //            trib = db.TributacaoEmpresas.Find(idTrb);

            //            //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
            //            AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

            //            //pegar valores
            //            /*Caso esteja nulo o retorno do valor a variavel continuar com 0 evitando erro de valores nulos*/
            //            analiseRetorno = (analise.Cst_Venda_Ata_Simp_Nacional_INTERNO == null) ? analiseRetorno : analise.Cst_Venda_Ata_Simp_Nacional_INTERNO;

            //            analiseTrib = (analise.CST_VENDA_ATA_SIMP_NACIONAL == null) ? analiseTrib : int.Parse(trib.CST_VENDA_ATA_SIMP_NACIONAL);


            //            //analisar se já são iguais
            //            if (analiseTrib == analiseRetorno)
            //            {
            //                regNsalv++; //se são iguais não salva
            //            }
            //            else
            //            { //se são diferentes
            //                if (analiseRetorno == 0)
            //                {  //se o valor continnuar 0 atribui-se ao valor na base de dados nulo
            //                    trib.CST_VENDA_ATA_SIMP_NACIONAL = null;
            //                }
            //                else
            //                {
            //                    //caso contrario atribui o valor procurado na analise ao objeto instanciado
            //                    trib.CST_VENDA_ATA_SIMP_NACIONAL = analise.Cst_Venda_Ata_Simp_Nacional_INTERNO.ToString();
            //                }

            //                db.SaveChanges();
            //                regSalv++; //contagem de registros salvos
            //            }


            //        }
            //        TempData["analise"] = null;
            //        resultado = "Registro Salvo com Sucesso!!";

            //    }

                    

            //}
            //catch (Exception e)
            //{
            //    resultado = "Problemas ao salvar o registro: " + e.ToString();

            //}


           
            //verifica novamente
            if (this.empresa.simples_nacional == 1)
            {
                //Redirecionar para a tela de graficos
                return RedirectToAction("EdtCliCstVendaAtaSNMassaSN", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });
            }
            else
            {
                //Redirecionar para a tela de graficos
                return RedirectToAction("EdtCliCstVendaAtaSNMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });
            }

        }


        [HttpGet]
        public ActionResult EdtCliCstVendaAtaSNMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();

            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }
            //montar dropdown list para as cst
            var cstVenda = db.CstIcmsGerais.Select(c => new
            {
                codigo = c.codigo,
                descricao = c.descricao


            }).ToList();

            ViewBag.CstVenda = new SelectList(cstVenda, "descricao", "codigo");

           


            return View(trib);
        }


        [HttpGet]
        public ActionResult EdtCliCstVendaAtaSNMassaManualModalPost(string strDados, string cstVenAtaSN)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //variavel auxiliar para receber o codigo do cst
            int? cstCodigo = 0;

            //pegar o codigo da cst
            cstCodigo = (cstVenAtaSN == "") ? null : (int?)(long)(from a in db.CstIcmsGerais where a.descricao == cstVenAtaSN select a.codigo).FirstOrDefault();

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //variavel auxiliar para guardar o resultado
            string resultado = "";
            int regSalvos = 0;

            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();


            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.CST_VENDA_ATA_SIMP_NACIONAL = (cstCodigo.ToString() != "") ? trib.CST_VENDA_ATA_SIMP_NACIONAL = cstCodigo.ToString() : null;

                    db.SaveChanges();
                    regSalvos++;

                }

                TempData["analise"] = null; //recarrega a lista
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }


            //Redirecionar para a tela de graficos
            return RedirectToAction("EdtCliCstVendaAtaSNMassa", new { param = resultado, qtdSalvos = regSalvos });
        }

        //Alteração de todos os itens
        [HttpGet]
        public ActionResult EdtCliCstVendaAtaSNMassaSNTODOS(string opcao)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            string ufOrigem = TempData["UfOrigem"].ToString();
            string ufDestino = TempData["UfDestino"].ToString();

            ViewBag.Tributacao = TempData["tributacao"].ToString();

            //VerificaTempDataSN();

            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao

            TributacaoEmpresa trib = new TributacaoEmpresa();

            if (opcao == "Cst Diferentes")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL != a.CST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }
            if (opcao == "Cst Nulos no Cliente")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }

            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            string resultado = ""; //variavel auxiliar;
            //pega todos os ID para serem alterados
            //this.analiseSn.Count()
            for (int i = 0; i < this.analise_NCM.Count(); i++)
            {

                //converter em inteiro
                int? idTrb = (this.analise_NCM[i].TE_ID);
                trib = db.TributacaoEmpresas.Find(idTrb);//busca o registro
                trib.CST_VENDA_ATA_SIMP_NACIONAL = this.analise_NCM[i].CST_VENDA_ATA_SIMP_NACIONAL_BASE.ToString();
                trib.DT_ALTERACAO = DateTime.Now;
                try
                {

                    db.SaveChanges();
                    regSalv++; //contagem de registros salvos

                }
                catch (Exception e)
                {
                    resultado = "Problemas ao salvar o registro: " + e.ToString();
                    regNsalv++;
                }

            }
            resultado = "Registro Salvo com Sucesso!!";


            //TempData["analiseSN"] = null;
            TempData["analise_NCM"] = null;
            TempData.Keep("analise_NCM");
            //string[] idTrib = this.alanliseSN.
            //a analise vai me dar todos os ids


            return RedirectToAction("EdtCliCstVendaAtaSNMassaSN", new { param = resultado, qtdSalvos = regSalv });

        }


        
        //Alteração de todos os itens
        [HttpGet]
        public ActionResult EdtCliCstVendaAtaSNMassaTODOS(string opcao)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            string ufOrigem = TempData["UfOrigem"].ToString();
            string ufDestino = TempData["UfDestino"].ToString();

            ViewBag.Tributacao = TempData["tributacao"].ToString();

            //VerificaTempDataSN();

            VerificaTempData_por_NCM(TempData["tributacao"].ToString()); //manda verificar passando a tributacao

            TributacaoEmpresa trib = new TributacaoEmpresa();

            if (opcao == "Cst Diferentes")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL != a.CST_VENDA_ATA_SIMP_NACIONAL_BASE && a.CST_VENDA_ATA_SIMP_NACIONAL != null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }
            if (opcao == "Cst Nulos no Cliente")
            {
                this.analise_NCM = this.analise_NCM.Where(a => a.CST_VENDA_ATA_SIMP_NACIONAL == null && a.CST_VENDA_ATA_SIMP_NACIONAL_BASE != null && a.UF_ORIGEM.Equals(ufOrigem) && a.UF_DESTINO.Equals(ufDestino)).ToList();

            }

            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            string resultado = ""; //variavel auxiliar;
            //pega todos os ID para serem alterados
            //this.analiseSn.Count()
            for (int i = 0; i < this.analise_NCM.Count(); i++)
            {

                //converter em inteiro
                int? idTrb = (this.analise_NCM[i].TE_ID);
                trib = db.TributacaoEmpresas.Find(idTrb);//busca o registro
                trib.CST_VENDA_ATA_SIMP_NACIONAL = this.analise_NCM[i].CST_VENDA_ATA_SIMP_NACIONAL_BASE.ToString();
                trib.DT_ALTERACAO = DateTime.Now;
                try
                {

                    db.SaveChanges();
                    regSalv++; //contagem de registros salvos

                }
                catch (Exception e)
                {
                    resultado = "Problemas ao salvar o registro: " + e.ToString();
                    regNsalv++;
                }

            }
            resultado = "Registro Salvo com Sucesso!!";


            //TempData["analiseSN"] = null;
            TempData["analise_NCM"] = null;
            TempData.Keep("analise_NCM");
            //string[] idTrib = this.alanliseSN.
            //a analise vai me dar todos os ids


            return RedirectToAction("EdtCliCstVendaAtaSNMassa", new { param = resultado, qtdSalvos = regSalv });

        }

        /*Edição de CST de Compra de Indústria*/
        [HttpGet]
        public ActionResult EdtCliCstCompIndMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "CST de Compra de Indústria no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;

            VerificaTempData();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            /*Switch da opção*/
            switch (opcao)
            {
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            analise = analise.Where(a => a.CST_COMPRA_DE_IND == a.Cst_Compra_de_Ind_INTERNO && a.CST_COMPRA_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.CST_COMPRA_DE_IND != a.Cst_Compra_de_Ind_INTERNO && a.CST_COMPRA_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.CST_COMPRA_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.Cst_Compra_de_Ind_INTERNO == null && a.CST_COMPRA_DE_IND != null).ToList();
                            break;

                    }
                    break;
                case "Diferentes":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            analise = analise.Where(a => a.CST_COMPRA_DE_IND == a.Cst_Compra_de_Ind_INTERNO && a.CST_COMPRA_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.CST_COMPRA_DE_IND != a.Cst_Compra_de_Ind_INTERNO && a.CST_COMPRA_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.CST_COMPRA_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.Cst_Compra_de_Ind_INTERNO == null && a.CST_COMPRA_DE_IND != null).ToList();
                            break;

                    }
                    break;
                case "Nulos Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {


                        case "1":
                            analise = analise.Where(a => a.CST_COMPRA_DE_IND == a.Cst_Compra_de_Ind_INTERNO && a.CST_COMPRA_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.CST_COMPRA_DE_IND != a.Cst_Compra_de_Ind_INTERNO && a.CST_COMPRA_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.CST_COMPRA_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.Cst_Compra_de_Ind_INTERNO == null && a.CST_COMPRA_DE_IND != null).ToList();
                            break;

                    }
                    break;
                case "Nulos MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            analise = analise.Where(a => a.CST_COMPRA_DE_IND == a.Cst_Compra_de_Ind_INTERNO && a.CST_COMPRA_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.CST_COMPRA_DE_IND != a.Cst_Compra_de_Ind_INTERNO && a.CST_COMPRA_DE_IND != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.CST_COMPRA_DE_IND == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.Cst_Compra_de_Ind_INTERNO == null && a.CST_COMPRA_DE_IND != null).ToList();
                            break;

                    }
                    break;


            }//fim do switche

            //Action para procurar
            analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);

            switch (ordenacao)
            {
                case "Produto_desc":
                    analise = analise.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    analise = analise.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            int numeroPagina = (page ?? 1);

            return View(analise.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }

        [HttpGet]
        public ActionResult EdtCliCstCompIndMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();


            //Variaveis auxiliares
            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            int? analiseRetorno = 0; //atribui zero ao valor
            int? analiseTrib = 0; //atribui zero ao valor
            try
            {

                //laço de repetição para percorrer o array com os registros
                for (int i = 0; i < idTrib.Length; i++)
                {
                    //converter em inteiro
                    int idTrb = int.Parse(idTrib[i]);

                    //faz a busca no objeto criado instanciando um so objeto
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                    AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

                    //pegar valores
                    /*Caso esteja nulo o retorno do valor a variavel continuar com 0 evitando erro de valores nulos*/
                    analiseRetorno = (analise.Cst_Compra_de_Ind_INTERNO == null) ? analiseRetorno : analise.Cst_Compra_de_Ind_INTERNO;

                    analiseTrib = (analise.CST_COMPRA_DE_IND == null) ? analiseTrib : int.Parse(trib.CST_COMPRA_DE_IND);


                    //analisar se já são iguais
                    if (analiseTrib == analiseRetorno)
                    {
                        regNsalv++; //se são iguais não salva
                    }
                    else
                    { //se são diferentes
                        if (analiseRetorno == 0)
                        {  //se o valor continnuar 0 atribui-se ao valor na base de dados nulo
                            trib.CST_COMPRA_DE_IND = null;
                        }
                        else
                        {
                            //caso contrario atribui o valor procurado na analise ao objeto instanciado
                            trib.CST_COMPRA_DE_IND = analise.Cst_Compra_de_Ind_INTERNO.ToString();
                        }

                        db.SaveChanges();
                        regSalv++; //contagem de registros salvos
                    }


                }
                TempData["analise"] = null;
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();

            }


            //Redirecionar para a tela de graficos
            return RedirectToAction("EdtCliCstCompIndMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });
        }


        [HttpGet]
        public ActionResult EdtCliCstCompIndMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();

            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }
            //montar dropdown list para as cst
            var cstCompra = db.CstIcmsGerais.Select(c => new
            {
                codigo = c.codigo,
                descricao = c.descricao


            }).ToList();

            ViewBag.CstCompra = new SelectList(cstCompra, "descricao", "codigo");

            //Mostrar descrição da cst
            var cstCompraDesc = (from d in db.CstIcmsGerais where d.codigo != 0 select d).ToList();
            ViewBag.CstCompraDesc = cstCompraDesc;


            return View(trib);
        }


        [HttpGet]
        public ActionResult EdtCliCstCompIndMassaManualModalPost(string strDados, string cstCompInd)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //variavel auxiliar para receber o codigo do cst
            int? cstCodigo = 0;

            //pegar o codigo da cst
            cstCodigo = (cstCompInd == "") ? null : (int?)(long)(from a in db.CstIcmsGerais where a.descricao == cstCompInd select a.codigo).FirstOrDefault();

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //variavel auxiliar para guardar o resultado
            string resultado = "";
            int regSalvos = 0;

            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();


            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.CST_COMPRA_DE_IND = (cstCodigo.ToString() != "") ? trib.CST_COMPRA_DE_IND = cstCodigo.ToString() : null;

                    db.SaveChanges();
                    regSalvos++;

                }

                TempData["analise"] = null; //recarrega a lista
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }


            //Redirecionar para a tela de graficos
            return RedirectToAction("EdtCliCstCompIndMassa", new { param = resultado, qtdSalvos = regSalvos });
        }

        
        /*Edição de CST de Compra de Indústria*/
        [HttpGet]
        public ActionResult EdtCliCstCompSNMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "CST de Compra de Simples Nacional no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;

            VerificaTempData();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            /*Switch da opção*/
            switch (opcao)
            {
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            analise = analise.Where(a => a.CST_COMPRA_DE_SIMP_NACIONAL == a.Cst_Compra_de_Simp_Nacional_INTERNO && a.CST_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.CST_COMPRA_DE_SIMP_NACIONAL != a.Cst_Compra_de_Simp_Nacional_INTERNO && a.CST_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.CST_COMPRA_DE_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.Cst_Compra_de_Simp_Nacional_INTERNO == null && a.CST_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Diferentes":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.CST_COMPRA_DE_SIMP_NACIONAL == a.Cst_Compra_de_Simp_Nacional_INTERNO && a.CST_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.CST_COMPRA_DE_SIMP_NACIONAL != a.Cst_Compra_de_Simp_Nacional_INTERNO && a.CST_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.CST_COMPRA_DE_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.Cst_Compra_de_Simp_Nacional_INTERNO == null && a.CST_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulos Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            analise = analise.Where(a => a.CST_COMPRA_DE_SIMP_NACIONAL == a.Cst_Compra_de_Simp_Nacional_INTERNO && a.CST_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.CST_COMPRA_DE_SIMP_NACIONAL != a.Cst_Compra_de_Simp_Nacional_INTERNO && a.CST_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.CST_COMPRA_DE_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.Cst_Compra_de_Simp_Nacional_INTERNO == null && a.CST_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulos MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.CST_COMPRA_DE_SIMP_NACIONAL == a.Cst_Compra_de_Simp_Nacional_INTERNO && a.CST_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.CST_COMPRA_DE_SIMP_NACIONAL != a.Cst_Compra_de_Simp_Nacional_INTERNO && a.CST_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.CST_COMPRA_DE_SIMP_NACIONAL == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.Cst_Compra_de_Simp_Nacional_INTERNO == null && a.CST_COMPRA_DE_SIMP_NACIONAL != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                    }
                    break;


            }//fim do switche

            //Action para procurar
            analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);

            switch (ordenacao)
            {
                case "Produto_desc":
                    analise = analise.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    analise = analise.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            int numeroPagina = (page ?? 1);

            return View(analise.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }

        [HttpGet]
        public ActionResult EdtCliCstCompSNMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();


            //Variaveis auxiliares
            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            int? analiseRetorno = 0; //atribui zero ao valor
            int? analiseTrib = 0; //atribui zero ao valor
            try
            {

                //laço de repetição para percorrer o array com os registros
                for (int i = 0; i < idTrib.Length; i++)
                {
                    //converter em inteiro
                    int idTrb = int.Parse(idTrib[i]);

                    //faz a busca no objeto criado instanciando um so objeto
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                    AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

                    //pegar valores
                    /*Caso esteja nulo o retorno do valor a variavel continuar com 0 evitando erro de valores nulos*/
                    analiseRetorno = (analise.Cst_Compra_de_Simp_Nacional_INTERNO == null) ? analiseRetorno : analise.Cst_Compra_de_Simp_Nacional_INTERNO;

                    analiseTrib = (analise.CST_COMPRA_DE_SIMP_NACIONAL == null) ? analiseTrib : int.Parse(trib.CST_COMPRA_DE_SIMP_NACIONAL);


                    //analisar se já são iguais
                    if (analiseTrib == analiseRetorno)
                    {
                        regNsalv++; //se são iguais não salva
                    }
                    else
                    { //se são diferentes
                        if (analiseRetorno == 0)
                        {  //se o valor continnuar 0 atribui-se ao valor na base de dados nulo
                            trib.CST_COMPRA_DE_SIMP_NACIONAL = null;
                        }
                        else
                        {
                            //caso contrario atribui o valor procurado na analise ao objeto instanciado
                            trib.CST_COMPRA_DE_SIMP_NACIONAL = analise.Cst_Compra_de_Simp_Nacional_INTERNO.ToString();
                        }

                        db.SaveChanges();
                        regSalv++; //contagem de registros salvos
                    }


                }
                TempData["analise"] = null;
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();

            }


            //Redirecionar para a tela de graficos
            return RedirectToAction("EdtCliCstCompSNMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });
        }


        [HttpGet]
        public ActionResult EdtCliCstCompSNMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();

            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }
            //montar dropdown list para as cst
            var cstCompra = db.CstIcmsGerais.Select(c => new
            {
                codigo = c.codigo,
                descricao = c.descricao


            }).ToList();

            ViewBag.CstCompra = new SelectList(cstCompra, "descricao", "codigo");
            //Mostrar descrição da cst
            var cstCompraDesc = (from d in db.CstIcmsGerais where d.codigo != 0 select d).ToList();
            ViewBag.CstCompraDesc = cstCompraDesc;


            return View(trib);
        }


        [HttpGet]
        public ActionResult EdtCliCstCompSNMassaManualModalPost(string strDados, string cstCompSN)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //variavel auxiliar para receber o codigo do cst
            int? cstCodigo = 0;

            //pegar o codigo da cst
            cstCodigo = (cstCompSN == "") ? null : (int?)(long)(from a in db.CstIcmsGerais where a.descricao == cstCompSN select a.codigo).FirstOrDefault();

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //variavel auxiliar para guardar o resultado
            string resultado = "";
            int regSalvos = 0;

            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();


            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.CST_COMPRA_DE_SIMP_NACIONAL = (cstCodigo.ToString() != "") ? trib.CST_COMPRA_DE_SIMP_NACIONAL = cstCodigo.ToString() : null;

                    db.SaveChanges();
                    regSalvos++;

                }

                TempData["analise"] = null; //recarrega a lista
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }


            //Redirecionar para a tela de graficos
            return RedirectToAction("EdtCliCstCompSNMassa", new { param = resultado, qtdSalvos = regSalvos });
        }


       
        /*Edição de CST de Compra de Atacado*/
        [HttpGet]
        public ActionResult EdtCliCstCompAtaMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "CST de Compra de Atacado no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;

            VerificaTempData();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            /*Switch da opção*/
            switch (opcao)
            {
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            analise = analise.Where(a => a.CST_COMPRA_DE_ATA == a.Cst_Compra_de_Ata_INTERNO && a.CST_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.CST_COMPRA_DE_ATA != a.Cst_Compra_de_Ata_INTERNO && a.CST_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.CST_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.Cst_Compra_de_Ata_INTERNO == null && a.CST_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Diferentes":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.CST_COMPRA_DE_ATA == a.Cst_Compra_de_Ata_INTERNO && a.CST_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.CST_COMPRA_DE_ATA != a.Cst_Compra_de_Ata_INTERNO && a.CST_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.CST_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.Cst_Compra_de_Ata_INTERNO == null && a.CST_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Nulos Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            analise = analise.Where(a => a.CST_COMPRA_DE_ATA == a.Cst_Compra_de_Ata_INTERNO && a.CST_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.CST_COMPRA_DE_ATA != a.Cst_Compra_de_Ata_INTERNO && a.CST_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.CST_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.Cst_Compra_de_Ata_INTERNO == null && a.CST_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Nulos MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.CST_COMPRA_DE_ATA == a.Cst_Compra_de_Ata_INTERNO && a.CST_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.CST_COMPRA_DE_ATA != a.Cst_Compra_de_Ata_INTERNO && a.CST_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.CST_COMPRA_DE_ATA == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.Cst_Compra_de_Ata_INTERNO == null && a.CST_COMPRA_DE_ATA != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;


            }//fim do switche

            //Action para procurar
            analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);

            switch (ordenacao)
            {
                case "Produto_desc":
                    analise = analise.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    analise = analise.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            int numeroPagina = (page ?? 1);

            return View(analise.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }

        [HttpGet]
        public ActionResult EdtCliCstCompAtaMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();


            //Variaveis auxiliares
            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            int? analiseRetorno = 0; //atribui zero ao valor
            int? analiseTrib = 0; //atribui zero ao valor
            try
            {

                //laço de repetição para percorrer o array com os registros
                for (int i = 0; i < idTrib.Length; i++)
                {
                    //converter em inteiro
                    int idTrb = int.Parse(idTrib[i]);

                    //faz a busca no objeto criado instanciando um so objeto
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                    AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

                    //pegar valores
                    /*Caso esteja nulo o retorno do valor a variavel continuar com 0 evitando erro de valores nulos*/
                    analiseRetorno = (analise.Cst_Compra_de_Ata_INTERNO == null) ? analiseRetorno : analise.Cst_Compra_de_Ata_INTERNO;

                    analiseTrib = (analise.CST_COMPRA_DE_ATA == null) ? analiseTrib : int.Parse(trib.CST_COMPRA_DE_ATA);


                    //analisar se já são iguais
                    if (analiseTrib == analiseRetorno)
                    {
                        regNsalv++; //se são iguais não salva
                    }
                    else
                    { //se são diferentes
                        if (analiseRetorno == 0)
                        {  //se o valor continnuar 0 atribui-se ao valor na base de dados nulo
                            trib.CST_COMPRA_DE_ATA = null;
                        }
                        else
                        {
                            //caso contrario atribui o valor procurado na analise ao objeto instanciado
                            trib.CST_COMPRA_DE_ATA = analise.Cst_Compra_de_Ata_INTERNO.ToString();
                        }

                        db.SaveChanges();
                        regSalv++; //contagem de registros salvos
                    }


                }
                TempData["analise"] = null;
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();

            }


            //Redirecionar para a tela de graficos
            return RedirectToAction("EdtCliCstCompAtaMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });
        }


        [HttpGet]
        public ActionResult EdtCliCstCompAtaMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();

            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }
            //montar dropdown list para as cst
            var cstCompra = db.CstIcmsGerais.Select(c => new
            {
                codigo = c.codigo,
                descricao = c.descricao


            }).ToList();

            ViewBag.CstCompra = new SelectList(cstCompra, "descricao", "codigo");

            //Mostrar descrição da cst
            var cstCompraDesc = (from d in db.CstIcmsGerais where d.codigo != 0 select d).ToList();
            ViewBag.CstCompraDesc = cstCompraDesc;

            return View(trib);
        }


        [HttpGet]
        public ActionResult EdtCliCstCompAtaMassaManualModalPost(string strDados, string cstCompAta)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //variavel auxiliar para receber o codigo do cst
            int? cstCodigo = 0;

            //pegar o codigo da cst
            cstCodigo = (cstCompAta == "") ? null : (int?)(long)(from a in db.CstIcmsGerais where a.descricao == cstCompAta select a.codigo).FirstOrDefault();

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //variavel auxiliar para guardar o resultado
            string resultado = "";
            int regSalvos = 0;

            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();


            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.CST_COMPRA_DE_ATA = (cstCodigo.ToString() != "") ? trib.CST_COMPRA_DE_ATA = cstCodigo.ToString() : null;

                    db.SaveChanges();
                    regSalvos++;

                }

                TempData["analise"] = null; //recarrega a lista
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }


            //Redirecionar para a tela de graficos
            return RedirectToAction("EdtCliCstCompAtaMassa", new { param = resultado, qtdSalvos = regSalvos });
        }




     
        /*Edição de CST compra com NFE de Indústria*/
        [HttpGet]
        public ActionResult EdtCliCstNfeIndMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "CST de NFE compra de Industria no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;

            VerificaTempData();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            /*Switch da opção*/
            switch (opcao)
            {
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            analise = analise.Where(a => a.CST_DA_NFE_DA_IND_FORN == a.Cst_da_Nfe_da_Ind_FORN_INTERNO && a.CST_DA_NFE_DA_IND_FORN != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.CST_DA_NFE_DA_IND_FORN != a.Cst_da_Nfe_da_Ind_FORN_INTERNO && a.CST_DA_NFE_DA_IND_FORN != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.CST_DA_NFE_DA_IND_FORN == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.Cst_da_Nfe_da_Ind_FORN_INTERNO == null && a.CST_DA_NFE_DA_IND_FORN != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Diferentes":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.CST_DA_NFE_DA_IND_FORN == a.Cst_da_Nfe_da_Ind_FORN_INTERNO && a.CST_DA_NFE_DA_IND_FORN != null).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.CST_DA_NFE_DA_IND_FORN != a.Cst_da_Nfe_da_Ind_FORN_INTERNO && a.CST_DA_NFE_DA_IND_FORN != null).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.CST_DA_NFE_DA_IND_FORN == null).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.Cst_da_Nfe_da_Ind_FORN_INTERNO == null && a.CST_DA_NFE_DA_IND_FORN != null).ToList();
                            break;

                    }
                    break;
                case "Nulos Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            analise = analise.Where(a => a.CST_DA_NFE_DA_IND_FORN == a.Cst_da_Nfe_da_Ind_FORN_INTERNO && a.CST_DA_NFE_DA_IND_FORN != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.CST_DA_NFE_DA_IND_FORN != a.Cst_da_Nfe_da_Ind_FORN_INTERNO && a.CST_DA_NFE_DA_IND_FORN != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.CST_DA_NFE_DA_IND_FORN == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.Cst_da_Nfe_da_Ind_FORN_INTERNO == null && a.CST_DA_NFE_DA_IND_FORN != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulos MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.CST_DA_NFE_DA_IND_FORN == a.Cst_da_Nfe_da_Ind_FORN_INTERNO && a.CST_DA_NFE_DA_IND_FORN != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.CST_DA_NFE_DA_IND_FORN != a.Cst_da_Nfe_da_Ind_FORN_INTERNO && a.CST_DA_NFE_DA_IND_FORN != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.CST_DA_NFE_DA_IND_FORN == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.Cst_da_Nfe_da_Ind_FORN_INTERNO == null && a.CST_DA_NFE_DA_IND_FORN != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;


            }//fim do switche

            //Action para procurar
            analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);

            switch (ordenacao)
            {
                case "Produto_desc":
                    analise = analise.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    analise = analise.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            int numeroPagina = (page ?? 1);

            return View(analise.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }

        [HttpGet]
        public ActionResult EdtCliCstNfeIndMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();


            //Variaveis auxiliares
            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            int? analiseRetorno = 0; //atribui zero ao valor
            int? analiseTrib = 0; //atribui zero ao valor
            try
            {

                //laço de repetição para percorrer o array com os registros
                for (int i = 0; i < idTrib.Length; i++)
                {
                    //converter em inteiro
                    int idTrb = int.Parse(idTrib[i]);

                    //faz a busca no objeto criado instanciando um so objeto
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                    AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

                    //pegar valores
                    /*Caso esteja nulo o retorno do valor a variavel continuar com 0 evitando erro de valores nulos*/
                    analiseRetorno = (analise.Cst_da_Nfe_da_Ind_FORN_INTERNO == null) ? analiseRetorno : analise.Cst_da_Nfe_da_Ind_FORN_INTERNO;

                    analiseTrib = (analise.CST_DA_NFE_DA_IND_FORN == null) ? analiseTrib : int.Parse(trib.CST_DA_NFE_DA_IND_FORN);


                    //analisar se já são iguais
                    if (analiseTrib == analiseRetorno)
                    {
                        regNsalv++; //se são iguais não salva
                    }
                    else
                    { //se são diferentes
                        if (analiseRetorno == 0)
                        {  //se o valor continnuar 0 atribui-se ao valor na base de dados nulo
                            trib.CST_DA_NFE_DA_IND_FORN = null;
                        }
                        else
                        {
                            //caso contrario atribui o valor procurado na analise ao objeto instanciado
                            trib.CST_DA_NFE_DA_IND_FORN = analise.Cst_da_Nfe_da_Ind_FORN_INTERNO.ToString();
                        }

                        db.SaveChanges();
                        regSalv++; //contagem de registros salvos
                    }


                }
                TempData["analise"] = null;
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();

            }


            //Redirecionar para a tela de graficos
            return RedirectToAction("EdtCliCstNfeIndMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });
        }


        [HttpGet]
        public ActionResult EdtCliCstNfeIndMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();

            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }
            //montar dropdown list para as cst
            var cstCompra = db.CstIcmsGerais.Select(c => new
            {
                codigo = c.codigo,
                descricao = c.descricao


            }).ToList();

            ViewBag.CstCompra = new SelectList(cstCompra, "descricao", "codigo");

            //Mostrar descrição da cst
            var cstCompraDesc = (from d in db.CstIcmsGerais where d.codigo != 0 select d).ToList();
            ViewBag.CstCompraDesc = cstCompraDesc;

            return View(trib);
        }


        [HttpGet]
        public ActionResult EdtCliCstNfeIndMassaManualModalPost(string strDados, string cstNfeInd)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //variavel auxiliar para receber o codigo do cst
            int? cstCodigo = 0;

            //pegar o codigo da cst
            cstCodigo = (cstNfeInd == "") ? null : (int?)(long)(from a in db.CstIcmsGerais where a.descricao == cstNfeInd select a.codigo).FirstOrDefault();

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //variavel auxiliar para guardar o resultado
            string resultado = "";
            int regSalvos = 0;

            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();


            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.CST_DA_NFE_DA_IND_FORN = (cstCodigo.ToString() != "") ? trib.CST_DA_NFE_DA_IND_FORN = cstCodigo.ToString() : null;

                    db.SaveChanges();
                    regSalvos++;

                }

                TempData["analise"] = null; //recarrega a lista
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }


            //Redirecionar para a tela de graficos
            return RedirectToAction("EdtCliCstNfeIndMassa", new { param = resultado, qtdSalvos = regSalvos });
        }


        
        /*Edição de CST compra com NFE de Atacado*/
        [HttpGet]
        public ActionResult EdtCliCstNfeAtaMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "CST de NFE compra de Atacado no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;

            VerificaTempData();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            /*Switch da opção*/
            switch (opcao)
            {
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            analise = analise.Where(a => a.CST_DA_NFE_DE_ATA_FORN == a.Cst_da_Nfe_de_Ata_FORn_INTERNO && a.CST_DA_NFE_DE_ATA_FORN != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.CST_DA_NFE_DE_ATA_FORN != a.Cst_da_Nfe_de_Ata_FORn_INTERNO && a.CST_DA_NFE_DE_ATA_FORN != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.CST_DA_NFE_DE_ATA_FORN == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.Cst_da_Nfe_de_Ata_FORn_INTERNO == null && a.CST_DA_NFE_DE_ATA_FORN != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Diferentes":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.CST_DA_NFE_DE_ATA_FORN == a.Cst_da_Nfe_de_Ata_FORn_INTERNO && a.CST_DA_NFE_DE_ATA_FORN != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.CST_DA_NFE_DE_ATA_FORN != a.Cst_da_Nfe_de_Ata_FORn_INTERNO && a.CST_DA_NFE_DE_ATA_FORN != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.CST_DA_NFE_DE_ATA_FORN == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.Cst_da_Nfe_de_Ata_FORn_INTERNO == null && a.CST_DA_NFE_DE_ATA_FORN != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Nulos Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            analise = analise.Where(a => a.CST_DA_NFE_DE_ATA_FORN == a.Cst_da_Nfe_de_Ata_FORn_INTERNO && a.CST_DA_NFE_DE_ATA_FORN != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.CST_DA_NFE_DE_ATA_FORN != a.Cst_da_Nfe_de_Ata_FORn_INTERNO && a.CST_DA_NFE_DE_ATA_FORN != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.CST_DA_NFE_DE_ATA_FORN == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.Cst_da_Nfe_de_Ata_FORn_INTERNO == null && a.CST_DA_NFE_DE_ATA_FORN != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Nulos MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.CST_DA_NFE_DE_ATA_FORN == a.Cst_da_Nfe_de_Ata_FORn_INTERNO && a.CST_DA_NFE_DE_ATA_FORN != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.CST_DA_NFE_DE_ATA_FORN != a.Cst_da_Nfe_de_Ata_FORn_INTERNO && a.CST_DA_NFE_DE_ATA_FORN != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.CST_DA_NFE_DE_ATA_FORN == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.Cst_da_Nfe_de_Ata_FORn_INTERNO == null && a.CST_DA_NFE_DE_ATA_FORN != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;


            }//fim do switche

            //Action para procurar
            analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);

            switch (ordenacao)
            {
                case "Produto_desc":
                    analise = analise.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    analise = analise.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            int numeroPagina = (page ?? 1);

            return View(analise.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }

        [HttpGet]
        public ActionResult EdtCliCstNfeAtaMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();


            //Variaveis auxiliares
            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            int? analiseRetorno = 0; //atribui zero ao valor
            int? analiseTrib = 0; //atribui zero ao valor
            try
            {

                //laço de repetição para percorrer o array com os registros
                for (int i = 0; i < idTrib.Length; i++)
                {
                    //converter em inteiro
                    int idTrb = int.Parse(idTrib[i]);

                    //faz a busca no objeto criado instanciando um so objeto
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                    AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

                    //pegar valores
                    /*Caso esteja nulo o retorno do valor a variavel continuar com 0 evitando erro de valores nulos*/
                    analiseRetorno = (analise.Cst_da_Nfe_de_Ata_FORn_INTERNO == null) ? analiseRetorno : analise.Cst_da_Nfe_de_Ata_FORn_INTERNO;

                    analiseTrib = (analise.CST_DA_NFE_DE_ATA_FORN == null) ? analiseTrib : int.Parse(trib.CST_DA_NFE_DE_ATA_FORN);


                    //analisar se já são iguais
                    if (analiseTrib == analiseRetorno)
                    {
                        regNsalv++; //se são iguais não salva
                    }
                    else
                    { //se são diferentes
                        if (analiseRetorno == 0)
                        {  //se o valor continnuar 0 atribui-se ao valor na base de dados nulo
                            trib.CST_DA_NFE_DE_ATA_FORN = null;
                        }
                        else
                        {
                            //caso contrario atribui o valor procurado na analise ao objeto instanciado
                            trib.CST_DA_NFE_DE_ATA_FORN = analise.Cst_da_Nfe_de_Ata_FORn_INTERNO.ToString();
                        }

                        db.SaveChanges();
                        regSalv++; //contagem de registros salvos
                    }


                }
                TempData["analise"] = null;
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();

            }


            //Redirecionar para a tela de graficos
            return RedirectToAction("EdtCliCstNfeAtaMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });
        }


        [HttpGet]
        public ActionResult EdtCliCstNfeAtaMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();

            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }
            //montar dropdown list para as cst
            var cstCompra = db.CstIcmsGerais.Select(c => new
            {
                codigo = c.codigo,
                descricao = c.descricao


            }).ToList();

            ViewBag.CstCompra = new SelectList(cstCompra, "descricao", "codigo");

            //Mostrar descrição da cst
            var cstCompraDesc = (from d in db.CstIcmsGerais where d.codigo != 0 select d).ToList();
            ViewBag.CstCompraDesc = cstCompraDesc;

            return View(trib);
        }


        [HttpGet]
        public ActionResult EdtCliCstNfeAtaMassaManualModalPost(string strDados, string cstNfeAta)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //variavel auxiliar para receber o codigo do cst
            int? cstCodigo = 0;

            //pegar o codigo da cst
            cstCodigo = (cstNfeAta == "") ? null : (int?)(long)(from a in db.CstIcmsGerais where a.descricao == cstNfeAta select a.codigo).FirstOrDefault();

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //variavel auxiliar para guardar o resultado
            string resultado = "";
            int regSalvos = 0;

            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();


            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.CST_DA_NFE_DE_ATA_FORN = (cstCodigo.ToString() != "") ? trib.CST_DA_NFE_DE_ATA_FORN = cstCodigo.ToString() : null;

                    db.SaveChanges();
                    regSalvos++;

                }

                TempData["analise"] = null; //recarrega a lista
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }


            //Redirecionar para a tela de graficos
            return RedirectToAction("EdtCliCstNfeAtaMassa", new { param = resultado, qtdSalvos = regSalvos });
        }


        
        /*Edição de CST compra com NFE de Indústria*/
        [HttpGet]
        public ActionResult EdtCliCstNfeSNMassa(string ufOrigem, string ufDestino, string opcao, string param, string qtdNSalvos, string qtdSalvos, string ordenacao, string procuraPor, string procuraNCM, string procuraCEST, string filtroCorrente, string filtroCorrenteNCM, string filtroCorrenteCest, string filtroNulo, int? page, int? numeroLinhas)
        {
            /*Verificando a sessão*/
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Mensagem do card
            ViewBag.Mensagem = "CST de NFE compra de Simples Nacional no Cliente X no MTX";

            //variavel auxiliar
            string resultado = param;

            /*Pegando o usuário e a empresa do usuário*/
            string user = Session["usuario"].ToString();

            /*Inicializando a variavel de sessão usarios caso nao exista*/
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == user select a).FirstOrDefault(); //usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else //se existir apenas atribui à empresa
            {
                this.empresa = (Empresa)Session["empresas"];
            }

            //se o filtro corrente estiver nulo ele busca pelo parametro procurarpor
            string codBarras = (filtroCorrente != null) ? filtroCorrente : procuraPor;

            //converte em long caso seja possivel e atribui à variavel tipada: isso é necessário caso o usuário digitou codigo de barras ao inves de descrição do produto
            long codBarrasL = 0; //variavel tipada
            bool canConvert = long.TryParse(codBarras, out codBarrasL);

            //verifica se veio parametros
            procuraCEST = (procuraCEST != null) ? procuraCEST : null;
            procuraNCM = (procuraNCM != null) ? procuraNCM : null;

            //numero de linhas: Se o parametro numerolinhas vier preenchido ele atribui, caso contrario ele atribui o valor padrao: 10
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;


            //parametro de ordenacao da tabela
            ViewBag.Ordenacao = ordenacao;

            //Se a ordenação nao estiver nula ele aplica a ordenação produto decresente
            ViewBag.ParametroProduto = (String.IsNullOrEmpty(ordenacao) ? "Produto_desc" : "");

            /*Variavel temporaria para guardar a opção: tempData para que o ciclo de vida seja maior*/
            TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
            opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata

            //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
            TempData.Keep("opcao");

            //atribui 1 a pagina caso os parametreos nao sejam nulos
            page = (procuraPor != null) || (procuraCEST != null) || (procuraNCM != null) ? 1 : page;


            //atribui fitro corrente caso alguma procura esteja nulla(seja nullo)
            procuraPor = (procuraPor == null) ? filtroCorrente : procuraPor;
            procuraNCM = (procuraNCM == null) ? filtroCorrenteNCM : procuraNCM;
            procuraCEST = (procuraCEST == null) ? filtroCorrenteCest : procuraCEST;


            /*Ponto de ajuste: fazer com que as buscas persistam entre as requisições usando temp data*/
            //ViewBag.FiltroCorrente = procuraPor;
            ViewBag.FiltroCorrenteCest = procuraCEST;
            ViewBag.FiltroCorrenteNCM = procuraNCM; //nao procura por ncm mas ficara aqui para futuras solicitações
            ViewBag.FiltroCorrente = procuraPor;

            VerificaTempData();

            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();



            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 


            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;
            /*Switch da opção*/
            switch (opcao)
            {
                case "Iguais":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "1";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            analise = analise.Where(a => a.CSOSNT_DANFE_DOS_NFOR == a.CsosntdaNfedoSnFOR_INTERNO && a.CSOSNT_DANFE_DOS_NFOR != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.CSOSNT_DANFE_DOS_NFOR != a.CsosntdaNfedoSnFOR_INTERNO && a.CSOSNT_DANFE_DOS_NFOR != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.CSOSNT_DANFE_DOS_NFOR == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.CsosntdaNfedoSnFOR_INTERNO == null && a.CSOSNT_DANFE_DOS_NFOR != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;

                    }
                    break;
                case "Diferentes":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "2";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.CSOSNT_DANFE_DOS_NFOR == a.CsosntdaNfedoSnFOR_INTERNO && a.CSOSNT_DANFE_DOS_NFOR != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.CSOSNT_DANFE_DOS_NFOR != a.CsosntdaNfedoSnFOR_INTERNO && a.CSOSNT_DANFE_DOS_NFOR != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.CSOSNT_DANFE_DOS_NFOR == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.CsosntdaNfedoSnFOR_INTERNO == null && a.CSOSNT_DANFE_DOS_NFOR != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;
                case "Nulos Cliente":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "3";

                    switch (ViewBag.Filtro)
                    {

                        case "1":
                            analise = analise.Where(a => a.CSOSNT_DANFE_DOS_NFOR == a.CsosntdaNfedoSnFOR_INTERNO && a.CSOSNT_DANFE_DOS_NFOR != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.CSOSNT_DANFE_DOS_NFOR != a.CsosntdaNfedoSnFOR_INTERNO && a.CSOSNT_DANFE_DOS_NFOR != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.CSOSNT_DANFE_DOS_NFOR == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.CsosntdaNfedoSnFOR_INTERNO == null && a.CSOSNT_DANFE_DOS_NFOR != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;



                    }
                    break;
                case "Nulos MTX":
                    //O parametro filtro nulo mostra o filtro que foi informado, caso não informa nenhum ele será de acordo com a opção
                    ViewBag.Filtro = (filtroNulo != null) ? filtroNulo : "4";

                    switch (ViewBag.Filtro)
                    {
                        case "1":
                            analise = analise.Where(a => a.CSOSNT_DANFE_DOS_NFOR == a.CsosntdaNfedoSnFOR_INTERNO && a.CSOSNT_DANFE_DOS_NFOR != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "2":
                            analise = analise.Where(a => a.CSOSNT_DANFE_DOS_NFOR != a.CsosntdaNfedoSnFOR_INTERNO && a.CSOSNT_DANFE_DOS_NFOR != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "3":
                            analise = analise.Where(a => a.CSOSNT_DANFE_DOS_NFOR == null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;
                        case "4":
                            analise = analise.Where(a => a.CsosntdaNfedoSnFOR_INTERNO == null && a.CSOSNT_DANFE_DOS_NFOR != null && a.UF_ORIGEM.Equals(this.ufOrigem) && a.UF_DESTINO.Equals(this.ufDestino)).ToList();
                            break;


                    }
                    break;


            }//fim do switche

            //Action para procurar
            analise = ProcuraPor(codBarrasL, procuraPor, procuraCEST, procuraNCM, analise);

            switch (ordenacao)
            {
                case "Produto_desc":
                    analise = analise.OrderByDescending(s => s.PRODUTO_DESCRICAO).ToList();
                    break;
                default:
                    analise = analise.OrderBy(s => s.Id_Produto_INTERNO).ToList();
                    break;
            }

            //montar a pagina
            int tamaanhoPagina = 0;

            //ternario para tamanho da pagina
            tamaanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamaanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);

            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";
            ViewBag.RegNsalvos = (qtdNSalvos != null) ? qtdNSalvos : "0";

            int numeroPagina = (page ?? 1);

            return View(analise.ToPagedList(numeroPagina, tamaanhoPagina));//retorna a view tipada
        }

        [HttpGet]
        public ActionResult EdtCliCstNfeSNMassaModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //Objeto do tipo tributação empresa
            TributacaoEmpresa trib = new TributacaoEmpresa();
            string resultado = ""; //variavel auxiliar;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();


            //Variaveis auxiliares
            int regSalv = 0; //reg salvos
            int regNsalv = 0; //reg não salvos
            int? analiseRetorno = 0; //atribui zero ao valor
            int? analiseTrib = 0; //atribui zero ao valor
            try
            {

                //laço de repetição para percorrer o array com os registros
                for (int i = 0; i < idTrib.Length; i++)
                {
                    //converter em inteiro
                    int idTrb = int.Parse(idTrib[i]);

                    //faz a busca no objeto criado instanciando um so objeto
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    //faz a busca pelo CODIGO DE BARRAS DO PRODUTO e instancia um outro objeto da analise tributária
                    AnaliseTributaria analise = (from a in db.Analise_Tributaria where a.PRODUTO_COD_BARRAS == trib.PRODUTO_COD_BARRAS select a).FirstOrDefault();

                    //pegar valores
                    /*Caso esteja nulo o retorno do valor a variavel continuar com 0 evitando erro de valores nulos*/
                    analiseRetorno = (analise.CsosntdaNfedoSnFOR_INTERNO == null) ? analiseRetorno : analise.CsosntdaNfedoSnFOR_INTERNO;

                    analiseTrib = (analise.CSOSNT_DANFE_DOS_NFOR == null) ? analiseTrib : int.Parse(trib.CSOSNT_DANFE_DOS_NFOR);


                    //analisar se já são iguais
                    if (analiseTrib == analiseRetorno)
                    {
                        regNsalv++; //se são iguais não salva
                    }
                    else
                    { //se são diferentes
                        if (analiseRetorno == 0)
                        {  //se o valor continnuar 0 atribui-se ao valor na base de dados nulo
                            trib.CSOSNT_DANFE_DOS_NFOR = null;
                        }
                        else
                        {
                            //caso contrario atribui o valor procurado na analise ao objeto instanciado
                            trib.CSOSNT_DANFE_DOS_NFOR = analise.CsosntdaNfedoSnFOR_INTERNO.ToString();
                        }

                        db.SaveChanges();
                        regSalv++; //contagem de registros salvos
                    }


                }
                TempData["analise"] = null;
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();

            }


            //Redirecionar para a tela de graficos
            return RedirectToAction("EdtCliCstNfeSNMassa", new { param = resultado, qtdSalvos = regSalv, qtdNSalvos = regNsalv });
        }


        [HttpGet]
        public ActionResult EdtCliCstNfeSNMassaManualModal(string strDados)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            //Objeto do tipo tributação empresa
            //TributacaoEmpresa trib = new TributacaoEmpresa();
            List<TributacaoEmpresa> trib;

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //retira o elemento vazio do array deixando somente os id dos registros
            idTrib = idTrib.Where(item => item != "").ToArray();
            trib = new List<TributacaoEmpresa>();

            for (int i = 0; i < idTrib.Length; i++)
            {
                //converter em inteiro
                int idTrb = int.Parse(idTrib[i]);

                trib.Add(db.TributacaoEmpresas.Find(idTrb));

            }
            //montar dropdown list para as cst
            var cstCompra = db.CstIcmsGerais.Select(c => new
            {
                codigo = c.codigo,
                descricao = c.descricao


            }).ToList();

            ViewBag.CstCompra = new SelectList(cstCompra, "descricao", "codigo");

            //Mostrar descrição da cst
            var cstCompraDesc = (from d in db.CstIcmsGerais where d.codigo != 0 select d).ToList();
            ViewBag.CstCompraDesc = cstCompraDesc;

            return View(trib);
        }


        [HttpGet]
        public ActionResult EdtCliCstNfeSNMassaManualModalPost(string strDados, string cstNfeSN)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }

            //variavel auxiliar para receber o codigo do cst
            int? cstCodigo = 0;

            //pegar o codigo da cst
            cstCodigo = (cstNfeSN == "") ? null : (int?)(long)(from a in db.CstIcmsGerais where a.descricao == cstNfeSN select a.codigo).FirstOrDefault();

            //separar a String em um array
            string[] idTrib = strDados.Split(',');

            //variavel auxiliar para guardar o resultado
            string resultado = "";
            int regSalvos = 0;

            //retira o elemento vazio do array
            idTrib = idTrib.Where(item => item != "").ToArray();

            //objeto tributação
            TributacaoEmpresa trib = new TributacaoEmpresa();


            try
            {
                //percorrer o array, atribuir o valor de ncm e salvar o objeto
                for (int i = 0; i < idTrib.Length; i++)
                {
                    int idTrb = Int32.Parse(idTrib[i]);
                    trib = db.TributacaoEmpresas.Find(idTrb);

                    trib.CSOSNT_DANFE_DOS_NFOR = (cstCodigo.ToString() != "") ? trib.CSOSNT_DANFE_DOS_NFOR = cstCodigo.ToString() : null;

                    db.SaveChanges();
                    regSalvos++;

                }

                TempData["analise"] = null; //recarrega a lista
                resultado = "Registro Salvo com Sucesso!!";

            }
            catch (Exception e)
            {
                resultado = "Problemas ao salvar o registro: " + e.ToString();
            }


            //Redirecionar para a tela de graficos
            return RedirectToAction("EdtCliCstNfeSNMassa", new { param = resultado, qtdSalvos = regSalvos });
        }

        //Recebe os parametros e faz a busca na tabela por codigo de barras e cest

        [HttpGet]
        public List<AnaliseTributaria> ProcuraPor(long? codBarrasL, string procuraPor, string procuraCEST, string procuraNCM, List<AnaliseTributaria> analise)
        {
            if (!String.IsNullOrEmpty(procuraPor))
            {
                analise = (codBarrasL != 0) ? (analise.Where(s => s.PRODUTO_COD_BARRAS.ToString().StartsWith(codBarrasL.ToString()))).ToList() : analise = (analise.Where(s => s.PRODUTO_DESCRICAO.ToString().ToUpper().StartsWith(procuraPor.ToUpper()))).ToList();
            }
            if (!String.IsNullOrEmpty(procuraCEST))
            {
                analise = analise.Where(s => s.PRODUTO_CEST == procuraCEST).ToList();
                //analise = analise.Where(s => s.PRODUTO_CEST.ToString().Contains(procuraCEST.ToString())).ToList();
            }
            if (!String.IsNullOrEmpty(procuraNCM))
            {
                analise = analise.Where(s => s.PRODUTO_NCM == procuraNCM).ToList();
                //analise = analise.Where(s => s.PRODUTO_CEST.ToString().Contains(procuraCEST.ToString())).ToList();
            }

            return analise;
           
        }

        [HttpGet]
        public IQueryable<AnaliseTributaria> ProcuraPorII(long? codBarrasL, string procuraPor, string procuraCEST, string procuraNCM, IQueryable<AnaliseTributaria> lstAnalise)
        {
            if (!String.IsNullOrEmpty(procuraPor))
            {
                this.lstAnalise = (codBarrasL != 0) ? (lstAnalise.Where(s => s.PRODUTO_COD_BARRAS.ToString().StartsWith(codBarrasL.ToString()))) : this.lstAnalise = (lstAnalise.Where(s => s.PRODUTO_DESCRICAO.ToString().ToUpper().StartsWith(procuraPor.ToUpper())));
            }
            if (!String.IsNullOrEmpty(procuraCEST))
            {
                this.lstAnalise = lstAnalise.Where(s => s.PRODUTO_CEST == procuraCEST);
                //analise = analise.Where(s => s.PRODUTO_CEST.ToString().Contains(procuraCEST.ToString())).ToList();
            }
            if (!String.IsNullOrEmpty(procuraNCM))
            {
                this.lstAnalise = lstAnalise.Where(s => s.PRODUTO_NCM == procuraNCM);
                //analise = analise.Where(s => s.PRODUTO_CEST.ToString().Contains(procuraCEST.ToString())).ToList();
            }

            return this.lstAnalise;

        }

        [HttpGet]
        public List<AnaliseTributariaSn> ProcuraPorSn(long? codBarrasL, string procuraPor, string procuraCEST, string procuraNCM, List<AnaliseTributariaSn> analiseSn)
        {
            if(procuraCEST == null)
            {
                procuraCEST = "";
            }
            else
            {
                procuraCEST = procuraCEST.Replace(".", ""); //retira os pontos
            }
            if (procuraNCM == null)
            {
                procuraNCM = "";
            }
            else
            {
                procuraNCM = procuraNCM.Replace(".", ""); //retira os pontos
            }


           


            if (!String.IsNullOrEmpty(procuraPor))
            {
                this.analiseSn = (codBarrasL != 0) ? (this.analiseSn.Where(s => s.PRODUTO_COD_BARRAS.ToString().StartsWith(codBarrasL.ToString()))).ToList() : this.analiseSn = (this.analiseSn.Where(s => s.PRODUTO_DESCRICAO.ToString().ToUpper().StartsWith(procuraPor.ToUpper()))).ToList();
            }
            if (!String.IsNullOrEmpty(procuraCEST))
            {
                this.analiseSn = this.analiseSn.Where(s => s.PRODUTO_CEST == procuraCEST).ToList();
                //analise = analise.Where(s => s.PRODUTO_CEST.ToString().Contains(procuraCEST.ToString())).ToList();
            }
            if (!String.IsNullOrEmpty(procuraNCM))
            {
                this.analiseSn = this.analiseSn.Where(s => s.PRODUTO_NCM == procuraNCM).ToList();
                //analise = analise.Where(s => s.PRODUTO_CEST.ToString().Contains(procuraCEST.ToString())).ToList();
            }

            return this.analiseSn;

        }




        [HttpGet]
        public List<AnaliseTributariaNCM> ProcuraPorSnPorNCM(long? codBarrasL, string procuraPor, string procuraCEST, string procuraNCM, List<AnaliseTributariaNCM> analiseSnNCM)
        {
            if (procuraCEST == null)
            {
                procuraCEST = "";
            }
            else
            {
                procuraCEST = procuraCEST.Replace(".", ""); //retira os pontos
            }
            if (procuraNCM == null)
            {
                procuraNCM = "";
            }
            else
            {
                procuraNCM = procuraNCM.Replace(".", ""); //retira os pontos
            }





            if (!String.IsNullOrEmpty(procuraPor))
            {
                this.analise_NCM = (codBarrasL != 0) ? (this.analise_NCM.Where(s => s.PRODUTO_COD_BARRAS.ToString().StartsWith(codBarrasL.ToString()))).ToList() : this.analise_NCM = (this.analise_NCM.Where(s => s.PRODUTO_DESCRICAO.ToString().ToUpper().StartsWith(procuraPor.ToUpper()))).ToList();
            }
            if (!String.IsNullOrEmpty(procuraCEST))
            {
                this.analise_NCM = this.analise_NCM.Where(s => s.PRODUTO_CEST == procuraCEST).ToList();
                //analise = analise.Where(s => s.PRODUTO_CEST.ToString().Contains(procuraCEST.ToString())).ToList();
            }
            if (!String.IsNullOrEmpty(procuraNCM))
            {
                this.analise_NCM = this.analise_NCM.Where(s => s.PRODUTO_NCM == procuraNCM).ToList();
                //analise = analise.Where(s => s.PRODUTO_CEST.ToString().Contains(procuraCEST.ToString())).ToList();
            }

            return this.analise_NCM;

        }

        //






        //faz a busca de produtos correspondentes (que há no cadastro de produtos)

        [HttpGet]
        public List<AnaliseTributaria3> ProcuraPorCorrespondentes(long? codBarrasL, string procuraPor, string procuraCEST, string procuraNCM, List<AnaliseTributaria3> analise)
        {
            if (procuraCEST == null)
            {
                procuraCEST = "";
            }
            else
            {
                procuraCEST = procuraCEST.Replace(".", ""); //retira os pontos
            }
            if (procuraNCM == null)
            {
                procuraNCM = "";
            }
            else
            {
                procuraNCM = procuraNCM.Replace(".", ""); //retira os pontos
            }

            if (!String.IsNullOrEmpty(procuraPor))
            {
                this.trib3 = (codBarrasL != 0) ? (this.trib3.Where(s => s.PRODUTO_COD_BARRAS.ToString().StartsWith(codBarrasL.ToString()))).ToList() : this.trib3 = (this.trib3.Where(s => s.PRODUTO_DESCRICAO.ToString().ToUpper().StartsWith(procuraPor.ToUpper()))).ToList();
            }
            if (!String.IsNullOrEmpty(procuraCEST))
            {
                this.trib3 = this.trib3.Where(s => s.PRODUTO_CEST == procuraCEST).ToList();
                //analise = analise.Where(s => s.PRODUTO_CEST.ToString().Contains(procuraCEST.ToString())).ToList();
            }
            if (!String.IsNullOrEmpty(procuraNCM))
            {
                this.trib3 = this.trib3.Where(s => s.PRODUTO_NCM == procuraNCM).ToList();
                //analise = analise.Where(s => s.PRODUTO_CEST.ToString().Contains(procuraCEST.ToString())).ToList();
            }

            return this.trib3;

        }



        //procurapor diferenciado para tabela de produto
        [HttpGet]
        public List<AnaliseTributaria> ProcuraPorTabelaProduto(string filtroDados, int? parFiltro, List<AnaliseTributaria> analise)
        {
            string procuraPor= null;
            string procuraCEST=null;
            string procuraNCM=null;
            long codBarrasla = 0;

            switch (parFiltro)
            {
                case 1:
                    procuraCEST = filtroDados;
                    break;
                case 2:
                    procuraNCM = filtroDados;
                    break;
                case 3:
                    procuraPor = filtroDados;
                   
                    bool canConvert = long.TryParse(procuraPor, out codBarrasla);
                    break;

            }
            if (!String.IsNullOrEmpty(procuraPor))
            {
                analise = (codBarrasla != 0) ? (analise.Where(s => s.PRODUTO_COD_BARRAS.ToString().StartsWith(codBarrasla.ToString()))).ToList() : analise = (analise.Where(s => s.PRODUTO_DESCRICAO.ToString().ToUpper().StartsWith(procuraPor.ToUpper()))).ToList();
            }
            if (!String.IsNullOrEmpty(procuraCEST))
            {
                analise = analise.Where(s => s.PRODUTO_CEST == procuraCEST).ToList();
                //analise = analise.Where(s => s.PRODUTO_CEST.ToString().Contains(procuraCEST.ToString())).ToList();
            }
            if (!String.IsNullOrEmpty(procuraNCM))
            {
                analise = analise.Where(s => s.PRODUTO_NCM == procuraNCM).ToList();
                //analise = analise.Where(s => s.PRODUTO_CEST.ToString().Contains(procuraCEST.ToString())).ToList();
            }

            return analise;
        }

        //procura por diferenciado para tabela de produto. view diferente
        [HttpGet]
        public List<AnaliseTributaria2> ProcuraPorTabelaProduto2(string filtroDados, int? parFiltro, List<AnaliseTributaria2> analise)
        {
            string procuraPor = null;
            string procuraCEST = null;
            string procuraNCM = null;
            long codBarrasla = 0;

            switch (parFiltro)
            {
                case 1:
                    procuraCEST = filtroDados;
                    break;
                case 2:
                    procuraNCM = filtroDados;
                    break;
                case 3:
                    procuraPor = filtroDados;

                    bool canConvert = long.TryParse(procuraPor, out codBarrasla);
                    break;

            }
            if (!String.IsNullOrEmpty(procuraPor))
            {
                analise = (codBarrasla != 0) ? (analise.Where(s => s.PRODUTO_COD_BARRAS.ToString().StartsWith(codBarrasla.ToString()))).ToList() : analise = (analise.Where(s => s.PRODUTO_DESCRICAO.ToString().ToUpper().StartsWith(procuraPor.ToUpper()))).ToList();
            }
            if (!String.IsNullOrEmpty(procuraCEST))
            {
                analise = analise.Where(s => s.PRODUTO_CEST == procuraCEST).ToList();
                //analise = analise.Where(s => s.PRODUTO_CEST.ToString().Contains(procuraCEST.ToString())).ToList();
            }
            if (!String.IsNullOrEmpty(procuraNCM))
            {
                analise = analise.Where(s => s.PRODUTO_NCM == procuraNCM).ToList();
                //analise = analise.Where(s => s.PRODUTO_CEST.ToString().Contains(procuraCEST.ToString())).ToList();
            }

            return analise;
        }

        
        public List<AnaliseTributaria3> ProcuraPorTabelaProdutoSNCorrespondente(string filtroDados, int? parFiltro, List<AnaliseTributaria3> analise)
        {
            string procuraPor = null;
            string procuraCEST = null;
            string procuraNCM = null;
            long codBarrasla = 0;

            switch (parFiltro)
            {
                case 1:
                    procuraCEST = filtroDados;
                    break;
                case 2:
                    procuraNCM = filtroDados;
                    break;
                case 3:
                    procuraPor = filtroDados;

                    bool canConvert = long.TryParse(procuraPor, out codBarrasla);
                    break;

            }
            if (!String.IsNullOrEmpty(procuraPor))
            {
                analise = (codBarrasla != 0) ? (analise.Where(s => s.PRODUTO_COD_BARRAS.ToString().StartsWith(codBarrasla.ToString()))).ToList() : analise = (analise.Where(s => s.PRODUTO_DESCRICAO.ToString().ToUpper().StartsWith(procuraPor.ToUpper()))).ToList();
            }
            if (!String.IsNullOrEmpty(procuraCEST))
            {
                analise = analise.Where(s => s.PRODUTO_CEST == procuraCEST).ToList();
                //analise = analise.Where(s => s.PRODUTO_CEST.ToString().Contains(procuraCEST.ToString())).ToList();
            }
            if (!String.IsNullOrEmpty(procuraNCM))
            {
                analise = analise.Where(s => s.PRODUTO_NCM == procuraNCM).ToList();
                //analise = analise.Where(s => s.PRODUTO_CEST.ToString().Contains(procuraCEST.ToString())).ToList();
            }

            return analise;

        }
        public List<AnaliseTributariaSn> ProcuraPorTabelaProdutoSN(string filtroDados, int? parFiltro, List<AnaliseTributariaSn> analise)
        {
            string procuraPor = null;
            string procuraCEST = null;
            string procuraNCM = null;
            long codBarrasla = 0;

            switch (parFiltro)
            {
                case 1:
                    procuraCEST = filtroDados;
                    break;
                case 2:
                    procuraNCM = filtroDados;
                    break;
                case 3:
                    procuraPor = filtroDados;

                    bool canConvert = long.TryParse(procuraPor, out codBarrasla);
                    break;

            }
            if (!String.IsNullOrEmpty(procuraPor))
            {
                analise = (codBarrasla != 0) ? (analise.Where(s => s.PRODUTO_COD_BARRAS.ToString().StartsWith(codBarrasla.ToString()))).ToList() : analise = (analise.Where(s => s.PRODUTO_DESCRICAO.ToString().ToUpper().StartsWith(procuraPor.ToUpper()))).ToList();
            }
            if (!String.IsNullOrEmpty(procuraCEST))
            {
                analise = analise.Where(s => s.PRODUTO_CEST == procuraCEST).ToList();
                //analise = analise.Where(s => s.PRODUTO_CEST.ToString().Contains(procuraCEST.ToString())).ToList();
            }
            if (!String.IsNullOrEmpty(procuraNCM))
            {
                analise = analise.Where(s => s.PRODUTO_NCM == procuraNCM).ToList();
                //analise = analise.Where(s => s.PRODUTO_CEST.ToString().Contains(procuraCEST.ToString())).ToList();
            }

            return analise;
        }
        
        public ActionResult Usuario(string param, string ordenacao, string qtdSalvos, string procurarPor, string procuraEmpresa,
           string filtroCorrente, string filtroEmpresa, int? page, int? numeroLinhas)
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }


            //variavel auxiliar
            string resultado = param;

            procurarPor = (filtroCorrente != null) ? filtroCorrente : procurarPor; //procura por nome
            procuraEmpresa = (procuraEmpresa != null) ? procuraEmpresa : null;

            //numero de linhas
            ViewBag.NumeroLinhas = (numeroLinhas != null) ? numeroLinhas : 10;

            ViewBag.Ordenacao = ordenacao;
            ViewBag.ParametroNome = String.IsNullOrEmpty(ordenacao) ? "Nome_desc" : ""; //Se nao vier nula a ordenacao aplicar por nome decrescente

            //atribui 1 a pagina caso os parametros nao sejam nulos
            page = (procurarPor != null) || (procuraEmpresa != null) ? 1 : page; //atribui 1 à pagina caso procurapor seja diferente de nullo


            procurarPor = (procurarPor == null) ? filtroCorrente : procurarPor; //atribui o filtro corrente se procuraPor estiver nulo
            procuraEmpresa = (procuraEmpresa == null) ? filtroEmpresa : procuraEmpresa;

            ViewBag.FiltroCorrente = procurarPor;
            ViewBag.FiltroCorrenteEmpresa = procuraEmpresa;

             IdEmp = (int)Session["idEmpresa"]; //id da empresa do usuario

            VerificaTempUser(IdEmp);

            //procura
            if (!String.IsNullOrEmpty(procurarPor))
            {
                this.listUser = listUser.Where(s => s.nome.StartsWith(procurarPor)).ToList();
            }
            if (!String.IsNullOrEmpty(procuraEmpresa))
            {
                listUser = listUser.Where(s => s.empresa.id.ToString() == procuraEmpresa).ToList();
            }
            //montar a pagina
            int tamanhoPagina = 0;

            //Ternario para tamanho da pagina
            tamanhoPagina = (ViewBag.NumeroLinha != null) ? ViewBag.NumeroLinhas : (tamanhoPagina = (numeroLinhas != 10) ? ViewBag.numeroLinhas : (int)numeroLinhas);
            int numeroPagina = (page ?? 1);
            //Mensagens de retorno
            ViewBag.MensagemGravar = (resultado != null) ? resultado : "";
            ViewBag.RegSalvos = (qtdSalvos != null) ? qtdSalvos : "";

            
            var userEmpresa= (from s in db.Empresas where s.id == IdEmp select s.fantasia).FirstOrDefault().ToString(); //pega o usuario
           

            ViewBag.Empresas = userEmpresa;

            


            return View(listUser.ToPagedList(numeroPagina, tamanhoPagina));//retorna o pagedlist

        }



        public ActionResult CreateUsuarioCliente()
        {
            if (Session["usuario"] == null)
            {
                return RedirectToAction("../Home/Login");
            }

            IdEmp = (int)Session["idEmpresa"]; //id da empresa do usuario

            ViewBag.Niveis = db.Niveis;
            var userEmpresa = (from s in db.Empresas where s.id == IdEmp select s.fantasia).FirstOrDefault().ToString(); //pega o usuario


            ViewBag.Empresas = userEmpresa;

            //Array values = Enum.GetValues(typeof(MatrizTributaria.Models.EstadosEnun));

            //ViewBag.Estados = values;
            ViewBag.Estados = db.Estados;

            var model = new UsuarioViewModelCliente();
            return View(model);
          
        }
        
    
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult CreateUsuarioCliente(UsuarioViewModelCliente model)
        {
            //variavel auxiliar para guardar o resultado
            IdEmp = (int)Session["idEmpresa"]; //id da empresa do usuario
            var userEmpresa = "";
            string resultado = "";
            int regSalvos = 0;
            var hash = new Hash(SHA512.Create());
            //iformando a data do dia da criação do registro
            model.dataCad = DateTime.Now;
            model.dataAlt = DateTime.Now;
            model.ativo = 1; //ativando o registro no cadastro
            model.primeiro_acesso = 1; //validar esse requisito
            //ativando o registro no cadastro
           

                //verificar se existe o usuario no banco
                var users = from s in db.Usuarios select s; //select na tabela
                                                            //where: Pegar somente o registro do cnpj da empresa do usuario (da sessão)
                users = users.Where(s => s.email.Contains(model.email));

                if (users.Count() > 0)
                {
                    ViewBag.MensagemErro = "E-mail já utilizado em outro usuário";
                    ViewBag.Niveis = db.Niveis;
                ViewBag.Estados = db.Estados;
                userEmpresa = (from s in db.Empresas where s.id == IdEmp select s.fantasia).FirstOrDefault().ToString(); //pega o usuario


                    ViewBag.Empresas = userEmpresa;

                    return View();
                }
                if(model.nome == null)
                {
                    ViewBag.MensagemErro = "Campo nome é obrigatório";
                    ViewBag.Niveis = db.Niveis;
                ViewBag.Estados = db.Estados;
                userEmpresa = (from s in db.Empresas where s.id == IdEmp select s.fantasia).FirstOrDefault().ToString(); //pega o usuario


                    ViewBag.Empresas = userEmpresa;

                    return View();
                }
            if (model.email == null)
            {
                ViewBag.MensagemErro = "Campo e-mail é obrigatório";
                ViewBag.Niveis = db.Niveis;
                ViewBag.Estados = db.Estados;
                userEmpresa = (from s in db.Empresas where s.id == IdEmp select s.fantasia).FirstOrDefault().ToString(); //pega o usuario


                ViewBag.Empresas = userEmpresa;

                return View();
            }
            if (model.cidade == null)
            {
                ViewBag.MensagemErro = "Campo cidade é obrigatório";
                ViewBag.Niveis = db.Niveis;
                ViewBag.Estados = db.Estados;
                userEmpresa = (from s in db.Empresas where s.id == IdEmp select s.fantasia).FirstOrDefault().ToString(); //pega o usuario


                ViewBag.Empresas = userEmpresa;

                return View();
            }
            if (model.sexo == null)
            {
                ViewBag.MensagemErro = "Campo sexo é obrigatório";
                ViewBag.Niveis = db.Niveis;
                ViewBag.Estados = db.Estados;
                userEmpresa = (from s in db.Empresas where s.id == IdEmp select s.fantasia).FirstOrDefault().ToString(); //pega o usuario


                ViewBag.Empresas = userEmpresa;

                return View();
            }
            if (model.senha == null)
            {
                ViewBag.MensagemErro = "Campo senha é obrigatório";
                ViewBag.Niveis = db.Niveis;
                ViewBag.Estados = db.Estados;
                userEmpresa = (from s in db.Empresas where s.id == IdEmp select s.fantasia).FirstOrDefault().ToString(); //pega o usuario


                ViewBag.Empresas = userEmpresa;

                return View();
            }
            if (model.estado.Equals(""))
            {
                ViewBag.MensagemErro = "Campo estado é obrigatório";
                ViewBag.Niveis = db.Niveis;
                ViewBag.Estados = db.Estados;
                userEmpresa = (from s in db.Empresas where s.id == IdEmp select s.fantasia).FirstOrDefault().ToString(); //pega o usuario


                ViewBag.Empresas = userEmpresa;
                ViewBag.Estados = db.Estados;

                return View();
            }
            if (model.idNivel == 0)
            {
                ViewBag.MensagemErro = "Campo nível é obrigatório";
                ViewBag.Niveis = db.Niveis;
                userEmpresa = (from s in db.Empresas where s.id == IdEmp select s.fantasia).FirstOrDefault().ToString(); //pega o usuario
                ViewBag.Estados = db.Estados;

                ViewBag.Empresas = userEmpresa;

                return View();
            }
            var usuario = new Usuario()
            {

                nome = model.nome,
                email = model.email,
                sexo = model.sexo,
                logradouro = model.logradouro,
                numero = model.numero,
                cep = model.cep,
                //criptografar senha
                senha = hash.CriptografarSenha(model.senha),

                ativo = model.ativo,
                primeiro_acesso = model.primeiro_acesso,
                dataCad = model.dataCad,
                dataAlt = model.dataAlt,
                idNivel = model.idNivel,
                telefone = model.telefone,
                cidade = model.cidade,
                estado = model.estado.ToString(),
                idEmpresa = IdEmp

            };

                try
                {
                    db.Usuarios.Add(usuario);
                    db.SaveChanges();
                    regSalvos++;
                    resultado = "Registro Salvo com Sucesso!!";
                   TempData["usuarioEmpresa"] = null;
                   TempData.Keep("usuarioEmpresa");



            }
                catch (Exception e)
                {
                    string ex = e.ToString();
                    regSalvos = 0;
                    resultado = "Não foi possivel salvar o registro!!";

                }


            ViewBag.Niveis = db.Niveis;
            ViewBag.Estados = db.Estados;
            userEmpresa = (from s in db.Empresas where s.id == IdEmp select s.fantasia).FirstOrDefault().ToString(); //pega o usuario


            ViewBag.Empresas = userEmpresa;
            ViewBag.Estados = db.Estados;

            return RedirectToAction("Usuario", new { param = resultado, qtdSalvos = regSalvos });
            
        }

        private EmptyResult VerificaTempUser(int empId)
        {
            /*PAra tipar */
            /*A lista é salva em uma tempdata para ficar persistida enquanto o usuario está nessa action
             na action de salvar devemos anular essa tempdata para que a lista seja carregada novaente*/
            if (TempData["usuarioEmpresa"] == null)
            {
                
                this.listUser = db.Usuarios.ToList();
                this.listUser = this.listUser.Where(a => a.idEmpresa == empId).ToList();
                TempData["usuarioEmpresa"] = this.listUser; //cria a temp data e popula
                TempData.Keep("usuarioEmpresa"); //persiste
            }
            else
            {
                this.listUser = (List<Usuario>)TempData["usuarioEmpresa"];//atribui a lista os valores de tempdata
                TempData.Keep("usuarioEmpresa"); //persiste
            }

            return new EmptyResult();

            
            
        }
        private EmptyResult VerificaOriDest(string origem, string destino)
        {

            if (origem == null || origem == "")
            {
                TempData["UfOrigem"] = (TempData["UfOrigem"] == null) ? "TO" : TempData["UfOrigem"].ToString();
                TempData.Keep("UfOrigem");
            }
            else
            {
                TempData["UfOrigem"] = origem;
                TempData.Keep("UfOrigem");

            }

            if (destino == null || destino == "")
            {
                TempData["UfDestino"] = (TempData["UfDestino"] == null) ? "TO" : TempData["UfDestino"].ToString();
                TempData.Keep("UfDestino");
            }
            else
            {
                TempData["UfDestino"] = destino;
                TempData.Keep("UfDestino");
            }


            this.ufOrigem = TempData["UfOrigem"].ToString();
            this.ufDestino = TempData["UfDestino"].ToString();

            return new EmptyResult();
        }
        //public EmptyResult VerificaTempData()
        //{


        //    /*Verifica a variavel do tipo temp data ANALISE, caso esteja nula carregar a lista novamente*/
        //    if (TempData["analise"] == null)
        //    {
        //        //carrega a lista analise usando o cnpj da empresa do usuario
        //        //this.analise = (from a in db.Analise_Tributaria where a.CNPJ_EMPRESA.Equals(this.empresa.cnpj) select a).ToList();
        //        /*AKTERAÇÃO DIA 30052022 - PEGAR SOMENTE ORIGEM E DESTINO SELECIONADO PELO USUARIO*/
        //        //this.analise = (from a in db.Analise_Tributaria where a.CNPJ_EMPRESA.Equals(this.empresa.cnpj)  select a).ToList();
        //       // this.analise = (from a in db.Analise_Tributaria where a.CNPJ_EMPRESA.Equals(this.empresa.cnpj) select a).ToList();
        //        this.lstAnalise = (from a in db.Analise_Tributaria where a.CNPJ_EMPRESA.Equals(this.empresa.cnpj) select a);

        //        //this.analise = this.lstAnalise.ToList();

        //        TempData["analise"] = this.lstAnalise; //cria
        //        TempData.Keep("analise"); //salva
        //    }
        //    else //não estando nula apenas atribui à lista o valor carregado em tempdata
        //    {
        //      // this.analise = (List<AnaliseTributaria>)TempData["analise"];
        //       this.lstAnalise = (IQueryable<AnaliseTributaria>)TempData["analise"];
        //        TempData.Keep("analise");
        //    }

        //    return new EmptyResult();
        //}

        public EmptyResult VerificaTempData()
        {


            /*Verifica a variavel do tipo temp data ANALISE, caso esteja nula carregar a lista novamente*/
            if (TempData["analise"] == null)
            {
                //carrega a lista analise usando o cnpj da empresa do usuario
                //this.analise = (from a in db.Analise_Tributaria where a.CNPJ_EMPRESA.Equals(this.empresa.cnpj) select a).ToList();
                /*AKTERAÇÃO DIA 30052022 - PEGAR SOMENTE ORIGEM E DESTINO SELECIONADO PELO USUARIO*/
                
                // this.analise = (List<AnaliseTributaria>)db.Analise_Tributaria.Where(a=> a.CNPJ_EMPRESA.Equals(this.empresa.cnpj));
                //mais rápido
                this.analise = db.Analise_Tributaria.Where(a => a.CNPJ_EMPRESA.Equals(this.empresa.cnpj)).ToList();

                //this.analise = (from a in db.Analise_Tributaria where a.CNPJ_EMPRESA.Equals(this.empresa.cnpj) select a).ToList();
                // this.analise = (from a in db.Analise_Tributaria where a.CNPJ_EMPRESA.Equals(this.empresa.cnpj) && a.ATIVO.Equals(1) select a).ToList();

                this.analise = this.analise.Where(a => a.ATIVO == 1).ToList();
                TempData["analise"] = this.analise; //cria
                TempData.Keep("analise"); //salva
            }
            else //não estando nula apenas atribui à lista o valor carregado em tempdata
            {
                this.analise = (List<AnaliseTributaria>)TempData["analise"];
                TempData.Keep("analise");
            }

            return new EmptyResult();
        }
        public EmptyResult VerificarOpcao(string filtroNulo, string opcao)
        {
            if (filtroNulo != null)
            {
                switch (filtroNulo)
                {
                    case "1":
                        TempData["opcao"] = "Iguais";
                      
                        TempData.Keep("opcao");
                        break;
                    case "2":
                        TempData["opcao"] = "Diferentes";
                     
                        TempData.Keep("opcao");
                        break;
                    case "3":
                        TempData["opcao"] = "Nulos Cliente";
                       
                        TempData.Keep("opcao");
                        break;
                    case "4":
                        TempData["opcao"] = "Nulos MTX";
                       
                        TempData.Keep("opcao");
                        break;
                    case "5":
                        TempData["opcao"] = "Nulos Ambos";
                      
                        TempData.Keep("opcao");
                        break;


                }
            }
            else
            {

                TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
                //opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                                                                               //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
                TempData.Keep("opcao");
            }
            return new EmptyResult();
        }


        
        public EmptyResult VerificarOpcaoAliq(string filtroNulo, string opcao)
        {
            if (filtroNulo != null)
            {
                switch (filtroNulo)
                {
                    case "1":
                        TempData["opcao"] = "Maiores";
                        TempData.Keep("opcao");
                        break;
                    case "2":
                        TempData["opcao"] = "Menores";
                        TempData.Keep("opcao");
                        break;
                    case "3":
                        TempData["opcao"] = "Iguais";
                        TempData.Keep("opcao");
                        break;
                    case "4":
                        TempData["opcao"] = "Nulas Cliente";
                        TempData.Keep("opcao");
                        break;
                    case "5":
                        TempData["opcao"] = "Nulas MTX";
                        TempData.Keep("opcao");
                        break;
                    case "6":
                        TempData["opcao"] = "Nulas Ambos";
                        TempData.Keep("opcao");
                        break;
                    case "7":
                        TempData["opcao"] = "Isentas";
                        TempData.Keep("opcao");
                        break;
                    case "8":
                        TempData["opcao"] = "Não Tributadas";
                        TempData.Keep("opcao");
                        break;
                    case "9":
                        TempData["opcao"] = "Uso Consumo";
                        TempData.Keep("opcao");
                        break;
                    case "10":
                        TempData["opcao"] = "Subst. Tributária";
                        opcao = (opcao == null) ? TempData["opcao"].ToString() : opcao;//caso venha nula a opcao recebe o valor de tempdata
                        TempData.Keep("opcao");
                        break;
                }
            }
            else
            {

                TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
                                                                               //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
                TempData.Keep("opcao");
            }
            return new EmptyResult();
        }


        public EmptyResult VerificarOpcaoRed(string filtroNulo, string opcao)
        {
            if (filtroNulo != null)
            {
                switch (filtroNulo)
                {
                    case "1":
                        TempData["opcao"] = "Maiores";
                        TempData.Keep("opcao");
                        break;
                    case "2":
                        TempData["opcao"] = "Menores";
                        TempData.Keep("opcao");
                        break;
                    case "3":
                        TempData["opcao"] = "Iguais";
                        TempData.Keep("opcao");
                        break;
                    case "4":
                        TempData["opcao"] = "Nulas Cliente";
                        TempData.Keep("opcao");
                        break;
                    case "5":
                        TempData["opcao"] = "Nulas MTX";
                        TempData.Keep("opcao");
                        break;
                    case "6":
                        TempData["opcao"] = "Nulas Ambos";
                        TempData.Keep("opcao");
                        break;
                    case "7":
                        TempData["opcao"] = "Sem Redução";
                        TempData.Keep("opcao");
                        break;
                   
                }
            }
            else
            {

                TempData["opcao"] = opcao ?? TempData["opcao"];//se a opção for diferente de nula a tempdata recebe o seu valor
                                                               //persiste tempdata entre as requisicoes ate que a opcao seja mudada na chamada pelo grafico
                TempData.Keep("opcao");
            }
            return new EmptyResult();
        }


        public EmptyResult VerificarLinhas(int? numeroLinhas)
        {
            if (numeroLinhas != null)
            {

                if (TempData["linhas"] != null)
                {
                    if (!numeroLinhas.Equals(int.Parse(TempData["linhas"].ToString())))
                    {
                        TempData["linhas"] = numeroLinhas;
                        TempData.Keep("linhas");
                        ViewBag.NumeroLinhas = numeroLinhas;
                    }
                    else
                    {
                        ViewBag.NumeroLinhas = numeroLinhas;
                    }

                }
                else
                {
                    TempData["linhas"] = numeroLinhas;
                    TempData.Keep("linhas");
                    ViewBag.NumeroLinhas = numeroLinhas;

                }


            }
            else
            {
                if (TempData["linhas"] == null)
                {
                    TempData["linhas"] = 10;
                    TempData.Keep("linhas");
                    ViewBag.NumeroLinhas = 10;
                }
                else
                {
                    ViewBag.NumeroLinhas = TempData["linhas"];
                }
            }
            return new EmptyResult();
        }
        public EmptyResult VerificaTempDataProd()
        {


            /*Verifica a variavel do tipo temp data ANALISE, caso esteja nula carregar a lista novamente*/
            if (TempData["analiseProd"] == null)
            {
                //carrega a lista analise usando o cnpj da empresa do usuario
                //this.analise = (from a in db.Analise_Tributaria where a.CNPJ_EMPRESA.Equals(this.empresa.cnpj) select a).ToList();
                /*AKTERAÇÃO DIA 30052022 - PEGAR SOMENTE ORIGEM E DESTINO SELECIONADO PELO USUARIO*/
                this.analiseProd = (from a in db.Analise_Prod where a.CNPJ_EMPRESA.Equals(this.empresa.cnpj)  select a).ToList(); //sem ativo por enquanto

                TempData["analiseProd"] = this.analiseProd; //cria
                TempData.Keep("analiseProd"); //salva
            }
            else //não estando nula apenas atribui à lista o valor carregado em tempdata
            {
                this.analiseProd = (List<AnaliseProd>)TempData["analiseProd"];
                TempData.Keep("analiseProd");
            }

            return new EmptyResult();
        }
        /*Vefificar produtos com correspondencia ou nao*/
        public EmptyResult VerificaProdutos()
        {
            //Para os itens sem correspondencia
            if (TempData["analise2"] == null)
            {
                //this.tribEmpProd = (from a in db.TributacaoEmpresas where a.CNPJ_EMPRESA == empresa.cnpj && a.ATIVO.Equals(1) select a).ToList();
                this.trib3 = (from a in db.Analise_Tributaria_3 where a.CNPJ_EMPRESA == empresa.cnpj && a.ATIVO.Equals(1) select a).ToList(); //lista com os itens divegentes
                this.trib2 = (from a in db.Analise_Tributaria_2 where a.CNPJ_EMPRESA == empresa.cnpj && a.ATIVO.Equals(1) select a).ToList(); //lista com os itens divegentes
                TempData["prdInexistente"] = this.trib2;
                //TempData["analise2"] = this.tribEmpProd;
                TempData["analise2"] = this.trib3;
                TempData.Keep("analise2");
                TempData.Keep("prdInexistente");
            }
            else
            {
                //this.tribEmpProd = (List<TributacaoEmpresa>)TempData["analise2"];
                this.trib3 = (List<AnaliseTributaria3>)TempData["analise2"];

                this.trib2 = (List<AnaliseTributaria2>)TempData["prdInexistente"];
                TempData.Keep("analise2");
                TempData.Keep("prdInexistente");
            }

            return new EmptyResult();
        }
        public EmptyResult VerificaTempDataSN()
        {
            /*Verifica a variavel do tipo temp data ANALISE, caso esteja nula carregar a lista novamente*/
            if (TempData["analiseSN"] == null)
            {
                //carrega a lista analise usando o cnpj da empresa do usuario

                this.analiseSn = (from a in db.Analise_TributariaSn where a.CNPJ_EMPRESA.Equals(this.empresa.cnpj) select a).ToList();

                this.analiseSn = this.analiseSn.Where(a => a.ATIVO == 1).ToList();
                //this.analiseSn = (from a in db.Analise_TributariaSn where a.CNPJ_EMPRESA.Equals(this.empresa.cnpj) && a.ATIVO.Equals(1) select a).ToList();

                TempData["analiseSN"] = this.analiseSn; //cria
                TempData.Keep("analiseSN"); //salva
            }
            else //não estando nula apenas atribui à lista o valor carregado em tempdata
            {
                this.analiseSn = (List<AnaliseTributariaSn>)TempData["analiseSN"];
                TempData.Keep("analiseSN");
            }

            return new EmptyResult();
        }

        /*PELO NCM - 27122022*/
        public EmptyResult VerificaTempData_por_NCM(string tributacao)
        {
            if(tributacao.Equals("SIMPLES"))
            {
                if (TempData["analise_NCM"] == null)
                {
                    this.analise_NCM = db.Analise_TributariaNCM.Where(a => a.CNPJ_EMPRESA.Equals(this.empresa.cnpj) && a.SIMP_NACIONAL_BASE == 1).ToList();
                    TempData["analise_NCM"] = this.analise_NCM;
                    TempData.Keep("analise_NCM");
                }
                else
                {
                    this.analise_NCM = (List<AnaliseTributariaNCM>)TempData["analise_NCM"];
                    TempData.Keep("analise_NCM");
                }


            }
            else
            {
                //para clientes que não sao simples
                if (TempData["analise_NCM"] == null)
                {
                    this.analise_NCM = db.Analise_TributariaNCM.Where(a => a.CNPJ_EMPRESA.Equals(this.empresa.cnpj) && a.SIMP_NACIONAL_BASE == 0).ToList();
                    TempData["analise_NCM"] = this.analise_NCM;
                    TempData.Keep("analise_NCM");
                }
                else
                {
                    this.analise_NCM = (List<AnaliseTributariaNCM>)TempData["analise_NCM"];
                    TempData.Keep("analise_NCM");
                }

            }
            return new EmptyResult();

        }
        public ActionResult MudarEmpresa()
        {
            int empresaUsuario = (int)Session["idEmpresa"];

            ViewBag.Empresas = db.Empresas.ToList();
            ViewBag.EmpUsuario = empresaUsuario;


            return View();

        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult MudarEmpresa(int? empresaUsuario)
        {
            int? usuarioemrpesa = empresaUsuario;
            if (usuarioemrpesa == null)
            {
                ViewBag.Empresas = db.Empresas.ToList();
                int empUser = (int)Session["idEmpresa"];
                ViewBag.EmpUsuario = empUser;
                return View();
            }
            this.emp = db.Empresas.Where(x => x.id == usuarioemrpesa).FirstOrDefault();
            //se nao, o sistema busca a empresa selecionado e aplica nas sessoes
            Session["idEmpresa"] = this.emp.id; //se nao esclhou nenhum  a session é com a propria empresa
            Session["cnpjEmp"] = this.emp.cnpj;
            Session["empresa"] = this.emp.fantasia;

            TempData["UfOrigem"] = this.emp.estado.ToString();
            TempData["UfDestino"] = this.emp.estado.ToString();

            Session["simplesNacional"] = this.emp.simples_nacional.ToString();
            Session["empresas"] = this.emp;
            TempData["analise"] = null;
            TempData["analise2"] = null;
            TempData["analiseSN"] = null;
            TempData["analiseProd"] = null; //view de produtos
            return RedirectToAction("Index", "../Home");


        }

        private EmptyResult VerificaTributacao(string tributacao)
        {
            if (tributacao == null || tributacao == "")
            {
                TempData["tributacao"] = (TempData["tributacao"] == null) ? "OUTROS" : TempData["tributacao"].ToString();
            }
            else
            {
                TempData["tributacao"] = tributacao;
            }
         
            return new EmptyResult();
        }

        private ActionResult VerificacaoInicial()
        {
            string usuarioSessao = ""; //variavel auxiliar
            if (Session["usuario"] == null)
            {
                return RedirectToAction("Login", "../Home");
            }
            else
            {
                usuarioSessao = Session["usuario"].ToString(); //pega o usuário da sessão
            }

            //Verifica se a variavel de sessão USUARIOS está nula, se estiver carrega as informações trazidas da sessão
            if (Session["usuarios"] == null)
            {
                this.usuario = (from a in db.Usuarios where a.nome == usuarioSessao select a).FirstOrDefault(); //pega o usuario
                this.empresa = (from a in db.Empresas where a.cnpj == usuario.empresa.cnpj select a).FirstOrDefault(); //empresa
                Session["usuarios"] = usuario;
                Session["empresas"] = empresa;
            }
            else
            {
                //será usada para carregar a lista pelo cnpj
                this.empresa = (Empresa)Session["empresas"]; //se nao for nula basta carregar a empresa em outra variavel de sessão

            }


            //origem e destino

            //montar select estado origem e destino
            ViewBag.EstadosOrigem = db.Estados.ToList();
            ViewBag.EstadosDestinos = db.Estados.ToList();

            //VerificaTributacao(tributacao); //verificar se a tributação escolhida está ativa
            //se for simples nacional direciona para essa action
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["tributacao"] = "SIMPLES";
                TempData.Keep("tributacao");
            }
            else
            {
                TempData["tributacao"] = "OUTROS";
                TempData.Keep("tributacao");
            }

            //verifica estados origem e destino
            VerificaOriDest(ufOrigem, ufDestino); //verifica a UF de origem e o destino 

            ViewBag.Tributacao = TempData["tributacao"].ToString();

            //aplica estado origem e destino
            ViewBag.UfOrigem = this.ufOrigem;
            ViewBag.UfDestino = this.ufDestino;

            //se for simples nacional direciona para essa action
            if (this.empresa.simples_nacional.Equals(1))
            {
                TempData["UfOrigem"] = null;
                TempData["UfDestino"] = null;


                TempData.Keep("UfDestino");
                TempData.Keep("UfOrigem");
                return RedirectToAction("AnaliseTributariaSN");
            }
            else
            {
                TempData["UfOrigem"] = null;
                TempData["UfDestino"] = null;


                TempData.Keep("UfDestino");
                TempData.Keep("UfOrigem");
                return RedirectToAction("AnaliseTributaria");
            }

           // return null;

        }
        //protected override void Dispose(bool disposing)
        //{
        //    if (disposing)
        //    {
        //        db.Dispose();
        //    }
        //    base.Dispose(disposing);
        //}
    }
}
